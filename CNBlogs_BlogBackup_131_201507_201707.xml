<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>博客园-态度决定一切</title><link>http://www.cnblogs.com/wuxiaobin/</link><description /><language>zh-cn</language><lastBuildDate>Mon, 03 Jul 2017 14:55:46 GMT</lastBuildDate><pubDate>Mon, 03 Jul 2017 14:55:46 GMT</pubDate><ttl>60</ttl><item><title>简单vue项目脚手架（vue+webpack2.0+vuex+vue-router）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2017/06/09/6970233.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Fri, 09 Jun 2017 00:45:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2017/06/09/6970233.html</guid><description><![CDATA[<h2 id="articleHeader1"><a href="https://github.com/xiaobinwu/my-vue-scaffold" target="_blank">github地址</a>(内含简单例子)</h2>
<h2 id="articleHeader2">使用技术栈</h2>
<blockquote>
<ul>
<li>
<p>webpack(^2.6.1)</p>
</li>
<li>
<p>webpack-dev-server(^2.4.5)</p>
</li>
<li>
<p>vue(^2.3.3)</p>
</li>
<li>
<p>vuex(^2.3.1)</p>
</li>
<li>
<p>vue-router(^2.5.3)</p>
</li>
<li>
<p>vue-loader(^12.2.1)</p>
</li>
<li>
<p>eslint(^3.19.0)</p>
</li>
</ul>
</blockquote>
<h2 id="articleHeader3">需要学习的知识</h2>
<p><a href="https://cn.vuejs.org/" target="_blank">vue.js</a>&nbsp;<br /><a href="https://vuex.vuejs.org/zh-cn/" target="_blank">vuex</a>&nbsp;<br /><a href="https://router.vuejs.org/zh-cn/" target="_blank">vue-router</a>&nbsp;<br /><a href="https://vue-loader.vuejs.org/zh-cn/" target="_blank">vue-loader</a>&nbsp;<br /><a href="https://doc.webpack-china.org/" target="_blank">webpack2</a>&nbsp;<br /><a href="http://eslint.cn/docs/user-guide/configuring" target="_blank">eslint</a>&nbsp;</p>
<p><br />内容相当多，尤其是webpack2教程，官方脚手架<a href="https://github.com/vuejs/vue-cli" target="_blank">vue-cli</a>虽然相当完整齐全，但是修改起来还是挺花时间，于是自己参照网上的资料和之前做过的<a href="https://github.com/xiaobinwu/Wuji" target="_blank">项目</a>用到的构建工具地去写了一个简单vue项目脚手架。适用于多页面spa模式的业务场景（每个模块都是一个spa）。比较简单,主要就是一个webpack.config.js文件，没有说特意地去划分成分webpack.dev.config.js、webpack.prov.config.js等等。下面是整个webpack.config.js文件代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">  1</span> const { resolve } = require('path'<span style="color: #000000;">)
</span><span style="color: #008080;">  2</span> const webpack = require('webpack'<span style="color: #000000;">)
</span><span style="color: #008080;">  3</span> const HtmlWebpackPlugin = require('html-webpack-plugin'<span style="color: #000000;">)
</span><span style="color: #008080;">  4</span> const ExtractTextPlugin = require('extract-text-webpack-plugin'<span style="color: #000000;">)
</span><span style="color: #008080;">  5</span> const glob = require('glob'<span style="color: #000000;">)
</span><span style="color: #008080;">  6</span> 
<span style="color: #008080;">  7</span> module.exports = (options = {}) =&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;">  8</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 配置文件，根据 run script不同的config参数来调用不同config</span>
<span style="color: #008080;">  9</span>     const config = require('./config/' + (process.env.npm_config_config || options.config || 'dev'<span style="color: #000000;">))
</span><span style="color: #008080;"> 10</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 遍历入口文件，这里入口文件与模板文件名字保持一致，保证能同时合成HtmlWebpackPlugin数组和入口文件数组</span>
<span style="color: #008080;"> 11</span>     const entries = glob.sync('./src/modules/*.js'<span style="color: #000000;">)
</span><span style="color: #008080;"> 12</span>     const entryJsList =<span style="color: #000000;"> {}
</span><span style="color: #008080;"> 13</span>     const entryHtmlList =<span style="color: #000000;"> []
</span><span style="color: #008080;"> 14</span>     <span style="color: #0000ff;">for</span><span style="color: #000000;"> (const path of entries) {
</span><span style="color: #008080;"> 15</span>         const chunkName = path.slice('./src/modules/'.length, -'.js'<span style="color: #000000;">.length)
</span><span style="color: #008080;"> 16</span>         entryJsList[chunkName] =<span style="color: #000000;"> path
</span><span style="color: #008080;"> 17</span>         entryHtmlList.push(<span style="color: #0000ff;">new</span><span style="color: #000000;"> HtmlWebpackPlugin({
</span><span style="color: #008080;"> 18</span>             template: path.replace('.js', '.html'<span style="color: #000000;">),
</span><span style="color: #008080;"> 19</span>             filename: 'modules/' + chunkName + '.html'<span style="color: #000000;">,
</span><span style="color: #008080;"> 20</span>             chunks: ['manifest', 'vendor'<span style="color: #000000;">, chunkName]
</span><span style="color: #008080;"> 21</span> <span style="color: #000000;">        }))
</span><span style="color: #008080;"> 22</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 23</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 处理开发环境和生产环境ExtractTextPlugin的使用情况</span>
<span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">function</span><span style="color: #000000;"> cssLoaders(loader, opt) {
</span><span style="color: #008080;"> 25</span>         const loaders = loader.split('!'<span style="color: #000000;">)
</span><span style="color: #008080;"> 26</span>         const opts = opt ||<span style="color: #000000;"> {}
</span><span style="color: #008080;"> 27</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (options.dev) {
</span><span style="color: #008080;"> 28</span>             <span style="color: #0000ff;">if</span><span style="color: #000000;"> (opts.extract) {
</span><span style="color: #008080;"> 29</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> loader
</span><span style="color: #008080;"> 30</span>             } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 31</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> loaders
</span><span style="color: #008080;"> 32</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 33</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 34</span>             const fallbackLoader =<span style="color: #000000;"> loaders.shift()
</span><span style="color: #008080;"> 35</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> ExtractTextPlugin.extract({
</span><span style="color: #008080;"> 36</span> <span style="color: #000000;">                use: loaders,
</span><span style="color: #008080;"> 37</span> <span style="color: #000000;">                fallback: fallbackLoader
</span><span style="color: #008080;"> 38</span> <span style="color: #000000;">            })
</span><span style="color: #008080;"> 39</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 40</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 41</span> 
<span style="color: #008080;"> 42</span>     const webpackObj =<span style="color: #000000;"> {
</span><span style="color: #008080;"> 43</span> <span style="color: #000000;">        entry: Object.assign({
</span><span style="color: #008080;"> 44</span>             vendor: ['vue', 'vuex', 'vue-router'<span style="color: #000000;">]
</span><span style="color: #008080;"> 45</span> <span style="color: #000000;">        }, entryJsList),
</span><span style="color: #008080;"> 46</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 文件内容生成哈希值chunkhash，使用hash会更新所有文件</span>
<span style="color: #008080;"> 47</span> <span style="color: #000000;">        output: {
</span><span style="color: #008080;"> 48</span>             path: resolve(__dirname, 'dist'<span style="color: #000000;">),
</span><span style="color: #008080;"> 49</span>             filename: options.dev ? 'static/js/[name].js' : 'static/js/[name].[chunkhash].js'<span style="color: #000000;">,
</span><span style="color: #008080;"> 50</span>             chunkFilename: 'static/js/[id].[chunkhash].js'<span style="color: #000000;">,
</span><span style="color: #008080;"> 51</span> <span style="color: #000000;">            publicPath: config.publicPath
</span><span style="color: #008080;"> 52</span> <span style="color: #000000;">        },
</span><span style="color: #008080;"> 53</span> 
<span style="color: #008080;"> 54</span> <span style="color: #000000;">        externals: {
</span><span style="color: #008080;"> 55</span> 
<span style="color: #008080;"> 56</span> <span style="color: #000000;">        },
</span><span style="color: #008080;"> 57</span> 
<span style="color: #008080;"> 58</span> <span style="color: #000000;">        module: {
</span><span style="color: #008080;"> 59</span> <span style="color: #000000;">            rules: [
</span><span style="color: #008080;"> 60</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 只 lint 本地 *.vue 文件，需要安装eslint-plugin-html，并配置eslintConfig（package.json）</span>
<span style="color: #008080;"> 61</span> <span style="color: #000000;">                {
</span><span style="color: #008080;"> 62</span>                     enforce: 'pre'<span style="color: #000000;">,
</span><span style="color: #008080;"> 63</span>                     test: /.vue$/<span style="color: #000000;">,
</span><span style="color: #008080;"> 64</span>                     loader: 'eslint-loader'<span style="color: #000000;">,
</span><span style="color: #008080;"> 65</span>                     exclude: /node_modules/
<span style="color: #008080;"> 66</span> <span style="color: #000000;">                },
</span><span style="color: #008080;"> 67</span>                 <span style="color: #008000;">/*</span>
<span style="color: #008080;"> 68</span> <span style="color: #008000;">                    http://blog.guowenfh.com/2016/08/07/ESLint-Rules/
</span><span style="color: #008080;"> 69</span> <span style="color: #008000;">                    http://eslint.cn/docs/user-guide/configuring
</span><span style="color: #008080;"> 70</span> <span style="color: #008000;">                    [eslint资料]
</span><span style="color: #008080;"> 71</span>                  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 72</span> <span style="color: #000000;">                {
</span><span style="color: #008080;"> 73</span>                     test: /\.js$/<span style="color: #000000;">,
</span><span style="color: #008080;"> 74</span>                     exclude: /node_modules/<span style="color: #000000;">,
</span><span style="color: #008080;"> 75</span>                     use: ['babel-loader', 'eslint-loader'<span style="color: #000000;">]
</span><span style="color: #008080;"> 76</span> <span style="color: #000000;">                },
</span><span style="color: #008080;"> 77</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 需要安装vue-template-compiler，不然编译报错</span>
<span style="color: #008080;"> 78</span> <span style="color: #000000;">                {
</span><span style="color: #008080;"> 79</span>                     test: /\.vue$/<span style="color: #000000;">,
</span><span style="color: #008080;"> 80</span>                     loader: 'vue-loader'<span style="color: #000000;">,
</span><span style="color: #008080;"> 81</span> <span style="color: #000000;">                    options: {
</span><span style="color: #008080;"> 82</span> <span style="color: #000000;">                        loaders: {
</span><span style="color: #008080;"> 83</span>                             sass: cssLoaders('vue-style-loader!css-loader!sass-loader', { extract: <span style="color: #0000ff;">true</span><span style="color: #000000;"> })
</span><span style="color: #008080;"> 84</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;"> 85</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;"> 86</span> <span style="color: #000000;">                },
</span><span style="color: #008080;"> 87</span> <span style="color: #000000;">                {
</span><span style="color: #008080;"> 88</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> 需要有相应的css-loader，因为第三方库可能会有文件</span>
<span style="color: #008080;"> 89</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> （如：element-ui） css在node_moudle</span>
<span style="color: #008080;"> 90</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> 生产环境才需要code抽离，不然的话，会使热重载失效</span>
<span style="color: #008080;"> 91</span>                     test: /\.css$/<span style="color: #000000;">,
</span><span style="color: #008080;"> 92</span>                     use: cssLoaders('style-loader!css-loader'<span style="color: #000000;">)
</span><span style="color: #008080;"> 93</span> <span style="color: #000000;">                },
</span><span style="color: #008080;"> 94</span> <span style="color: #000000;">                {
</span><span style="color: #008080;"> 95</span>                     test: /\.(scss|sass)$/<span style="color: #000000;">,
</span><span style="color: #008080;"> 96</span>                     use: cssLoaders('style-loader!css-loader!sass-loader'<span style="color: #000000;">)
</span><span style="color: #008080;"> 97</span> <span style="color: #000000;">                },
</span><span style="color: #008080;"> 98</span> <span style="color: #000000;">                {
</span><span style="color: #008080;"> 99</span>                     test: /\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\?.+)?$/<span style="color: #000000;">,
</span><span style="color: #008080;">100</span> <span style="color: #000000;">                    use: [
</span><span style="color: #008080;">101</span> <span style="color: #000000;">                        {
</span><span style="color: #008080;">102</span>                             loader: 'url-loader'<span style="color: #000000;">,
</span><span style="color: #008080;">103</span> <span style="color: #000000;">                            options: {
</span><span style="color: #008080;">104</span>                                 limit: 10000<span style="color: #000000;">,
</span><span style="color: #008080;">105</span>                                 name: 'static/imgs/[name].[ext]?[hash]'
<span style="color: #008080;">106</span> <span style="color: #000000;">                            }
</span><span style="color: #008080;">107</span> <span style="color: #000000;">                        }
</span><span style="color: #008080;">108</span> <span style="color: #000000;">                    ]
</span><span style="color: #008080;">109</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">110</span> <span style="color: #000000;">            ]
</span><span style="color: #008080;">111</span> <span style="color: #000000;">        },
</span><span style="color: #008080;">112</span> 
<span style="color: #008080;">113</span> <span style="color: #000000;">        plugins: [
</span><span style="color: #008080;">114</span> <span style="color: #000000;">            ...entryHtmlList,
</span><span style="color: #008080;">115</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 抽离css</span>
<span style="color: #008080;">116</span>             <span style="color: #0000ff;">new</span><span style="color: #000000;"> ExtractTextPlugin({
</span><span style="color: #008080;">117</span>                 filename: 'static/css/[name].[chunkhash].css'<span style="color: #000000;">,
</span><span style="color: #008080;">118</span>                 allChunks: <span style="color: #0000ff;">true</span>
<span style="color: #008080;">119</span> <span style="color: #000000;">            }),
</span><span style="color: #008080;">120</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 抽离公共代码</span>
<span style="color: #008080;">121</span>             <span style="color: #0000ff;">new</span><span style="color: #000000;"> webpack.optimize.CommonsChunkPlugin({
</span><span style="color: #008080;">122</span>                 names: ['vendor', 'manifest'<span style="color: #000000;">]
</span><span style="color: #008080;">123</span> <span style="color: #000000;">            }),
</span><span style="color: #008080;">124</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 定义全局常量</span>
<span style="color: #008080;">125</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> cli命令行使用process.env.NODE_ENV不如期望效果，使用不了，所以需要使用DefinePlugin插件定义，定义形式'"development"'或JSON.stringify('development')</span>
<span style="color: #008080;">126</span>             <span style="color: #0000ff;">new</span><span style="color: #000000;"> webpack.DefinePlugin({
</span><span style="color: #008080;">127</span>                 'process.env'<span style="color: #000000;">: {
</span><span style="color: #008080;">128</span>                     NODE_ENV: options.dev ? JSON.stringify('development') : JSON.stringify('production'<span style="color: #000000;">)
</span><span style="color: #008080;">129</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">130</span> <span style="color: #000000;">            })
</span><span style="color: #008080;">131</span> 
<span style="color: #008080;">132</span> <span style="color: #000000;">        ],
</span><span style="color: #008080;">133</span> 
<span style="color: #008080;">134</span> <span style="color: #000000;">        resolve: {
</span><span style="color: #008080;">135</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> require时省略的扩展名，不再需要强制转入一个空字符串，如：require('module') 不需要module.js</span>
<span style="color: #008080;">136</span>             extensions: ['.js', '.json', '.vue', '.scss', '.css'<span style="color: #000000;">],
</span><span style="color: #008080;">137</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> require路径简化</span>
<span style="color: #008080;">138</span> <span style="color: #000000;">            alias: {
</span><span style="color: #008080;">139</span>                 '~': resolve(__dirname, 'src'<span style="color: #000000;">),
</span><span style="color: #008080;">140</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> Vue 最早会打包生成三个文件，一个是 runtime only 的文件 vue.common.js，一个是 compiler only 的文件 compiler.js，一个是 runtime + compiler 的文件 vue.js。</span>
<span style="color: #008080;">141</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> vue.js = vue.common.js + compiler.js，默认package.json的main是指向vue.common.js，而template 属性的使用一定要用compiler.js，因此需要在alias改变vue指向</span>
<span style="color: #008080;">142</span>                 vue: 'vue/dist/vue'
<span style="color: #008080;">143</span> <span style="color: #000000;">            },
</span><span style="color: #008080;">144</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 指定import从哪个目录开始查找</span>
<span style="color: #008080;">145</span> <span style="color: #000000;">            modules: [
</span><span style="color: #008080;">146</span>                 resolve(__dirname, 'src'<span style="color: #000000;">),
</span><span style="color: #008080;">147</span>                 'node_modules'
<span style="color: #008080;">148</span> <span style="color: #000000;">            ]
</span><span style="color: #008080;">149</span> <span style="color: #000000;">        },
</span><span style="color: #008080;">150</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 开启http服务，publicPath =&gt; 需要与Output保持一致 || proxy =&gt; 反向代理 || port =&gt; 端口号</span>
<span style="color: #008080;">151</span>         devServer: config.devServer ?<span style="color: #000000;"> {
</span><span style="color: #008080;">152</span> <span style="color: #000000;">            port: config.devServer.port,
</span><span style="color: #008080;">153</span> <span style="color: #000000;">            proxy: config.devServer.proxy,
</span><span style="color: #008080;">154</span> <span style="color: #000000;">            publicPath: config.publicPath,
</span><span style="color: #008080;">155</span>             stats: { colors: <span style="color: #0000ff;">true</span><span style="color: #000000;"> }
</span><span style="color: #008080;">156</span> <span style="color: #000000;">        } : undefined,
</span><span style="color: #008080;">157</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 屏蔽文件超过限制大小的warn</span>
<span style="color: #008080;">158</span> <span style="color: #000000;">        performance: {
</span><span style="color: #008080;">159</span>             hints: options.dev ? <span style="color: #0000ff;">false</span> : 'warning'
<span style="color: #008080;">160</span> <span style="color: #000000;">        },
</span><span style="color: #008080;">161</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 生成devtool，保证在浏览器可以看到源代码，生产环境设为false</span>
<span style="color: #008080;">162</span>         devtool: 'inline-source-map'
<span style="color: #008080;">163</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">164</span> 
<span style="color: #008080;">165</span>     <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">options.dev) {
</span><span style="color: #008080;">166</span>         webpackObj.devtool = <span style="color: #0000ff;">false</span>
<span style="color: #008080;">167</span>         webpackObj.plugins = (webpackObj.plugins ||<span style="color: #000000;"> []).concat([
</span><span style="color: #008080;">168</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 压缩js</span>
<span style="color: #008080;">169</span>             <span style="color: #0000ff;">new</span><span style="color: #000000;"> webpack.optimize.UglifyJsPlugin({
</span><span style="color: #008080;">170</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> webpack2，默认为true，可以不用设置</span>
<span style="color: #008080;">171</span> <span style="color: #000000;">                compress: {
</span><span style="color: #008080;">172</span>                     warnings: <span style="color: #0000ff;">false</span>
<span style="color: #008080;">173</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">174</span> <span style="color: #000000;">            }),
</span><span style="color: #008080;">175</span>             <span style="color: #008000;">//</span><span style="color: #008000;">  压缩 loaders</span>
<span style="color: #008080;">176</span>             <span style="color: #0000ff;">new</span><span style="color: #000000;"> webpack.LoaderOptionsPlugin({
</span><span style="color: #008080;">177</span>                 minimize: <span style="color: #0000ff;">true</span>
<span style="color: #008080;">178</span> <span style="color: #000000;">            })
</span><span style="color: #008080;">179</span> <span style="color: #000000;">        ])
</span><span style="color: #008080;">180</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">181</span> 
<span style="color: #008080;">182</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> webpackObj
</span><span style="color: #008080;">183</span> }</pre>
</div>
<p>&nbsp;</p>
<h2 id="articleHeader4">上面的代码对于每个配置项都有注释说明，这里有几点需要注意的：</h2>
<h3 id="articleHeader5">1. webpack.config.js导出的是一个function</h3>
<p>之前<a href="https://github.com/xiaobinwu/Wuji" target="_blank">项目</a>的webpack.config.js是以对象形式export的，如下</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> module.exports =<span style="color: #000000;"> {
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    entry: ...,
</span><span style="color: #008080;">3</span> <span style="color: #000000;">    output: {
</span><span style="color: #008080;">4</span> <span style="color: #000000;">        ...
</span><span style="color: #008080;">5</span> <span style="color: #000000;">    },
</span><span style="color: #008080;">6</span> <span style="color: #000000;">    ...
</span><span style="color: #008080;">7</span> }</pre>
</div>
<p>而现在倒出来的是一个function，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> module.exports = (options = {}) =&gt;<span style="color: #000000;"> { 
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> {
</span><span style="color: #008080;">3</span> <span style="color: #000000;">        entry: ...,
</span><span style="color: #008080;">4</span> <span style="color: #000000;">        output: {
</span><span style="color: #008080;">5</span> <span style="color: #000000;">            ...
</span><span style="color: #008080;">6</span> <span style="color: #000000;">        },
</span><span style="color: #008080;">7</span> <span style="color: #000000;">        ...
</span><span style="color: #008080;">8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">9</span> }</pre>
</div>
<p>这样的话，function会在执行webpack CLI的时候获取webpack的参数，通过options传进function，看一下package.json：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>     "local": "npm run dev --config=local"<span style="color: #000000;">,
</span><span style="color: #008080;">2</span>     "dev": "webpack-dev-server -d --hot --inline --env.dev --env.config dev"<span style="color: #000000;">,
</span><span style="color: #008080;">3</span>     "build": "rimraf dist &amp;&amp; webpack -p --env.config prod" <span style="color: #008000;">//</span><span style="color: #008000;">rimraf清空dist目录</span></pre>
</div>
<p>对于<code>local</code>命令，我们执行的是<code>dev</code>命令，但是在最后面会<code>--config=local</code>，这是配置，这样我们可以通过<code>process.env.npm_config_config</code>获取到，而对于<code>dev</code>命令，对于<code>--env XXX</code>，我们便可以在function获取<code>option.config</code>= 'dev' 和&nbsp;<code>option.dev</code>= true的值，特别方便！以此便可以同步参数来加载不同的配置文件了。对于<code>-d</code>、<code>-p</code>不清楚的话，可以<a href="https://doc.webpack-china.org/api/cli/" target="_blank">这里</a>查看,很详细！</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 配置文件，根据 run script不同的config参数来调用不同config</span>
<span style="color: #008080;">2</span>     const config = require('./config/' + (process.env.npm_config_config || options.config || 'dev'))</pre>
</div>
<h3 id="articleHeader6">2. modules放置模板文件、入口文件、对应模块的vue文件</h3>
<p>将入口文件和模板文件放到modules目录（名字保持一致），webpack文件会通过glob读取modules目录，遍历生成入口文件对象和模板文件数组，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>     const entries = glob.sync('./src/modules/*.js'<span style="color: #000000;">)
</span><span style="color: #008080;"> 2</span>     const entryJsList =<span style="color: #000000;"> {}
</span><span style="color: #008080;"> 3</span>     const entryHtmlList =<span style="color: #000000;"> []
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">for</span><span style="color: #000000;"> (const path of entries) {
</span><span style="color: #008080;"> 5</span>         const chunkName = path.slice('./src/modules/'.length, -'.js'<span style="color: #000000;">.length)
</span><span style="color: #008080;"> 6</span>         entryJsList[chunkName] =<span style="color: #000000;"> path
</span><span style="color: #008080;"> 7</span>         entryHtmlList.push(<span style="color: #0000ff;">new</span><span style="color: #000000;"> HtmlWebpackPlugin({
</span><span style="color: #008080;"> 8</span>             template: path.replace('.js', '.html'<span style="color: #000000;">),
</span><span style="color: #008080;"> 9</span>             filename: 'modules/' + chunkName + '.html'<span style="color: #000000;">,
</span><span style="color: #008080;">10</span>             chunks: ['manifest', 'vendor'<span style="color: #000000;">, chunkName]
</span><span style="color: #008080;">11</span> <span style="color: #000000;">        }))
</span><span style="color: #008080;">12</span>     }</pre>
</div>
<p>对于HtmlWebpackPlugin插件中几个配置项的意思是，template：模板路径，filename：文件名称，这里为了区分开来模板文件我是放置在dist/modules文件夹中，而对应的编译打包好的js、img（对于图片我们是使用file-loader、url-loader进行抽离，对于这两个不是很理解的，可以看<a href="https://vue-loader.vuejs.org/zh-cn/configurations/asset-url.html" target="_blank">这里</a>）、css我也是会放在dist/下对应目录的，这样目录会比较清晰。chunks：指定插入文件中的chunk,后面我们会生成manifest文件、公共vendor、以及对应生成的jscss（名称一样）</p>
<h3 id="articleHeader7">3. 处理开发环境和生产环境ExtractTextPlugin的使用情况</h3>
<p>开发环境，不需要把css进行抽离，要以style插入html文件中，可以很好实现热替换&nbsp;生产环境，需要把css进行抽离合并，如下（根据options.dev区分开发和生产）：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 处理开发环境和生产环境ExtractTextPlugin的使用情况</span>
<span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">function</span><span style="color: #000000;"> cssLoaders(loader, opt) {
</span><span style="color: #008080;"> 3</span>         const loaders = loader.split('!'<span style="color: #000000;">)
</span><span style="color: #008080;"> 4</span>         const opts = opt ||<span style="color: #000000;"> {}
</span><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (options.dev) {
</span><span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">if</span><span style="color: #000000;"> (opts.extract) {
</span><span style="color: #008080;"> 7</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> loader
</span><span style="color: #008080;"> 8</span>             } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;"> 9</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> loaders
</span><span style="color: #008080;">10</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">11</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {
</span><span style="color: #008080;">12</span>             const fallbackLoader =<span style="color: #000000;"> loaders.shift()
</span><span style="color: #008080;">13</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> ExtractTextPlugin.extract({
</span><span style="color: #008080;">14</span> <span style="color: #000000;">                use: loaders,
</span><span style="color: #008080;">15</span> <span style="color: #000000;">                fallback: fallbackLoader
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            })
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    ...
</span><span style="color: #008080;">20</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 使用情况</span>
<span style="color: #008080;">21</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 注意：需要安装vue-template-compiler，不然编译会报错</span>
<span style="color: #008080;">22</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">23</span>         test: /\.vue$/<span style="color: #000000;">,
</span><span style="color: #008080;">24</span>         loader: 'vue-loader'<span style="color: #000000;">,
</span><span style="color: #008080;">25</span> <span style="color: #000000;">        options: {
</span><span style="color: #008080;">26</span> <span style="color: #000000;">            loaders: {
</span><span style="color: #008080;">27</span>                 sass: cssLoaders('vue-style-loader!css-loader!sass-loader', { extract: <span style="color: #0000ff;">true</span><span style="color: #000000;"> })
</span><span style="color: #008080;">28</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">29</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">30</span> <span style="color: #000000;">    },
</span><span style="color: #008080;">31</span> <span style="color: #000000;">    ...
</span><span style="color: #008080;">32</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">33</span>         test: /\.(scss|sass)$/<span style="color: #000000;">,
</span><span style="color: #008080;">34</span>         use: cssLoaders('style-loader!css-loader!sass-loader'<span style="color: #000000;">)
</span><span style="color: #008080;">35</span>     }</pre>
</div>
<p>再使用ExtractTextPlugin合并抽离到<code>static/css/</code>目录</p>
<h3 id="articleHeader8">4. 定义全局常量</h3>
<p>cli命令行（<code>webpack -p</code>）使用process.env.NODE_ENV不如期望效果，使用不了，所以需要使用DefinePlugin插件定义，定义形式'"development"'或JSON.stringify(process.env.NODE_ENV)，我使用这样的写法'development'，结果报错（针对webpack2），查找了一下网上资料，<a href="https://github.com/webpack/webpack/issues/2537" target="_blank">它</a>是这样讲的，可以去看一下，设置如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>     <span style="color: #0000ff;">new</span><span style="color: #000000;"> webpack.DefinePlugin({
</span><span style="color: #008080;">2</span>         'process.env'<span style="color: #000000;">: {
</span><span style="color: #008080;">3</span>             NODE_ENV: options.dev ? JSON.stringify('development') : JSON.stringify('production'<span style="color: #000000;">)
</span><span style="color: #008080;">4</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">5</span>     })</pre>
</div>
<h3 id="articleHeader9">5. 使用eslint修正代码规范</h3>
<p>通过eslint来检查代码的规范性，通过定义一套配置项，来规范代码，这样多人协作，写出来的代码也会比较优雅，不好的地方是，就是配置项太多，有些默认项设置我们不需要，但是确是处处限制我们，需要通过配置屏蔽掉，可以通过<code>.eslintrc&nbsp;</code>文件或是package.json的<code>eslintConfig</code>，还有其他方式，可以到<a href="http://eslint.cn/" target="_blank">中文网</a>看，这里我用的是package.json方式，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">    ...
</span><span style="color: #008080;"> 2</span>   "eslintConfig"<span style="color: #000000;">: {
</span><span style="color: #008080;"> 3</span>     "parser": "babel-eslint"<span style="color: #000000;">,
</span><span style="color: #008080;"> 4</span>     "extends": "enough"<span style="color: #000000;">,
</span><span style="color: #008080;"> 5</span>     "env"<span style="color: #000000;">: {
</span><span style="color: #008080;"> 6</span>       "browser": <span style="color: #0000ff;">true</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 7</span>       "node": <span style="color: #0000ff;">true</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 8</span>       "commonjs": <span style="color: #0000ff;">true</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 9</span>       "es6": <span style="color: #0000ff;">true</span>
<span style="color: #008080;">10</span> <span style="color: #000000;">    },
</span><span style="color: #008080;">11</span>     "rules"<span style="color: #000000;">: {
</span><span style="color: #008080;">12</span>       "linebreak-style": 0<span style="color: #000000;">,
</span><span style="color: #008080;">13</span>       "indent": [2, 4<span style="color: #000000;">],
</span><span style="color: #008080;">14</span>       "no-unused-vars": 0<span style="color: #000000;">,
</span><span style="color: #008080;">15</span>       "no-console": 0
<span style="color: #008080;">16</span> <span style="color: #000000;">    },
</span><span style="color: #008080;">17</span>     "plugins"<span style="color: #000000;">: [
</span><span style="color: #008080;">18</span>       "html"
<span style="color: #008080;">19</span> <span style="color: #000000;">    ]
</span><span style="color: #008080;">20</span> <span style="color: #000000;">  },
</span><span style="color: #008080;">21</span>   ...</pre>
</div>
<p>我们还需要安装&nbsp;<code>npm install eslint eslint-config-enough eslint-loader --save-dev</code>，eslint-config-enough是所谓的配置文件，这样package.json的内容才能起效，但是不当当是这样，对应编辑器也需要安装对应的插件，sublime text 3需要安装SublimeLinter、SublimeLinter-contrib-eslint插件。对于所有规则的详解，可以去看<a href="http://eslint.cn/docs/user-guide/configuring" target="_blank">官网</a>，也可以去<a href="http://blog.guowenfh.com/2016/08/07/ESLint-Rules/" target="_blank">这里</a>看，很详细！<br />由于我们使用的是vue-loader，自然我们是希望能对.vue文件eslint，那么需要安装eslint-plugin-html，在package.json中进行配置。然后对应webpack配置：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">2</span>         enforce: 'pre'<span style="color: #000000;">,
</span><span style="color: #008080;">3</span>         test: /.vue$/<span style="color: #000000;">,
</span><span style="color: #008080;">4</span>         loader: 'eslint-loader'<span style="color: #000000;">,
</span><span style="color: #008080;">5</span>         exclude: /node_modules/
<span style="color: #008080;">6</span>     }</pre>
</div>
<p>我们会发现webpack v1和v2之间会有一些不同，比如webpack1对于预先加载器处理的执行是这样的，</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">  module: {
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    preLoaders: [
</span><span style="color: #008080;">3</span> <span style="color: #000000;">      {
</span><span style="color: #008080;">4</span>         test: /\.js$/<span style="color: #000000;">,
</span><span style="color: #008080;">5</span>         loader: "eslint-loader"
<span style="color: #008080;">6</span> <span style="color: #000000;">      }
</span><span style="color: #008080;">7</span> <span style="color: #000000;">    ]
</span><span style="color: #008080;">8</span>   }</pre>
</div>
<p>更多的不同可以到<a href="https://doc.webpack-china.org/guides/migrating/" target="_blank">中文网</a>看,很详细，不做拓展。</p>
<h3 id="articleHeader10">6. alias vue指向问题</h3>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">    ...
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    alias: {
</span><span style="color: #008080;">3</span>         vue: 'vue/dist/vue'
<span style="color: #008080;">4</span> <span style="color: #000000;">    },
</span><span style="color: #008080;">5</span>     ...</pre>
</div>
<p>Vue 最早会打包生成三个文件，一个是 runtime only 的文件 vue.common.js，一个是 compiler only 的文件 compiler.js，一个是 runtime + compiler 的文件 vue.js。vue.js = vue.common.js + compiler.js，默认package.json的main是指向vue.common.js，而template 属性的使用一定要用compiler.js，因此需要在alias改变vue指向</p>
<h3 id="articleHeader11">7. devServer的使用</h3>
<p>之前的<a href="https://github.com/xiaobinwu/Wuji" target="_blank">项目</a>中使用的是用express启动http服务，webpack-dev-middleware＋webpack-hot-middleware，这里会用到compiler＋compilation，这个是webpack的编译器和编译过程的一些知识，也不是很懂，后续要去做做功课，应该可以加深对webpack运行机制的理解。这样做的话，感觉复杂很多，对于webpack2.0 devServer似乎功能更强大更加完善了，所以直接使用就可以了。如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">    devServer: {
</span><span style="color: #008080;"> 2</span>         port: 8080, <span style="color: #008000;">//</span><span style="color: #008000;">端口号</span>
<span style="color: #008080;"> 3</span>         proxy: { <span style="color: #008000;">//</span><span style="color: #008000;">方向代理 /api/auth/ ＝&gt; http://api.example.dev</span>
<span style="color: #008080;"> 4</span>             '/api/auth/'<span style="color: #000000;">: {
</span><span style="color: #008080;"> 5</span>                 target: 'http://api.example.dev'<span style="color: #000000;">,
</span><span style="color: #008080;"> 6</span>                 changeOrigin: <span style="color: #0000ff;">true</span><span style="color: #000000;">,
</span><span style="color: #008080;"> 7</span>                 pathRewrite: { '^/api': ''<span style="color: #000000;"> }
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        },
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        publicPath: config.publicPath,
</span><span style="color: #008080;">11</span>         stats: { colors: <span style="color: #0000ff;">true</span><span style="color: #000000;"> }
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span>     <span style="color: #008000;">//</span><span style="color: #008000;">changeOrigin会修改HTTP请求头中的Host为target的域名， 这里会被改为api.example.dev</span>
<span style="color: #008080;">14</span>     <span style="color: #008000;">//</span><span style="color: #008000;">pathRewrite用来改写URL， 这里我们把/api前缀去掉，直接使用/auth/请求</span></pre>
</div>
<p><a href="https://github.com/fenivana/webpack-in-action" target="_blank">webpack 2 打包实战</a>讲解得非常好，非常棒。可以去看一下，一定会有所收获！</p>
<h3 id="articleHeader12">8. 热重载原理</h3>
<p><a href="https://doc.webpack-china.org/concepts/hot-module-replacement/" target="_blank">webpack中文网</a>,讲的还算清楚，不过可能太笨，看起来还是云里雾里的，似懂非懂的，补补课，好好看看。</p>
<h3 id="articleHeader13">9. localtunnel的使用</h3>
<p>Localtunnel 是一个可以让内网服务器暴露到公网上的开源项目，使用可以看<a href="https://scarletsky.github.io/2016/01/17/localtunnel-usage/" target="_blank">这里</a>，</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $ npm install -<span style="color: #000000;">g localtunnel
</span><span style="color: #008080;">2</span> $ lt --port 8080
<span style="color: #008080;">3</span> your url is: https:<span style="color: #008000;">//</span><span style="color: #008000;">uhhzexcifv.localtunnel.me</span></pre>
</div>
<p>这样的话，可以把我们的本地网站暂时性地暴露到公网，可以对网站做一些线上线下对比，详细内容可以去了解一下localtunnel，这里讲的是通过上面配置，访问<code>https://uhhzexcifv.localtunnel.me</code>，没有达到理想效果，出现了<code>Invalid Host header</code>的错误,因为devServer缺少一个配置<code>disableHostCheck: true</code>,这样的一个配置，很多文档上面都没有说明，字面上面的意思<code>不要去检查Host</code>，这样设置，便可以绕过这一层检验，设置的配置项在<a href="https://github.com/webpack/webpack-dev-server/blob/master/lib/optionsSchema.json" target="_blank">optionsSchema.json</a>中，issue可以看<a href="https://github.com/webpack/webpack-dev-server/issues/883" target="_blank">这里</a></p>
<h3>10. 升级webpack3.0</h3>
<p>webpack3.0完美向下兼容，添加了些新特性，如范围提升，魔法注释 &rdquo;Magic Comments（暂时不知道怎么用），升级过程遇到<code>Uncaught TypeError: Cannot read property 'call' of undefined</code>的错误，最后在HtmlWebpackPlugin插件配置了<code>chunksSortMode: 'dependency'</code>解决了。</p>
<p>文章内容可能会更新，可以关注github</p>]]></description></item><item><title>Vue2.0 全家桶开发的网页应用（参照吾记APP)</title><link>http://www.cnblogs.com/wuxiaobin/archive/2017/06/02/6931706.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Fri, 02 Jun 2017 01:04:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2017/06/02/6931706.html</guid><description><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/720690/201706/720690-20170602085823555-1110579161.png" alt="" /></p>
<h2 id="articleHeader0"><a href="https://github.com/xiaobinwu/Wuji" target="_blank">github链接</a></h2>
<p>借鉴吾记APP，使用 vue2.0+vue-router+vuex 为主要技术栈，elementui做为ui框架，多模块 spa 模式，webpack2.0 负责模块打包，gulp 负责处理静态资源打包、压缩，欢迎打赏star！！！</p>
<h2 id="articleHeader1">安利一下</h2>
<p><img src="http://images2015.cnblogs.com/blog/720690/201706/720690-20170602085852571-800112774.png" alt="" /></p>
<h2 id="articleHeader2">吾记前端构建流程</h2>
<h4>本地环境准备</h4>
<ul>
<li>
<p>安装node： *&nbsp;<a href="https://nodejs.org/en/download/" target="_blank">https://nodejs.org/en/download/</a>&nbsp;（"node": "&gt;=6.0"，对应需要升级node-sass，不然使用不了！）</p>
</li>
<li>
<p>配置webpack： npm install -g webpack(sudo权限)</p>
</li>
<li>
<p>windows配置cnpm：</p>
</li>
</ul>
<div class="cnblogs_code">
<pre>npm install -g cnpm --registry=https:<span style="color: #008000;">//</span><span style="color: #008000;">registry.npm.taobao.org<br /><br /></span><code><span class="hljs-built_in"><span class="hljs-regexp"><span class="hljs-built_in"> 因为<span class="hljs-built_in">npm的默认仓库在国外，下载很慢，国内淘宝搞了个CNPM，每<span class="hljs-number">10分钟同步一次，完全够用了</span></span></span></span></span></code></pre>
</div>
<h3 id="articleHeader3">依赖包安装</h3>
<ul>
<li>
<p>进入wuji目录</p>
</li>
<li>
<p>执行cnpm install</p>
</li>
</ul>
<h3 id="articleHeader4">构建</h3>
<ul>
<li>
<p>开发环境：执行 node server.js（或 npm run serve）</p>
</li>
<li>
<p>热加载 node server.js hot-reload（或 npm run hot）</p>
</li>
<li>
<p>mock数据 npm run mock</p>
</li>
<li>
<p>生产环境：执行 npm run build</p>
</li>
</ul>
<h2 id="articleHeader5">关于source Mapping（仅支持chrome 浏览器）</h2>
<ul>
<li>
<p>source Mapping就是一个代码映射跟踪，方便本地开发时debug压缩文件</p>
</li>
<li>
<p>确保chrome已打开<a href="https://developer.chrome.com/devtools/docs/settings#enable-js" target="_blank">source Mapping</a>&nbsp;(默认是打开的)</p>
</li>
<li>
<p>打开Develop Tools -》 Sources 即可看到源文件</p>
</li>
</ul>
<h2 id="articleHeader6">hot reload（支持构建的实时刷新）</h2>
<ul>
<li>
<p>环境准备：</p>
</li>
<li>
<p>cnpm install express webpack-dev-middleware webpack-hot-middleware</p>
</li>
<li>
<p>执行node server.js hot-reload（或 npm run hot）</p>
</li>
<li>
<p>静态资源访问eg：http://localhost:8088/Static/...</p>
</li>
</ul>
<h2 id="articleHeader7">自定义主题</h2>
<ul>
<li>
<p>进入wuji目录</p>
</li>
<li>
<p>cnpm install element-theme element-theme-default --save-dev （依赖包安装时已安装）</p>
</li>
<li>
<p>执行node_modules/.bin/et -i</p>
</li>
<li>
<p>生成element-variables.css</p>
</li>
<li>
<p>执行node_modules/.bin/et</p>
</li>
<li>
<p>则会创建./theme</p>
</li>
<li>
<p>更改主题时，对应.babelrc的修改会如下：</p>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: #000000;">    {
      </span>"plugins": [["component"<span style="color: #000000;">, [
        {
          </span>"libraryName": "element-ui"<span style="color: #000000;">,
          </span>"styleLibraryName": "~theme"<span style="color: #000000;">
        }
      ]]]
    }</span></pre>
</div>
<h2 id="articleHeader8">autoprefixer（样式前缀兼容性处理），在vue-loader option进行配置</h2>
<ul>
<li>
<p>生成规则：</p>
</li>
<li>
<p>自动加上浏览器样式前缀，兼容各浏览器（针对份额大于全球统计数据的1%，firefox 15）</p>
</li>
</ul>
<h2 id="articleHeader9">静态资源gulp处理（/public）</h2>
<div class="widget-codetool">&nbsp;</div>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> gulp = require('gulp'<span style="color: #000000;">),
    uglify </span>= require('gulp-uglify'), <span style="color: #008000;">//</span><span style="color: #008000;">压缩js</span>
    rename = require("gulp-rename"), <span style="color: #008000;">//</span><span style="color: #008000;">文件重命名</span>
    changed = require('gulp-changed'), <span style="color: #008000;">//</span><span style="color: #008000;">监听文件是否修改</span>
    imagemin = require('gulp-imagemin'), <span style="color: #008000;">//</span><span style="color: #008000;"> 图片压缩</span>
    pngquant = require('imagemin-pngquant'), <span style="color: #008000;">//</span><span style="color: #008000;"> 深度压缩</span>
    runSequence = require('run-sequence'),     <span style="color: #008000;">//</span><span style="color: #008000;"> 同步运行任务插件</span>
    del = require('del'), <span style="color: #008000;">//</span><span style="color: #008000;">删除文件</span>
    spritesmith = require('gulp.spritesmith'), <span style="color: #008000;">//</span><span style="color: #008000;">合成雪碧图</span>
    find = require("gulp-find-glob"); <span style="color: #008000;">//</span><span style="color: #008000;">得到glob对象</span></pre>
</div>
<ul>
<li>
<p>进入wuji/assets/public目录</p>
</li>
<li>
<p>cnpm install</p>
</li>
<li>
<p>执行 gulp（压缩js、图片）</p>
</li>
<li>
<p>执行 gulp sprite（生成雪碧图）[将需要合成雪碧的图片放入images/sprite/中某个新建的文件夹，运行，则可以在该文件夹下看到对应sprite.png、sprite.scss]</p>
</li>
</ul>
<h2 id="articleHeader10">前端页面</h2>
<blockquote>
<p>index.html =&gt; 我的日记列表<br />passing.html =&gt; 过客列表<br />account.html =&gt; 登录注册页面</p>
<p>微信小程序实战github：<a href="https://github.com/xiaobinwu/dj" target="_blank">https://github.com/xiaobinwu/dj</a></p>




</blockquote>]]></description></item><item><title>微信小程序实战练习（仿五洲到家微信版）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2017/05/25/6902344.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Thu, 25 May 2017 02:19:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2017/05/25/6902344.html</guid><description><![CDATA[<h1 id="articleHeader0">&nbsp;</h1>
<p>github地址（欢迎star）：<a href="https://github.com/xiaobinwu/dj" target="_blank">https://github.com/xiaobinwu/dj</a></p>
<h2 id="articleHeader1">版本：0.15.152900（暂未升级原因：升级后需要图片无法本地引用，必须使用image或是远程路径引用）</h2>
<p><span class="img-wrap"><img src="https://segmentfault.com/img/bVOed0?w=376&amp;h=672" alt="" data-src="/img/bVOed0?w=376&amp;h=672" /><span class="img-wrap"><img src="https://segmentfault.com/img/bVOeek?w=375&amp;h=671" alt="" data-src="/img/bVOeek?w=375&amp;h=671" /></span></span></p>
<h2 id="articleHeader2">目录结构</h2>
<p><span class="img-wrap"><img src="https://segmentfault.com/img/bVOd9V?w=303&amp;h=913" alt="" data-src="/img/bVOd9V?w=303&amp;h=913" /></span></p>
<blockquote>
<ul>
<li>
<p>css =&gt; 放置公用wxss,目前只有一个font.wcss</p>
</li>
<li>
<p>image =&gt; 静态资源目录</p>
</li>
<li>
<p>lib =&gt; 第三方库（如：qqmap-wx-jssdk.min.js）</p>
</li>
<li>
<p>pages =&gt; 小程序页面（包括四个文件，.wxml/.wxss/.js/.json）</p>
</li>
<li>
<p>template =&gt; 抽离出来的template，具有复用性</p>
</li>
<li>
<p>utils =&gt; 工具类</p>
</li>
<li>
<p>app.js/app.json/app.wxss =&gt; 配置</p>
</li>
</ul>
</blockquote>
<h2 id="articleHeader3">踩过的坑</h2>
<h3 id="articleHeader4">1. promise封装</h3>
<p>官方request代码：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">wx.request({
  url: 'test.php', //仅为示例，并非真实的接口地址
  data: {
     x: '' ,
     y: ''
  },
  header: {
      'content-type': 'application/json'
  },
  success: function(res) {
    console.log(res.data)
  }
})
</pre>
</div>
<p>　　</p>
<p>但是有很多场景需要promise化的，所以使用第三方promise库（es6-promise.min.js），对request进行了一层包装：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">/* utils/util.js */
/* api接口promise 柯里化*/
var Promise = require('../lib/es6-promise.min.js'); 
function wxPromisify(fn, scope) {  
  return function (obj = {}) {    
    return new Promise((resolve, reject) =&gt; {      
      obj.success = function (res) {        
        resolve(res);      
      }      
      obj.fail = function (res) {        
        reject(res);      
      }
      if(scope){
        //改变this指向
        var newFn = fn.bind(scope);
        newFn(obj);
      }else{
        fn(obj);
      }      
    })  
  }
}
/* request 封装*/
var wxrequest = wxPromisify(wx.request);
function wxRequest(options, tokenNotRequired){
    return wxrequest(options).then(res =&gt; {
      var data = res.data;
      if(data.status === 404404) {
          if(tokenNotRequired){
                delete options.headers;
                return wxRequest(options);
          }else{
                return updateToken().then(token =&gt; {
                    return wxRequest(object.assignIn(options, {
                        headers: { 'X-Auth-Token': token }
                    }));
                });
          }
      }else {
          return Promise.resolve(data);
      }
    }).catch(err =&gt; {
      return Promise.reject(err);
    });
}
</pre>
</div>
<p>　　</p>
<h3 id="articleHeader5">2. Javascript作用域问题</h3>
<p>由于小程序默认给的微信地图api有些需求达不到要求，于是使用第三方库（qqmap-wx-jssdk.min.js，这是绝配），这样定位功能也比较好做，以及后续要做的地址管理模块也比较好下手，但是有个问题，对微信地图jdk接口进行promise化后，使用过程会报错，导致定位失败，所以需要改变其执行作用，于是对wxPromisify()方法做了些改造，重新绑定作用域至qqmapsdk，调用如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;">address.js</span><span style="color: #008000;">
//</span><span style="color: #008000;"> 引入SDK核心类</span>
<span style="color: #0000ff;">var</span> QQMapWX = require('../lib/qqmap-wx-jssdk.min.js'<span style="color: #000000;">);
</span><span style="color: #008000;">//</span><span style="color: #008000;"> 实例化API核心类(需要配置安全域名https://apis.map.qq.com)</span>
<span style="color: #0000ff;">var</span> qqmapsdk = <span style="color: #0000ff;">new</span><span style="color: #000000;"> QQMapWX({
    key: </span>'xxxxx' <span style="color: #008000;">//</span><span style="color: #008000;">需要到腾地图上申请key</span>
<span style="color: #000000;">});

...
...

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 请求用户授权定位</span><span style="color: #008000;">
//</span><span style="color: #008000;">逆地址解析</span>
<span style="color: #0000ff;">var</span> ReverseGeocoder = util.wxPromisify(qqmapsdk.reverseGeocoder, qqmapsdk); <span style="color: #008000;">//</span><span style="color: #008000;">需改变作用域</span></pre>
</div>
<p>&nbsp;</p>
<p>对于小程序是需要配置对应的安全域名的，这样才能执行request</p>
<h3 id="articleHeader6">3. 如何衍生出组件模板</h3>
<p>模板页（template）没有天生配对js，但是也可以实现，实现面向对象的思想，对模板所需要的js进行一层类的封装，保证构造函数需要接受父页面的上下文对象，然后可以把声明好的类方法绑定到父页面上面去，对于模板页js方法，以_FUN()方式命名。下面是为图片懒加载优化而做的swiper模板组件，可以参考一下。</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;">*
 * 图片预加载组件
 *
 * @author xiaobin_wu
 * template/silder/silder.js
 </span><span style="color: #008000;">*/</span><span style="color: #000000;">
class Slider {
    constructor(pageContext, options </span>=<span style="color: #000000;"> { picList: [], showArr:[] }){
        </span><span style="color: #0000ff;">this</span>.page = pageContext; <span style="color: #008000;">//</span><span style="color: #008000;">获取页面上下文</span>
        <span style="color: #0000ff;">this</span>.page.data.slider =<span style="color: #000000;"> {
            picList: options.picList,
            showArr: options.showArr
        }; </span><span style="color: #008000;">//</span><span style="color: #008000;">初始化data</span>
        <span style="color: #0000ff;">this</span>.page._sliderChange = <span style="color: #0000ff;">this</span>._sliderChange.bind(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">监听滑动事件，实现图片懒加载</span>
<span style="color: #000000;">    _sliderChange(e){
        </span><span style="color: #0000ff;">if</span>(<span style="color: #0000ff;">this</span><span style="color: #000000;">.page.data.slider.showArr){
            let showArr </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.page.data.slider.showArr;
            </span><span style="color: #0000ff;">for</span>(let i = 0; i &lt; showArr.length; i++<span style="color: #000000;">){
                </span><span style="color: #0000ff;">if</span>(i ===<span style="color: #000000;"> e.detail.current){
                    showArr[i] </span>= <span style="color: #0000ff;">true</span><span style="color: #000000;">;
                }
            }
            </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.page.setData({
                </span>'slider.showArr'<span style="color: #000000;">: showArr
            });
        }
    }
    initData(imgs){
        const arr </span>= <span style="color: #0000ff;">new</span> Array(imgs.length).fill(<span style="color: #0000ff;">false</span><span style="color: #000000;">);
        </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.page.setData({
            </span>'slider.picList'<span style="color: #000000;">: imgs,
            </span>'slider.showArr': arr.fill(<span style="color: #0000ff;">true</span>, 0 , 1<span style="color: #000000;">)
        });
    }
}
module.exports </span>= Slider</pre>
</div>
<p>&nbsp;</p>
<p>以类形式module.exports出去，Page页面，以<code>var Slider = require('../../template/slider/slider.js');</code>形式引入，然后<code>new</code>操作，模板wxml也参考<code>template/silder/silder.wxml</code>，也可以对应写wxss，这样做模板页复用性高，类似组件的模式。</p>
<h3 id="articleHeader7">4. scroll-view使用scroll-x失效问题</h3>
<p>刚开始使用scroll-view，scroll-x一直失效，不能水平scroll，折腾了好多时间，结果这样就成了，大概如下结构（home.wxml）：</p>
<div class="cnblogs_code">
<pre>&lt;scroll-view  scroll-x="{{true}}" scroll-left="{{scrollLeft}}"  class="scroll-bar" style="width:100%;" &gt;
    &lt;view style="width: {{idxData.navbar.length * 168}}rpx"&gt;
        &lt;view wx:<span style="color: #0000ff;">for</span>="{{idxData.navbar}}" wx:<span style="color: #0000ff;">for</span>-item="cate" class="cate-item {{index == currentIndex ? 'active' : ''}}" data-id="{{cate.nav_id}}" data-index="{{index}}" bindtap="cateClick"&gt;{{cate.nav_name}}&lt;/view&gt;
    &lt;/view&gt;
&lt;/scroll-view&gt;</pre>
</div>
<p>&nbsp;</p>
<p>忽略其他乱起八糟的代码，主要是这个<code>&lt;view style="width: {{idxData.navbar.length * 168}}rpx"&gt;</code>,需要保证scroll-view下面的view的width必须要大于100%，充满整个scroll-view</p>
<h3 id="articleHeader8">4. swiper高度无法自动撑开，暂时不支持</h3>
<p><span class="img-wrap"><img src="https://segmentfault.com/img/bVOeaz?w=377&amp;h=569" alt="" data-src="/img/bVOeaz?w=377&amp;h=569" /><br />于是对于红线部分的产品分类swiper，就只能手动计算swiper高度，来实现swiper的效果，但是由于对应每个swiper-item还会有个下拉加载，所以产品数目会一直变化，所以计算起来相当于耗性能，希望官方能尽快让swiper高度允许自动撑开</span></p>
<h3 id="articleHeader9">5. template模板</h3>
<p>template模板，对象传递方式=&gt;<code>data={{a: x1,b: x2}}</code>，x1、x2对应data绑定的变量</p>
<h3 id="articleHeader10">6. setData设置动态数据</h3>
<p>可能你会遇到这种情况（设置动态数据）：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">this</span><span style="color: #000000;">.setData({
    </span>'array[0]': 1<span style="color: #000000;">
});
</span><span style="color: #008000;">/*</span><span style="color: #008000;">
    上面这样设置是没问题的，但是是动态的，那该怎么办？这样...

 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">this</span><span style="color: #000000;">.setData({
    </span>'array['+ index +']': 1<span style="color: #000000;">
});
</span><span style="color: #008000;">/*</span><span style="color: #008000;">
    很遗憾，无法怎么做

</span><span style="color: #008000;">*/</span></pre>
</div>
<p>&nbsp;</p>
<p>解决办法，声明中间量，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;"> utils/util.js </span><span style="color: #008000;">*/</span>
<span style="color: #008000;">//</span><span style="color: #008000;">动态setData</span>
<span style="color: #0000ff;">function</span> dynamicSetData(field, index, value, suffix, type='object'<span style="color: #000000;">){
    </span><span style="color: #0000ff;">var</span> param =<span style="color: #000000;"> {};
    </span><span style="color: #0000ff;">var</span> string = field + '[' + index + ']' + (<span style="color: #0000ff;">typeof</span> suffix !== 'undefined' ?  type === 'object' ? '.' + suffix  : '[' + suffix + ']' : ''<span style="color: #000000;">);
    param[string] </span>=<span style="color: #000000;"> value;
    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> param;
}</span></pre>
</div>
<p>&nbsp;</p>
<p>这样最后就可以这样，<code>this.setData(util.dynamicSetData('firstLoadDataFlag', index, true));</code>，即可用于对象的改变，也可以用于数组的改变。</p>
<h3 id="articleHeader11">7. 设置顶层标签Page的样式，处理安卓机的背景色问题</h3>
<h3 id="articleHeader12">8 px与rpx之间转化</h3>
<p>对于小程序中，也有一些组件需要传递变量单位为px的，如果这个变量是需要计算出来的，但是我们使用的确是rpx单位，那么他们之间的转化比例是有必要知道的</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;"> utils/util.js </span><span style="color: #008000;">*/</span>
<span style="color: #008000;">//</span><span style="color: #008000;">获取px与rpx之间的比列</span>
<span style="color: #0000ff;">function</span><span style="color: #000000;"> getRpx(){
    </span><span style="color: #0000ff;">var</span> winWidth =<span style="color: #000000;"> wx.getSystemInfoSync().windowWidth;
    </span><span style="color: #0000ff;">return</span> 750/winWidth;
}</pre>
</div>
<p>&nbsp;</p>
<h3 id="articleHeader13">8. image问题</h3>
<p>image组件，其实对于src图片路径，是以背景图展示的，并不是真的类似img，auto是不生效的。</p>
<h3 id="articleHeader14">9. wx.navigateBack返回无法传参数通知</h3>
<p>wx.navigateBack返回通知上一页执行指定函数的作用，可以使用getCurrentPages()来获取上一页page对象，事先执行，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;"> pages/order-detail/order-detail.js </span><span style="color: #008000;">*/</span>
<span style="color: #008000;">//</span><span style="color: #008000;">返回执行上一个页面的函数,good</span>
navigateBackFun: <span style="color: #0000ff;">function</span><span style="color: #000000;">(){
  </span><span style="color: #0000ff;">var</span> pages =<span style="color: #000000;"> getCurrentPages();
  </span><span style="color: #0000ff;">var</span> prevPage = pages[pages.length - 2<span style="color: #000000;">];
  </span><span style="color: #0000ff;">if</span>(prevPage.__route__.indexOf("pages/order/order") != -1<span style="color: #000000;">) {
        prevPage.actionCallback(</span><span style="color: #0000ff;">this</span>.data.btnAction,<span style="color: #0000ff;">this</span><span style="color: #000000;">.data.page);
  }
}</span></pre>
</div>
<p>&nbsp;</p>
<h3 id="articleHeader15">10. class可以多组操作</h3>
<div class="cnblogs_code">
<pre>&lt;view class="status-item {{index == orderData.progress.last_index? 'active' : ''}} {{index === orderData.progress.info.length - 1 ? 'last-status-item' : ''}}"&gt;&lt;/view&gt;</pre>
</div>
<p>&nbsp;</p>
<h3 id="articleHeader16">11. 对于字体文件的使用</h3>
<p>对于下面的字体文件的引用会导致报错，微信小程序似乎不支持怎么使用</p>
<div class="cnblogs_code">
<pre>@font-<span style="color: #000000;">face {
  font</span>-family: 'Glyphicons Halflings'<span style="color: #000000;">;

  src: url(</span>'/assets/fonts/glyphicons-halflings-regular.eot'<span style="color: #000000;">);
  src: url(</span>'/assets/fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('/assets/fonts/glyphicons-halflings-regular.woff2') format('woff2'), url('/assets/fonts/glyphicons-halflings-regular.woff') format('woff'), url('/assets/fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('/assets/fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg'<span style="color: #000000;">);
}</span></pre>
</div>
<p>&nbsp;</p>
<p>解决办法，将ttf文件拿出，转化成base64，以wxss引入。<a href="https://transfonter.org/" target="_blank">base64转化</a></p>
<h3 id="articleHeader17">12. 购物车功能</h3>
<p>对于购车功能也是相当折腾的，通过在app.js定义全局变量：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">cartData:{
    list:[],
    totalCount:</span>1<span style="color: #000000;">,
    totalPrice:</span>0<span style="color: #000000;">,

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 起送价</span>
    floorPrice:0<span style="color: #000000;">,

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 总价达到此价免配送费</span>
    freeShipPrice:0<span style="color: #000000;">,

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 运费</span>
    deliveryFee:0<span style="color: #000000;">,

    storeId:</span>0<span style="color: #000000;">,
    storeName:</span>''<span style="color: #000000;">
}</span></pre>
</div>
<p>&nbsp;</p>
<p>然后每次加减产品，清空购物车来操作cartData的变化，list存储购物车产品数据，在首页和产品详情页，可以来获取购物车的数据，当然也会把购物车数据的商品id和门店id存储到Storage，可以用来异步更新最新的购物车数据，在首页和产品详情页的来回切换，对于购物车需要时刻去检查，映射到对应分类的swiper产品的加减变化，这里有没有像vue中vuex的状态管理能对数据集中管理，（对于vuex的使用&nbsp;<a href="https://github.com/xiaobinwu/Wuji" target="_blank">点击</a>），导致监听变化变得很复杂，有把加减部件cart-ctrl和购物车cart提取成template模板组件，结果处理起来，这里一万个省略号，很悲催！github地址（欢迎star）：<a href="https://github.com/xiaobinwu/dj" target="_blank">https://github.com/xiaobinwu/dj</a></p>]]></description></item><item><title>vue2.0项目  calendar.js(日历组件封装)</title><link>http://www.cnblogs.com/wuxiaobin/archive/2017/03/25/6618768.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Sat, 25 Mar 2017 14:15:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2017/03/25/6618768.html</guid><description><![CDATA[<p>最近一直闲来无事，便寻思着做一下自己的个人项目，也想说能使用现在比较流行的一些mvvm框架来做，于是就选用了这样的一个技术栈vue2.0+vue-router+vuex+webpack来做，做得也是多页面应用，使用vue-router，也是想说把多个功能模块化，单个模块spa，实现更高的效果。当然现在还在做的过程中，如果感兴趣可以过来star一下，哈哈，<a href="https://github.com/xiaobinwu/Wuji" target="_blank">https://github.com/xiaobinwu/Wuji</a>，git clone下来看看。</p>
<p>今天要说的是在做这个项目的过程中，自己想加一个日历功能，但是找遍很多插件，没有多少是合我心意，于是就想说自己写一个，但是想象太美好，技术能力不够，写不出，此处省略一万字。最后找到百度日历还挺符合我要的日历功能，但是我想更加自定化更好一下，于是就拿这个来做了一下修改。结果长这样：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201703/720690-20170325220945611-503965189.jpg" alt="" /></p>
<p>将其最后的日历组件赋值给一个全局变量，用模块模式暴露一下方法，可以对日历进行配置：</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="cal"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="top"</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="select"</span><span style="color: #0000ff;">&gt;</span>
                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">select </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="year-select"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">select</span><span style="color: #0000ff;">&gt;</span><span style="color: #ff0000;">&amp;nbsp;</span><span style="color: #000000;">年
                </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">select </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="month-select"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">select</span><span style="color: #0000ff;">&gt;</span><span style="color: #ff0000;">&amp;nbsp;</span><span style="color: #000000;">月
            </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="step"</span><span style="color: #0000ff;">&gt;</span>
                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="prev"</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">&lt;/span</span><span style="color: #0000ff;">&gt;</span>
                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="next"</span><span style="color: #0000ff;">&gt;</span>&gt;<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>                               
            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="wk"</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>一<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>二<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>三<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>四<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>五<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">b</span><span style="color: #0000ff;">&gt;</span>六<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">b</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">b</span><span style="color: #0000ff;">&gt;</span>日<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">b</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="cm"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="bm"</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="heavenly-branch"</span><span style="color: #0000ff;">&gt;</span>
                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="heavenly"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>年 <span style="color: #ff0000;">&amp;nbsp;</span><span style="color: #000000;">
                ［</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="branch"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">］
            </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">="javascript:;;"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="now-date"</span><span style="color: #0000ff;">&gt;</span>回到今天<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>js：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">    calendar.init({
        cellClickCallback: </span><span style="color: #0000ff;">function</span><span style="color: #000000;">(cell, datedata){
            console.log(datedata);
            alert(</span>'你点击的是'+ datedata.solarYear + '年' + datedata.solarMonth + '月' + datedata.solarDate + '日'<span style="color: #000000;">);        
        }
    });</span></pre>
</div>
<p>于是对源代码做了一些注释，为了以后修改，可以去看详细的代码：<a href="https://github.com/xiaobinwu/MyResourceLibrary/tree/master/calendar.js" target="_blank">&nbsp;https://github.com/xiaobinwu/calendar.js</a></p>]]></description></item><item><title>如何使用require.js?</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/11/23/4988410.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Mon, 23 Nov 2015 07:45:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/11/23/4988410.html</guid><description><![CDATA[<p>最近几天在学习一个javascript库require.js，也看了一些相关的教学视频，这里推荐一下幕课网阿当老师的《<a href="http://www.imooc.com/learn/99" target="_blank">阿当大话西游之Web组件</a>》的教学视频，一整套看下来，参照视频里面的demo从头做一遍，对于require.js的使用以及web组件的编写挺有帮助的，作为菜鸟，看完后觉得获得更多的是一种编程思想的塑造！可以去看看！</p>
<p>言归正传，什么是require.js？</p>
<p>RequireJS是一个工具库，主要用于客户端的模块管理。它可以让客户端的代码分成一个个模块，实现异步或动态加载，从而提高代码的性能和可维护性。它的模块管理遵守AMD规范，模块与模块之间可以互相依赖，当然可能会有人会想，模块之间的依赖，要是没法正确地去按照特定顺序加载，会出现错误，AMD规范可以处理这种问题，AMD就是这样一种对模块的定义，使模块和它的依赖可以被异步的加载，但又按照正确的顺序。<br /><br /></p>
<p>AMD是"Asynchronous Module Definition"的缩写，意思就是"异步模块定义"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
<p>如何使用require.js?</p>
<p>将require.js下载下来，嵌入网页中，</p>
<div class="cnblogs_code">
<pre>&lt;script data-main=<span style="color: #800000;">"</span><span style="color: #800000;">scripts/main</span><span style="color: #800000;">"</span> src=<span style="color: #800000;">"</span><span style="color: #800000;">scripts/require.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;</pre>
</div>
<p>这里的data-main属性声明的是入口文件scripts/main.js，这里我们把.js后缀省略掉了。也有以下这种写法：</p>
<div class="cnblogs_code">
<pre>&lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">scripts/require.js</span><span style="color: #800000;">"</span> data-main=<span style="color: #800000;">"</span><span style="color: #800000;">scripts/main</span><span style="color: #800000;">"</span> defer <span style="color: #0000ff;">async</span>=<span style="color: #800000;">"</span><span style="color: #800000;">true</span><span style="color: #800000;">"</span> &gt;&lt;/script&gt;</pre>
</div>
<p>async属性表明这个文件需要异步加载，避免网页失去响应。IE不支持这个属性，只支持defer，所以把defer也写上。同时，官方提供了 require.js和 jquery 的打包版本，于是也可以怎么引入：</p>
<div class="cnblogs_code">
<pre>&lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">scripts/require-jquery.js</span><span style="color: #800000;">"</span> data-main=<span style="color: #800000;">"</span><span style="color: #800000;">scripts/main</span><span style="color: #800000;">"</span> defer <span style="color: #0000ff;">async</span>=<span style="color: #800000;">"</span><span style="color: #800000;">true</span><span style="color: #800000;">"</span> &gt;&lt;/script&gt;</pre>
</div>
<p>RequireJS通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载。</p>
<p>使用define方法，可以将代码写在一个js文件，独立开来作为一个模块，如我建立一个animate模块(animate.js)，如下：</p>
<div class="cnblogs_code">
<p>define(function(){ <br />	　　function animate(){ <br />		　　　　this.name="animate";<br />	　　};<br />	　　<strong>return</strong> { <br />			　　　　animate:animate ,<br />			　　　　dec:"这是一个描述"<br />	　　};<br />})</p>






</div>
<p>将你的模块代码放置在define(function(){ &nbsp;/*代码*/ &nbsp; });，然后将该模块return的对象暴露出来，可以供其他模块依赖此模块的时候，可以去调用这个模块的API。比如我们建立一个tabview模块(tabview.js)去依赖这个animate模块，</p>
<div class="cnblogs_code">
<pre>define([<span style="color: #800000;">'</span><span style="color: #800000;">animate</span><span style="color: #800000;">'</span><span style="color: #000000;">],function(a){
    function tabview(){ 
        </span><span style="color: #0000ff;">this</span>.name= <span style="color: #800000;">'</span><span style="color: #800000;">tabview</span><span style="color: #800000;">'</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">this</span>.animate =<span style="color: #000000;"> a.animate.name;
        </span><span style="color: #0000ff;">this</span>.dec =<span style="color: #000000;"> a.dec;
    } 
    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> { tabview:tabview };
})</span></pre>
</div>
<p>分析上面的代码，我们将animate模块引入，并给其赋予一个a的别名。那么在该模块不就可以调用animate模块里面的方法和属性了吗？</p>
<p>这里我们在多建一个treeview模块（treeview.js）,如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">define(function(){ 
    function treeview(){ 
        </span><span style="color: #0000ff;">this</span>.name=<span style="color: #800000;">"</span><span style="color: #800000;">treeview</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    };
    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> { treeview:treeview };
})</span></pre>
</div>
<p>接下来，我们需要去使用前面我们定义好的模块，便可以require方法来实现，见其写在main.js中，如下：</p>
<div class="cnblogs_code">
<pre>require([<span style="color: #800000;">'</span><span style="color: #800000;">tabview</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">treeview</span><span style="color: #800000;">'</span><span style="color: #000000;">],function(a,b){ 
    </span><span style="color: #0000ff;">var</span> tab = <span style="color: #0000ff;">new</span><span style="color: #000000;"> a.tabview();
    </span><span style="color: #0000ff;">var</span> tree = <span style="color: #0000ff;">new</span><span style="color: #000000;"> b.treeview();
    alert(tab.name);
    alert(tab.animate);
    alert(tab.dec);
    alert(tree.name);
});</span></pre>
</div>
<p>使用该方法加载tabview、treeview两个模块，而tabview会去依赖animate模块，由于模块返回的都是对象，那我们可以new一个对象去调用加载模块中的方法和属性！</p>
<p>在main.js,我们需要去配置一下模块的路径，就那上面例子来说，需要配置一下几个模块的路径，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">require.config({
　　　paths: {
　　　　　</span><span style="color: #800000;">"</span><span style="color: #800000;">tabview</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">js/tabview</span><span style="color: #800000;">"</span><span style="color: #000000;">,
　　　　　</span><span style="color: #800000;">"</span><span style="color: #800000;">animate</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">js/animate</span><span style="color: #800000;">"</span><span style="color: #000000;">,
　　　　　</span><span style="color: #800000;">"</span><span style="color: #800000;">treeview</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">js/treeview</span><span style="color: #800000;">"</span><span style="color: #000000;">
　　　}
　});

</span><span style="color: #008000;">//</span><span style="color: #008000;">另一种则是直接改变基目录（baseUrl）。后缀.js可以省略</span>
<span style="color: #000000;">require.config({
　　　　baseUrl: </span><span style="color: #800000;">"</span><span style="color: #800000;">js/lib</span><span style="color: #800000;">"</span><span style="color: #000000;">,
　　　　paths: {
　　　　　　</span><span style="color: #800000;">"</span><span style="color: #800000;">jquery</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">jquery.min</span><span style="color: #800000;">"</span><span style="color: #000000;">,
　　　　　　</span><span style="color: #800000;">"</span><span style="color: #800000;">underscore</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">underscore.min</span><span style="color: #800000;">"</span><span style="color: #000000;">,
　　　　　　</span><span style="color: #800000;">"</span><span style="color: #800000;">backbone</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">backbone.min</span><span style="color: #800000;">"</span><span style="color: #000000;">
　　　　}
});</span></pre>
</div>
<p>这样require.js便可以很灵活地使用来进行模块化管理了，这里有一个基于require.js去搭建一个web组件（弹窗的demo）,很值得学习一下！可以去看看！github地址：<a href="https://github.com/xiaobinwu/require.js-Popup-window-" target="_blank">https://github.com/xiaobinwu/require.js-Popup-window-</a></p>
<p>参考资料：<a href="http://javascript.ruanyifeng.com/tool/requirejs.html" target="_blank">RequireJS和AMD规范</a></p>]]></description></item><item><title>websocket全双工通信</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/11/03/4932163.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 03 Nov 2015 01:25:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/11/03/4932163.html</guid><description><![CDATA[<p>websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信websocket全双工通信</p>]]></description></item><item><title>移动web技能总结</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/10/31/4925378.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Sat, 31 Oct 2015 14:49:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/10/31/4925378.html</guid><description><![CDATA[<p>对于作为一名前端开发人员，除了能够编写出满足需求的PC端页面之外，同时也是需要懂得怎么去制作移动web页面，毕竟使用移动设备来操作任何处理称为新时代的趋势，所以学好制作一个移动web时必须滴。于是通过学习和总结，将自己学到的一些技能总结一下！</p>
<p>首先是移动像素，对于px应该都不会觉得陌生，这是css针对浏览器设计的一种逻辑像素，是浏览器使用的抽象单位！dp、pt，江湖人称设备无关像素，也就是设备的物理像素！而dpr，设备像素的缩放比，是px和dp联系的桥梁！有怎么一个计算公式1px＝dpr*dpr*dp。</p>
<p>iphone5的规格是640*1136，其实是这样的640dp*1136dp，通过换算等价于320px*568px，那么它们的dpr便是2，通过上面的计算公式，不难得出1px的逻辑像素就会等于4dp的物理单位像素。</p>
<p>还有怎么一个概念，ppi指的是屏幕每英寸的像素数量，即单位英寸内的像素密度。辣么，ppi越高的话，单位dp量就会更多，那么图像就会更清晰了！</p>
<p>比如iphone5，大小4英寸，那么其ppi则是这样计算的：&radic;(1136*1136+640*640)/4，等于326ppi。注意现在我们的手机大多数都是retina高清屏，所以这样我们的dpr一般都是大于等于2。</p>
<p>&nbsp;而那么一个pc页面在移动设备上的展示，默认会是以980px（ios标准，安卓各式各样）的viewport缩小后完全显示在移动浏览器上，那往往又不是我们想要的那种效果，那么这个时候需要修改viewport，使用meta标签，</p>
<div class="cnblogs_code">
<pre>&lt;meta name=<span style="color: #800000;">"</span><span style="color: #800000;">viewport</span><span style="color: #800000;">"</span> content=<span style="color: #800000;">"</span><span style="color: #800000;">width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no</span><span style="color: #800000;">"</span>&gt;</pre>
</div>
<p>width：设置布局viewport的特定值,一般都是使用device-width<br />initial-scale：初始化页面的缩放<br />minimum-scale：最少缩放<br />maximum-scale：最大缩放<br />user-scalable：用户是否缩放</p>
<p>接下来介绍几种布局模式呢，首先是弹性布局Flexbox，下面介绍一些属性</p>
<div class="cnblogs_code">
<pre>display:flex; <span style="color: #008000;">//</span><span style="color: #008000;">声明父元素为弹性盒子</span>
<span style="color: #000000;">
flex:</span><span style="color: #800080;">1</span>;<span style="color: #008000;">//</span><span style="color: #008000;">子元素占据容器的宽度</span>
<span style="color: #000000;">
flex</span>-direction: row|row-reverse|column|column-reverse <span style="color: #008000;">//</span><span style="color: #008000;">规定子元素是行显示还是列显示</span>
<span style="color: #000000;">
flex</span>-wrap: nowrap|wrap|wrap-reverse <span style="color: #008000;">//</span><span style="color: #008000;">nowrap强制子元素不溢出，在同一行显示，wrap允许充满溢出至下一行</span>
<span style="color: #000000;">
flex</span>-flow:[flex-direction] [flex-wrap] <span style="color: #008000;">//</span><span style="color: #008000;">[flex-direction]和[flex-wrap]的结合</span>
justify-content: flex-start|flex-end|center|space-between|space-around  <span style="color: #008000;">//</span><span style="color: #008000;">写在父元素，设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式，主要是space-between和space-around，一个是两边对齐，一个间隔排列</span>
<span style="color: #000000;">
align</span>-items:flex-start|flex-end|center|auto|baseline|stretch  <span style="color: #008000;">//</span><span style="color: #008000;">写在父元素，设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。，stretch是伸缩充满整个父元素的高度</span>
<span style="color: #000000;">
align</span>-self:flex-start|flex-end|center|auto|baseline|stretch  <span style="color: #008000;">//</span><span style="color: #008000;">应用于子元素，设置或检索弹性盒子元素自身在侧轴（纵轴）方向上的对齐方式。</span>
<span style="color: #000000;">

order:</span><span style="color: #800080;">1</span>; <span style="color: #008000;">//</span><span style="color: #008000;">应用于子元素，规定其顺序 <a href="http://t.cn/RUfJCDH" target="_blank">http://t.cn/RUfJCDH</a>，支持一下！</span></pre>
</div>
<p>下面有个demo：</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('7925aea8-52d1-4ac6-9eeb-6601ad3cf22a')"><img id="code_img_closed_7925aea8-52d1-4ac6-9eeb-6601ad3cf22a" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_7925aea8-52d1-4ac6-9eeb-6601ad3cf22a" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('7925aea8-52d1-4ac6-9eeb-6601ad3cf22a',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_7925aea8-52d1-4ac6-9eeb-6601ad3cf22a" class="cnblogs_code_hide">
<pre><span style="color: #008080;"> 1</span> &lt;!DOCTYPE html&gt;
<span style="color: #008080;"> 2</span> &lt;html&gt;
<span style="color: #008080;"> 3</span> &lt;head&gt;
<span style="color: #008080;"> 4</span>     &lt;title&gt;弹性布局Flexbox&lt;/title&gt;
<span style="color: #008080;"> 5</span>     &lt;meta charset=<span style="color: #800000;">"</span><span style="color: #800000;">utf8</span><span style="color: #800000;">"</span> /&gt;
<span style="color: #008080;"> 6</span>     &lt;meta name=<span style="color: #800000;">"</span><span style="color: #800000;">viewport</span><span style="color: #800000;">"</span> content=<span style="color: #800000;">"</span><span style="color: #800000;">width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;"> 7</span>     &lt;style type=<span style="color: #800000;">"</span><span style="color: #800000;">text/css</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;"> 8</span>     html,body{ padding: <span style="color: #800080;">0</span>; margin: <span style="color: #800080;">0</span><span style="color: #000000;">;  }
</span><span style="color: #008080;"> 9</span>     .flexbox{ display: flex; display: -webkit-flex; justify-content:center; align-<span style="color: #000000;">items:center; color:#fff;}
</span><span style="color: #008080;">10</span>     .space-between{ justify-content:space-<span style="color: #000000;">between; }
</span><span style="color: #008080;">11</span>     .space-around{ justify-content:space-<span style="color: #000000;">around; }
</span><span style="color: #008080;">12</span>     .flexbox &gt;<span style="color: #000000;"> div{ height: 200px; }
</span><span style="color: #008080;">13</span>     .flex-<span style="color: #800080;">1</span>{ flex:<span style="color: #800080;">1</span>; -webkit-flex:<span style="color: #800080;">1</span>; text-<span style="color: #000000;">align: center; }
</span><span style="color: #008080;">14</span>     .flex-<span style="color: #800080;">2</span>{ flex:<span style="color: #800080;">2</span>; -webkit-flex:<span style="color: #800080;">2</span>;text-<span style="color: #000000;">align: center; }
</span><span style="color: #008080;">15</span>     .flex-<span style="color: #800080;">3</span>{ flex:<span style="color: #800080;">3</span>; -webkit-flex:<span style="color: #800080;">3</span>;text-<span style="color: #000000;">align: center; }
</span><span style="color: #008080;">16</span> <span style="color: #000000;">    .red{ background: #f05b72; }
</span><span style="color: #008080;">17</span> <span style="color: #000000;">    .green{background: #b2d235;}
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    .blue{ background: #2a5caa; }
</span><span style="color: #008080;">19</span>     .mt20{ margin-<span style="color: #000000;">top: 20px; }
</span><span style="color: #008080;">20</span>     .flex-row{ flex-<span style="color: #000000;">direction:row; }
</span><span style="color: #008080;">21</span>     .flex-row-reverse{ flex-direction:row-<span style="color: #000000;">reverse; }
</span><span style="color: #008080;">22</span>     .flex-column{ flex-<span style="color: #000000;">direction:column; }
</span><span style="color: #008080;">23</span>     .flex-column-reverse{ flex-direction:column-<span style="color: #000000;">reverse; }
</span><span style="color: #008080;">24</span>     .flex-wrap-nowrap{ flex-<span style="color: #000000;">wrap:nowrap; }
</span><span style="color: #008080;">25</span>     .flex-wrap-wrap{ flex-wrap:wrap; <span style="color: #008000;">/*</span><span style="color: #008000;">wrap-reverse</span><span style="color: #008000;">*/</span><span style="color: #000000;"> }
</span><span style="color: #008080;">26</span>     &lt;/style&gt;
<span style="color: #008080;">27</span> &lt;/head&gt;
<span style="color: #008080;">28</span> &lt;body&gt;
<span style="color: #008080;">29</span> &lt;div&gt;[flex-direction:row; ]&lt;/div&gt;
<span style="color: #008080;">30</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox flex-row</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">31</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red flex-1</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">1</span>&lt;/div&gt;
<span style="color: #008080;">32</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green flex-2</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">2</span>&lt;/div&gt;
<span style="color: #008080;">33</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue flex-3</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">3</span>&lt;/div&gt;
<span style="color: #008080;">34</span> &lt;/div&gt;
<span style="color: #008080;">35</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">mt20</span><span style="color: #800000;">"</span>&gt;[flex-direction:row-reverse; ]&lt;/div&gt;
<span style="color: #008080;">36</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox flex-row-reverse </span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">37</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red flex-1</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">1</span>&lt;/div&gt;
<span style="color: #008080;">38</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green flex-2</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">2</span>&lt;/div&gt;
<span style="color: #008080;">39</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue flex-3</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">3</span>&lt;/div&gt;
<span style="color: #008080;">40</span> &lt;/div&gt;
<span style="color: #008080;">41</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">mt20</span><span style="color: #800000;">"</span>&gt;[flex-direction:column;]&lt;/div&gt;
<span style="color: #008080;">42</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox flex-column</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">43</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100%;</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">1</span>&lt;/div&gt;
<span style="color: #008080;">44</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100%;</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">2</span>&lt;/div&gt;
<span style="color: #008080;">45</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100%;</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">3</span>&lt;/div&gt;
<span style="color: #008080;">46</span> &lt;/div&gt;
<span style="color: #008080;">47</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">'</span><span style="color: #800000;">mt20</span><span style="color: #800000;">'</span>&gt;[flex-direction:column-reverse;]&lt;/div&gt;
<span style="color: #008080;">48</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox flex-column-reverse </span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">49</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100%;</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">1</span>&lt;/div&gt;
<span style="color: #008080;">50</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100%;</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">2</span>&lt;/div&gt;
<span style="color: #008080;">51</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100%;</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">3</span>&lt;/div&gt;
<span style="color: #008080;">52</span> &lt;/div&gt;
<span style="color: #008080;">53</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">'</span><span style="color: #800000;">mt20</span><span style="color: #800000;">'</span>&gt;[flex-wrap:nowrap;]&lt;/div&gt;
<span style="color: #008080;">54</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox flex-wrap-nowrap </span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">55</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:600px;</span><span style="color: #800000;">"</span>&gt;width:600px;&lt;/div&gt;
<span style="color: #008080;">56</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:800px;</span><span style="color: #800000;">"</span>&gt;width:800px;&lt;/div&gt;
<span style="color: #008080;">57</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:500px</span><span style="color: #800000;">"</span>&gt;width:500px&lt;/div&gt;
<span style="color: #008080;">58</span> &lt;/div&gt;
<span style="color: #008080;">59</span> 
<span style="color: #008080;">60</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">'</span><span style="color: #800000;">mt20</span><span style="color: #800000;">'</span>&gt;[flex-wrap:wrap;]&lt;/div&gt;
<span style="color: #008080;">61</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox flex-wrap-wrap </span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">62</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:600px;</span><span style="color: #800000;">"</span>&gt;width:600px;&lt;/div&gt;
<span style="color: #008080;">63</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:800px;</span><span style="color: #800000;">"</span>&gt;width:800px;&lt;/div&gt;
<span style="color: #008080;">64</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:500px</span><span style="color: #800000;">"</span>&gt;width:500px&lt;/div&gt;
<span style="color: #008080;">65</span> &lt;/div&gt;
<span style="color: #008080;">66</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">'</span><span style="color: #800000;">mt20</span><span style="color: #800000;">'</span>&gt;[justify-content:space-between; ]&lt;/div&gt;
<span style="color: #008080;">67</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox mt20 space-between</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">68</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:500px;</span><span style="color: #800000;">"</span>&gt;width:500px;&lt;/div&gt;
<span style="color: #008080;">69</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:500px;</span><span style="color: #800000;">"</span>&gt;width:500px;&lt;/div&gt;
<span style="color: #008080;">70</span> &lt;/div&gt;
<span style="color: #008080;">71</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">'</span><span style="color: #800000;">mt20</span><span style="color: #800000;">'</span>&gt;[justify-content:space-around; ]&lt;/div&gt;
<span style="color: #008080;">72</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox mt20 space-around</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">73</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:500px;</span><span style="color: #800000;">"</span>&gt;width:500px;&lt;/div&gt;
<span style="color: #008080;">74</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:500px;</span><span style="color: #800000;">"</span>&gt;width:500px;&lt;/div&gt;
<span style="color: #008080;">75</span> &lt;/div&gt;
<span style="color: #008080;">76</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox mt20</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">77</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100px;margin-right:20px;</span><span style="color: #800000;">"</span>&gt;margin-right:20px;&lt;/div&gt;
<span style="color: #008080;">78</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green flex-1</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">1</span>&lt;/div&gt;
<span style="color: #008080;">79</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue</span><span style="color: #800000;">"</span>style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100px;margin-left:20px;</span><span style="color: #800000;">"</span>&gt;margin-left:20px;&lt;/div&gt;
<span style="color: #008080;">80</span> &lt;/div&gt;
<span style="color: #008080;">81</span> &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">flexbox mt20</span><span style="color: #800000;">"</span>&gt;
<span style="color: #008080;">82</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">red</span><span style="color: #800000;">"</span> style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100px;margin-right:20px;</span><span style="color: #800000;">"</span>&gt;margin-right:20px;&lt;/div&gt;
<span style="color: #008080;">83</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">green flex-1</span><span style="color: #800000;">"</span>&gt;flex-<span style="color: #800080;">1</span>&lt;/div&gt;
<span style="color: #008080;">84</span>     &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">blue</span><span style="color: #800000;">"</span>style=<span style="color: #800000;">"</span><span style="color: #800000;">width:100px;margin-left:20px;</span><span style="color: #800000;">"</span>&gt;margin-left:20px;&lt;/div&gt;
<span style="color: #008080;">85</span> &lt;/div&gt;
<span style="color: #008080;">86</span> &lt;/body&gt;
<span style="color: #008080;">87</span> &lt;/html&gt;</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;当然对于display:flex;，低版本的一些浏览器是不能支持的，于是可以使用比较旧版本的弹性盒子，其他的属性都是相对应的，我们也必须去了解一下盒子模型display:box;，这里不讲了，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;">支持多个版本，旧的flexbox</span><span style="color: #008000;">*/</span><span style="color: #000000;">
display:</span>-webkit-flex-<span style="color: #000000;">box;
</span>-webkit-flex-box:<span style="color: #800080;">1</span><span style="color: #000000;">;
box</span>-<span style="color: #000000;">pack:center;
box</span>-align:center;</pre>
</div>
<p>&nbsp;现在介绍一些移动web特别样式处理，也是从别的地方学习到的，记录一下，</p>
<p>一、在移动web页面上渲染图片，为了避免图片产生模糊，图片的宽高应该使用物理像素单位去渲染，即是100*100，应该使用100dp＊100dp，如：</p>
<p>width:(w_value/dpr)px; //50px</p>
<p>height:(h_value/dpr)px; //50px</p>
<p>二、一像素边框</p>
<p>原因：在retina屏幕下，1px＝2dp;(iphone5)，解决办法（给其加个伪类）：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">div:before{
    position:absolute;
    top:</span>-<span style="color: #000000;">1px;
    left:</span><span style="color: #800080;">0</span><span style="color: #000000;">;
    content:</span><span style="color: #800000;">''</span><span style="color: #000000;">;
    width:</span><span style="color: #800080;">100</span>%<span style="color: #000000;">;
    height:1px;
    border:1px #eee solid;
    </span>-webkit-transform:scaleY(<span style="color: #800080;">0.5</span><span style="color: #000000;">);
}</span></pre>
</div>
<p>三、相对单位rem</p>
<p>em：是根据父节点的font－size为相对单位<br />rem：是根据html的font－size为相对单位<br />rem＝screen.width/20;</p>
<p>四、单行文本溢出</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">.inaline{
    overflow:hidden;
    text</span>-<span style="color: #000000;">overflow:ellipsis;
    white</span>-<span style="color: #000000;">space:nowrap;
}</span></pre>
</div>
<p>五、多行文本溢出</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">.intwoline{ 
    display:</span>-webkit-box!<span style="color: #000000;">important;
    overflow:hidden;
    text</span>-<span style="color: #000000;">overflow:ellipsis;
    word</span>-<span style="color: #0000ff;">break</span>:<span style="color: #0000ff;">break</span>-<span style="color: #000000;">all;
    </span>-webkit-box-<span style="color: #000000;">orient:vertical;
    </span>-webkit-line-clamp:<span style="color: #800080;">2</span><span style="color: #000000;">; //关键属性，限制行数
}</span></pre>
</div>
<p>&nbsp;六、制作小三角形</p>
<div class="cnblogs_code">
<pre> .sanjiao:before{  <br />   content: <span style="color: #800000;">"</span> <span style="color: #800000;">"</span><span style="color: #000000;">;
   height: </span><span style="color: #800080;">0</span><span style="color: #000000;">;
   width: </span><span style="color: #800080;">0</span><span style="color: #000000;">;
   position: absolute;
   pointer</span>-<span style="color: #000000;">events: none;
   display:inline;
   border:8px solid; 
   border</span>-color:  transparent transparent rgb(<span style="color: #800080;">77</span>,<span style="color: #800080;">74</span>,<span style="color: #800080;">69</span>) transparent;<br />}</pre>
</div>
<div align="left">七、去掉手持设备点击时出现的透明层 （一般会在头部做格式化）</div>
<div align="left">
<div class="cnblogs_code">
<pre><span style="color: #000000;">a,button,input{
        </span>-webkit-tap-highlight-color: rgba(<span style="color: #800080;">0</span>,<span style="color: #800080;">0</span>,<span style="color: #800080;">0</span>,<span style="color: #800080;">0</span><span style="color: #000000;">);
        </span>-webkit-tap-highlight-color: transparent; <span style="color: #008000;">/*</span><span style="color: #008000;"> For some Androids </span><span style="color: #008000;">*/</span><span style="color: #000000;">
}</span></pre>
</div>
<p><em id="__mceDel" style="line-height: 1.5;">接下来摘录一些关于移动web的&lt;meta&gt;标签，</em></p>
</div>
<p>&lt;meta content="yes" name="apple-mobile-web-app-capable" /&gt;</p>
<p>iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；</p>
<p>&nbsp;</p>
<p>&lt;meta content="black" name="apple-mobile-web-app-status-bar-style" /&gt;</p>
<p>iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；</p>
<p>&nbsp;</p>
<p>&lt;meta content="telephone=no" name="format-detection" /&gt;</p>
<p>告诉设备忽略将页面中的数字识别为电话号码；</p>
<p>&nbsp;</p>
<p>&lt;meta content="email=no" name="format-detection" /&gt;</p>
<p>Android中禁止自动识别页面中的邮件地址，iOS中不会自动识别邮件地址</p>
<p>同时，这些移动web的技巧，可以用于制作webAPP、混合APP上面的一些H5应用上！比如说领投羊（公司APP）：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201511/720690-20151119165317202-235403118.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>canvas绘图基础</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/10/28/4906961.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 28 Oct 2015 07:45:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/10/28/4906961.html</guid><description><![CDATA[<p>&lt;canvas&gt;元素是HTML5中的绘图元素，通过定义一个画布区域，然后使用javascript动态地在这个区域里面绘制图形，对于2D和3D图形都可以绘制，我们将其分成2D上下文和WebGL两大块内容来一起来学习，但是WebGL觉得比较少用到，而且难，所以不讲了！<br />一、了解canvas<br />&lt;canvas  id=&lsquo;draw&rsquo; width=&lsquo;200&rsquo; height=&lsquo;200' &gt; nothing &lt;/canvas&gt;，这是便是一个基本canvas元素的写法了，但是我们必须通过javascript来动态获得，那么需要这样：</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('ea4ad5dd-d0fb-46d1-8f93-d11c8dc77be8')"><img id="code_img_closed_ea4ad5dd-d0fb-46d1-8f93-d11c8dc77be8" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_ea4ad5dd-d0fb-46d1-8f93-d11c8dc77be8" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('ea4ad5dd-d0fb-46d1-8f93-d11c8dc77be8',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_ea4ad5dd-d0fb-46d1-8f93-d11c8dc77be8" class="cnblogs_code_hide">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">var</span> draw =<span style="color: #000000;"> document.getElementById(&lsquo;draw&rsquo;);
</span><span style="color: #008080;"> 2</span> <span style="color: #008000;">//</span><span style="color: #008000;">确定是否支持canvas</span>
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">if</span><span style="color: #000000;">(draw.getContext){
</span><span style="color: #008080;"> 4</span> <span style="color: #008000;">//</span><span style="color: #008000;">这样就取得绘图上下文对象的引用，画图便可以开始了！</span>
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">var</span> context =<span style="color: #000000;"> draw.getContext(&lsquo;2d&rsquo;);
</span><span style="color: #008080;"> 6</span> <span style="color: #008000;">//</span><span style="color: #008000;">取得图像的数据uri，显示图像</span>
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">var</span> imageuri = draw.toDataURL(&lsquo;image/<span style="color: #000000;">png&rsquo;);
</span><span style="color: #008080;"> 8</span> <span style="color: #0000ff;">var</span> img =<span style="color: #000000;"> document.createElement(&lsquo;img&rsquo;);
</span><span style="color: #008080;"> 9</span> img.src=<span style="color: #000000;"> imageuri;
</span><span style="color: #008080;">10</span> <span style="color: #000000;">document.body.appendChild(img);
</span><span style="color: #008080;">11</span> }</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>二、2D上下文<br />对于2D上下文的坐标是开始于canvas元素的左上角的，原点的坐标为(0，0)，x轴越往右越大，y轴越往下越大就算但画布的原坐标发生translate也不例外，如下图：</p>
<p><strong>填充</strong>（使用指定样式［颜色、渐变、图像、模式等］填充图形）和<strong>描边</strong>（图形的边缘画线）分别为fillStyle和strokeStyle，需要注意一点，fillStyle和strokeStyle会被延用至重新设置这两个值！</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('b87fd0b3-e36c-432d-8ffb-3b709b8e142e')"><img id="code_img_closed_b87fd0b3-e36c-432d-8ffb-3b709b8e142e" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_b87fd0b3-e36c-432d-8ffb-3b709b8e142e" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('b87fd0b3-e36c-432d-8ffb-3b709b8e142e',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_b87fd0b3-e36c-432d-8ffb-3b709b8e142e" class="cnblogs_code_hide">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> draw =<span style="color: #000000;"> document.getElementById(&lsquo;draw&rsquo;);
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">if</span><span style="color: #000000;">(draw.getContext){
</span><span style="color: #008080;">3</span> <span style="color: #0000ff;">var</span> context =<span style="color: #000000;"> draw.getContext(&lsquo;2d&rsquo;);
</span><span style="color: #008080;">4</span> context.strokeStyle = &ldquo;#<span style="color: #800080;">000</span><span style="color: #000000;">&rdquo;;
</span><span style="color: #008080;">5</span> context.fillStyle =<span style="color: #000000;"> &lsquo;#0000ff&rsquo;;
</span><span style="color: #008080;">6</span> }</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>绘制矩形</strong>，有以下方法fillRect()、strokeRect()、clearRect()的方法，都是一样的，传入四个参数，矩形的x坐标、矩形的y坐标、矩形的宽度width、矩形的高度height，</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('4b8c201a-f350-4d85-8bec-9c9370dc5d07')"><img id="code_img_closed_4b8c201a-f350-4d85-8bec-9c9370dc5d07" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_4b8c201a-f350-4d85-8bec-9c9370dc5d07" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('4b8c201a-f350-4d85-8bec-9c9370dc5d07',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_4b8c201a-f350-4d85-8bec-9c9370dc5d07" class="cnblogs_code_hide">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">var</span> draw =<span style="color: #000000;"> document.getElementById(&lsquo;draw&rsquo;);
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">if</span><span style="color: #000000;">(draw.getContext){
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> <span style="color: #0000ff;">var</span> context =<span style="color: #000000;"> draw.getContext(&lsquo;2d&rsquo;);
</span><span style="color: #008080;"> 5</span> <span style="color: #008000;">//</span><span style="color: #008000;">绘制黑色矩形</span>
<span style="color: #008080;"> 6</span> context.strokeStyle = &ldquo;#<span style="color: #800080;">000</span><span style="color: #000000;">&rdquo;;
</span><span style="color: #008080;"> 7</span> context.strokeRect(<span style="color: #800080;">10</span>,<span style="color: #800080;">10</span>,<span style="color: #800080;">50</span>,<span style="color: #800080;">50</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span> <span style="color: #008000;">//</span><span style="color: #008000;">绘制黑色矩形</span>
<span style="color: #008080;"> 9</span> context.strokeStyle = &ldquo;#<span style="color: #800080;">000</span><span style="color: #000000;">&rdquo;;
</span><span style="color: #008080;">10</span> context.fillRect(<span style="color: #800080;">30</span>,<span style="color: #800080;">30</span>,<span style="color: #800080;">50</span>,<span style="color: #800080;">50</span><span style="color: #000000;">);
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> <span style="color: #008000;">//</span><span style="color: #008000;">在两个填充矩形重叠的地方清除一个小矩形</span>
<span style="color: #008080;">13</span> context.clearRect(<span style="color: #800080;">40</span>,<span style="color: #800080;">40</span>,<span style="color: #800080;">10</span>,<span style="color: #800080;">10</span><span style="color: #000000;">);
</span><span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> <span style="color: #008000;">//</span><span style="color: #008000;">绘制描边矩形</span>
<span style="color: #008080;">16</span> context.fillStyle =<span style="color: #000000;"> &lsquo;#0000ff&rsquo;;
</span><span style="color: #008080;">17</span> context.fillRect(<span style="color: #800080;">30</span>,<span style="color: #800080;">30</span>,<span style="color: #800080;">50</span>,<span style="color: #800080;">50</span><span style="color: #000000;">);
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> }</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>绘制路径</strong>，2d上下文有很多在画布上绘制路径的方法，可以创造出复杂的形状和线条。要绘制路径，首先需要调用beginPath()方法，<br />arc(x,y,radius,startAngle,endAngle,counterclockwise)，意思是以(x,y)为圆心，radius为半径，counterclockwise的值为false的时候顺时针画圆（或圆弧），开始角度startAngle，结束角度endAngle，用弧度表示；<br />arcTo(x1,y1,x,y,radius)，意思是从(x1,y1)到(x,y)，以radius为半径，画一条弧线；<br />lineTo(x,y)，意思是从上一个点画一条直线至(x,y)；<br />moveTo(x,y)，意思是将绘图的游标移至(x,y)，也就是从此点开始绘制；<br />rect(x,y,width,height)，这是画个矩形，就不多说了；<br />bezierCurveTo(x1,y1,x2,y2,x,y)，意思从上一个点开始，是以(x1,y1)、(x2,y2)为控制点，(x,y)为终点的三次贝尔塞曲线；</p>
<p>quadraticCurveTo(cx,cy,x,y)，意思是从上一个点开始，是以(cx,cy)为控制点，(x,y)为终点的二次贝尔塞曲线。</p>
<p>那么接下来，创建路径之后，我们可以又怎么这几种选择：</p>
<p>使用closePath()，关闭路径，绘制一条连接至起点的线条；</p>
<p>使用fill()、stroke()，对路径进行填充或是描边，前提是设置了（fillStyle、strokeStyle）</p>
<p>使用clip()，创建一个剪切区域</p>
<p>如果我们想在路径关闭之前，判断某个点是否在路径上，可以这样来做</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">if</span>(context.isPointInPath(<span style="color: #800080;">100</span>,<span style="color: #800080;">100</span><span style="color: #000000;">)){ 
    alert(</span><span style="color: #800000;">"</span><span style="color: #800000;">点击这里<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>，就可以跳转，快来看看阿！</span><span style="color: #800000;">"</span><span style="color: #000000;">);      
}</span></pre>
</div>
<p><strong>&nbsp;绘制文本</strong>，有图，就有文本，主要有两个方法，fillText()和strokeText(),传入四个参数，str（字符串）、x坐标、y坐标、最大像素宽度(超过此值，将会自动收缩)，当然这两个方法是以以下三个属性（font、textAlign、textBaseline）为基础的，当然要注意，这两个方法也是使用fillStyle和strokeStyle来做填充和描边滴，之后也有demo更新到github上面去!</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('77343626-a58d-460b-a72c-5e91c2d707f1')"><img id="code_img_closed_77343626-a58d-460b-a72c-5e91c2d707f1" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_77343626-a58d-460b-a72c-5e91c2d707f1" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('77343626-a58d-460b-a72c-5e91c2d707f1',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_77343626-a58d-460b-a72c-5e91c2d707f1" class="cnblogs_code_hide">
<pre>context.font=<span style="color: #800000;">"</span><span style="color: #800000;">blod 14px Arial</span><span style="color: #800000;">"</span><span style="color: #000000;">;
context.textAlign </span>= <span style="color: #800000;">"</span><span style="color: #800000;">center</span><span style="color: #800000;">"</span>;<span style="color: #008000;">//</span><span style="color: #008000;">"start" "end" "left" "right"</span>
context.textBaseline = <span style="color: #800000;">"</span><span style="color: #800000;">middle</span><span style="color: #800000;">"</span>;<span style="color: #008000;">//</span><span style="color: #008000;">"top" "bottom" "hanging" "alphabetic"  "ideographic"</span>
<span style="color: #000000;">
context.fillText(</span><span style="color: #800000;">"</span><span style="color: #800000;">工资低，被迫下海，还望大家多多支持，多多棒槌，宣传一下下</span><span style="color: #800000;">"</span>,<span style="color: #800080;">100</span>,<span style="color: #800080;">20</span>);</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>有时候，我们需要将我们的文本控制在某一个区域中的时候，那么会用到measureText()方法，传入一个参数（我们需要显示的字符串），得到的对象里面有个width属性，返回最佳的width，假如说我们现在想在width=150px的画布上显示合适的字体的话，可以这样</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('54efb591-52df-499e-9de6-62699884ea3c')"><img id="code_img_closed_54efb591-52df-499e-9de6-62699884ea3c" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_54efb591-52df-499e-9de6-62699884ea3c" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('54efb591-52df-499e-9de6-62699884ea3c',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_54efb591-52df-499e-9de6-62699884ea3c" class="cnblogs_code_hide">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> font_size =<span style="color: #000000;"> 40px;
</span><span style="color: #008080;">2</span> context.font = font_size+<span style="color: #800000;">''</span>px arial<span style="color: #800000;">"</span><span style="color: #800000;">;</span>
<span style="color: #008080;">3</span> <span style="color: #0000ff;">while</span>(context.measureText(<span style="color: #800000;">"</span><span style="color: #800000;">工资低，被迫下海，还望大家多多支持，多多棒槌，宣传一下下</span><span style="color: #800000;">"</span>)&gt;<span style="color: #000000;">600px){
</span><span style="color: #008080;">4</span>       font_size--<span style="color: #000000;">;
</span><span style="color: #008080;">5</span>       context.font = font_size+<span style="color: #800000;">''</span>px arial<span style="color: #800000;">"</span><span style="color: #800000;">;         </span>
<span style="color: #008080;">6</span> <span style="color: #000000;">}
</span><span style="color: #008080;">7</span> context.fillText(<span style="color: #800000;">"</span><span style="color: #800000;">工资低，被迫下海，还望大家多多支持，多多棒槌，宣传一下下</span><span style="color: #800000;">"</span>,<span style="color: #800080;">10</span>,<span style="color: #800080;">10</span>);</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>绘制变换</strong>，即是如css3中transform变换，创建绘制上下文时，会以默认值初始化变换矩阵，在默认的变换矩阵中下，所有处理是直接绘制。有如下这些变化：</p>
<p>rotate(angle);//angle是弧度</p>
<p>scale(x1,y1);//放大缩小，在x方向乘以x1，在y方向乘以y1</p>
<p>translate(x,y);//将坐标原点移动到(x,y)，好了(x,y)它就变成原点了</p>
<p>transform(m1_1,m1_2,m2_1,m2_2,dx,dy);//直接改变矩阵</p>
<p>setTransform(m1_1,m1_2,m2_1,m2_2,dx,dy);//设置矩阵，对于矩阵详解：<a href="http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-矩阵/" target="_blank">http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-矩阵/</a></p>
<p>排列方式：<img src="http://images2015.cnblogs.com/blog/720690/201510/720690-20151027182139216-1775561950.png" alt="" />，其对应的排列方式是这样的，与transform: matrix(a,b,c,d,e,f);还是不一样滴！</p>
<p><strong>绘制图像</strong>，把一副图像绘制到画布上，，可以使用drawImage()方法，可以这样</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('5ee55c50-a929-44c9-a7fa-d7cbdd233b1b')"><img id="code_img_closed_5ee55c50-a929-44c9-a7fa-d7cbdd233b1b" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_5ee55c50-a929-44c9-a7fa-d7cbdd233b1b" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('5ee55c50-a929-44c9-a7fa-d7cbdd233b1b',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_5ee55c50-a929-44c9-a7fa-d7cbdd233b1b" class="cnblogs_code_hide">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> image = document.images[<span style="color: #800080;">0</span>]; <span style="color: #008000;">//</span><span style="color: #008000;">获取文档中第一张图像</span>
<span style="color: #008080;">2</span> context.drawImge(image,x,y,width,height,rx,ry,rwidth,rheight);<span style="color: #008000;">//</span><span style="color: #008000;">各个参数分别是：image图像对象，源图像的x坐标、源图像的y坐标，源图像的宽度，源图像的高度，目标图像的x坐标，目标图像的y坐标，目标图像的宽度，目标图像的高度，一般只需要前五个参数，就可以画出一个图像出来了！
</span><span style="color: #008080;">3</span> 
<span style="color: #008080;">4</span> <span style="color: #008000;">//</span><span style="color: #008000;">可以怎么理解，如context.drawImage(image,0,10,50,50,0,100,40,60);原始图像是以(0,10)为起点，高宽都为50px，但我们想要它实际显示在(0,100),宽40，高60，感觉实际上并没什么用</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>&nbsp;阴影，</strong>有以下这几个属性:</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('e8be5e33-a5dc-4dcd-b4ec-e56697d2fdea')"><img id="code_img_closed_e8be5e33-a5dc-4dcd-b4ec-e56697d2fdea" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_e8be5e33-a5dc-4dcd-b4ec-e56697d2fdea" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('e8be5e33-a5dc-4dcd-b4ec-e56697d2fdea',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_e8be5e33-a5dc-4dcd-b4ec-e56697d2fdea" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">var</span> context = drawing.getContext(<span style="color: #800000;">'</span><span style="color: #800000;">2d</span><span style="color: #800000;">'</span><span style="color: #000000;">);
context.shadowColor </span>= <span style="color: #800000;">"</span><span style="color: #800000;">#000</span><span style="color: #800000;">"</span>;<span style="color: #008000;">//</span><span style="color: #008000;">阴影颜色</span>
context.shadowOffsetX = <span style="color: #800080;">5</span>;<span style="color: #008000;">//</span><span style="color: #008000;">阴影x的偏移量</span>
context.shadowOffsetX = <span style="color: #800080;">5</span>;<span style="color: #008000;">//</span><span style="color: #008000;">阴影y的偏移量</span>
context.shadowBlur = <span style="color: #800080;">4</span>;<span style="color: #008000;">//</span><span style="color: #008000;">阴影的模糊距离</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>&nbsp;渐变</strong>，分为线性渐变和径祥渐变，分别是createLinearGradient()和createRadialGradient()，使用如下：</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('5381a026-a0a3-4503-995f-b43b2aa0789d')"><img id="code_img_closed_5381a026-a0a3-4503-995f-b43b2aa0789d" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_5381a026-a0a3-4503-995f-b43b2aa0789d" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('5381a026-a0a3-4503-995f-b43b2aa0789d',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_5381a026-a0a3-4503-995f-b43b2aa0789d" class="cnblogs_code_hide">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">var</span> gradient = context.createLinearGradient(<span style="color: #800080;">30</span>,<span style="color: #800080;">30</span>,<span style="color: #800080;">70</span>,<span style="color: #800080;">70</span>);<span style="color: #008000;">//</span><span style="color: #008000;">创建一个线性渐变区域,矩形区域，要使渐变覆盖整个矩形，需要有时还需要匹配一下坐标</span>
<span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> gradient.addColorStop(<span style="color: #800080;">0</span>,<span style="color: #800000;">"</span><span style="color: #800000;">white</span><span style="color: #800000;">"</span>); <span style="color: #008000;">//</span><span style="color: #008000;">创建色标的开始位置信息</span>
<span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> gradient.addColorStop(<span style="color: #800080;">1</span>,<span style="color: #800000;">"</span><span style="color: #800000;">black</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">创建色标的结束位置信息</span>
<span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> context.fillStyle=<span style="color: #000000;"> gradient;
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> conetxt.fillRect(<span style="color: #800080;">30</span>,<span style="color: #800080;">30</span>,<span style="color: #800080;">40</span>,<span style="color: #800080;">40</span><span style="color: #000000;">);
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span> <span style="color: #0000ff;">var</span> gradient = context.createRadialGradient(<span style="color: #800080;">50</span>,<span style="color: #800080;">50</span>,<span style="color: #800080;">10</span>,<span style="color: #800080;">50</span>,<span style="color: #800080;">50</span>,<span style="color: #800080;">30</span>);<span style="color: #008000;">//</span><span style="color: #008000;">创建一个径向渐变区域，这里是由两个同心圆组成的，(50,50)为圆的中心点，一个半径为10，一个半径为30，便可以向外扩散，形成径向渐变了</span>
<span style="color: #008080;">14</span> 
<span style="color: #008080;">15</span> gradient.addColorStop(<span style="color: #800080;">0</span>,<span style="color: #800000;">"</span><span style="color: #800000;">white</span><span style="color: #800000;">"</span>); <span style="color: #008000;">//</span><span style="color: #008000;">创建色标的开始位置信息</span>
<span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span> gradient.addColorStop(<span style="color: #800080;">1</span>,<span style="color: #800000;">"</span><span style="color: #800000;">black</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">创建色标的结束位置信息</span>
<span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> context.fillStyle=<span style="color: #000000;"> gradient;
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span> conetxt.fillRect(<span style="color: #800080;">30</span>,<span style="color: #800080;">30</span>,<span style="color: #800080;">40</span>,<span style="color: #800080;">40</span>);</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>&nbsp;模式</strong>，意思就是重复的图像来填充画布了，也可以叫做纹理填充，一般使用的方法createPattern，使用如下：</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('5957ed76-951d-4a03-b56b-42f4bd10bd91')"><img id="code_img_closed_5957ed76-951d-4a03-b56b-42f4bd10bd91" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_5957ed76-951d-4a03-b56b-42f4bd10bd91" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('5957ed76-951d-4a03-b56b-42f4bd10bd91',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_5957ed76-951d-4a03-b56b-42f4bd10bd91" class="cnblogs_code_hide">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">var</span> image = document.images[<span style="color: #800080;">0</span><span style="color: #000000;">];
</span><span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> <span style="color: #0000ff;">var</span> pattern= context.createPattern(image,<span style="color: #800000;">'</span><span style="color: #800000;">repeat</span><span style="color: #800000;">'</span>);<span style="color: #008000;">//</span><span style="color: #008000;">对应有repeat、repeat-x、repeat-y、no-repeat</span>
<span style="color: #008080;">4</span> 
<span style="color: #008080;">5</span> context.fillStyle =<span style="color: #000000;"> pattern;
</span><span style="color: #008080;">6</span> 
<span style="color: #008080;">7</span> conetext.fillRect(<span style="color: #800080;">10</span>,<span style="color: #800080;">10</span>,<span style="color: #800080;">150</span>,<span style="color: #800080;">150</span>);</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>对于canvas绘图的基础就差不多怎么多了，以后还需努力学习，将其用在实际项目上，而对于webGL这种3d上下文就暂时不去学习，这几天看得晕晕的，感觉目前对自己也没什么用处！</p>
<p>&nbsp;</p>]]></description></item><item><title>如何自定义滚动条？</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/10/20/4894846.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 20 Oct 2015 08:12:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/10/20/4894846.html</guid><description><![CDATA[<p>滚动条的自定义化，往往在做移动web的时候，能为我们的项目增添不少风采，而且通过为其添加-webkit-overflow-scrolling : touch; &nbsp;的css属性，使其有着如同ios系统浏览器中bounce的效果，这里的话，提供一个仿ios风格自定义滚动条的demo，代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>自定义滚动条<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">meta </span><span style="color: #ff0000;">charset</span><span style="color: #0000ff;">="utf8"</span><span style="color: #0000ff;">/&gt;</span>
<span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> <span style="background-color: #f5f5f5; color: #800000;">            #scrollbar</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
<span style="color: #008080;"> 7</span> <span style="background-color: #f5f5f5; color: #ff0000;">                width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">450px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;"> 8</span> <span style="background-color: #f5f5f5; color: #ff0000;">                height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">300px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;"> 9</span> <span style="background-color: #f5f5f5; color: #ff0000;">                margin</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">100px auto</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">10</span> <span style="background-color: #f5f5f5; color: #ff0000;">                border</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 1px #eee solid</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">11</span> <span style="background-color: #f5f5f5; color: #ff0000;">                background-color</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">#eee</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">12</span> <span style="background-color: #f5f5f5; color: #ff0000;">                display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">inline-block</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">13</span> <span style="background-color: #f5f5f5; color: #ff0000;">                overflow</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> auto</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">14</span> <span style="background-color: #f5f5f5; color: #ff0000;">                -webkit-overflow-scrolling </span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> touch</span><span style="background-color: #f5f5f5; color: #000000;">;</span>  
<span style="color: #008080;">15</span>             <span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #008080;">16</span>             <span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">凹槽宽度</span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
<span style="color: #008080;">17</span> <span style="background-color: #f5f5f5; color: #800000;">            #scrollbar::-webkit-scrollbar</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
<span style="color: #008080;">18</span> <span style="background-color: #f5f5f5; color: #ff0000;">                width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">8px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">19</span> <span style="background-color: #f5f5f5; color: #ff0000;">                height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">8px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">20</span>             <span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #008080;">21</span>             <span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">拖动条</span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
<span style="color: #008080;">22</span> <span style="background-color: #f5f5f5; color: #800000;">            #scrollbar::-webkit-scrollbar-thumb</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
<span style="color: #008080;">23</span> <span style="background-color: #f5f5f5; color: #ff0000;">                background-color</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">#ccc</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">24</span> <span style="background-color: #f5f5f5; color: #ff0000;">                border-radius</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">6px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">25</span>             <span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #008080;">26</span>             <span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">背景槽</span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
<span style="color: #008080;">27</span> <span style="background-color: #f5f5f5; color: #800000;">            #scrollbar::-webkit-scrollbar-track</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
<span style="color: #008080;">28</span> <span style="background-color: #f5f5f5; color: #ff0000;">                background-color</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">#ddd</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">29</span> <span style="background-color: #f5f5f5; color: #ff0000;">                border-radius</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">6px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">30</span>             <span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #008080;">31</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">32</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">33</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">34</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="scrollbar"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">35</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">code</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">36</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">pre</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">37</span> <span style="color: #000000;">#scrollbar{
</span><span style="color: #008080;">38</span> <span style="color: #000000;">width:200px;
</span><span style="color: #008080;">39</span> <span style="color: #000000;">height:200px;
</span><span style="color: #008080;">40</span> <span style="color: #000000;">margin:100px auto;
</span><span style="color: #008080;">41</span> <span style="color: #000000;">border: 1px #eee solid;
</span><span style="color: #008080;">42</span> <span style="color: #000000;">background-color:#eee;
</span><span style="color: #008080;">43</span> <span style="color: #000000;">display:inline-block;
</span><span style="color: #008080;">44</span> <span style="color: #000000;">}
</span><span style="color: #008080;">45</span> <span style="color: #000000;">/*凹槽宽度*/
</span><span style="color: #008080;">46</span> <span style="color: #000000;">#scrollbar::-webkit-scrollbar{
</span><span style="color: #008080;">47</span> <span style="color: #000000;">width:8px;
</span><span style="color: #008080;">48</span> <span style="color: #000000;">height:8px;
</span><span style="color: #008080;">49</span> <span style="color: #000000;">}
</span><span style="color: #008080;">50</span> <span style="color: #000000;">/*拖动条*/
</span><span style="color: #008080;">51</span> <span style="color: #000000;">#scrollbar::-webkit-scrollbar-thumb{
</span><span style="color: #008080;">52</span> <span style="color: #000000;">background-color:ragb(0,0,0,0.3);
</span><span style="color: #008080;">53</span> <span style="color: #000000;">border-radius:6px;
</span><span style="color: #008080;">54</span> <span style="color: #000000;">}
</span><span style="color: #008080;">55</span> <span style="color: #000000;">/*背景槽*/
</span><span style="color: #008080;">56</span> <span style="color: #000000;">#scrollbar::-webkit-scrollbar-track{
</span><span style="color: #008080;">57</span> <span style="color: #000000;">background-color:#ddd;
</span><span style="color: #008080;">58</span> <span style="color: #000000;">border-radius:6px;
</span><span style="color: #008080;">59</span> <span style="color: #000000;">}
</span><span style="color: #008080;">60</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">pre</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">61</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">code</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">62</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">img </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">="http://p2.sinaimg.cn/1134235113/180/61721259911787"</span><span style="color: #ff0000;"> alt</span><span style="color: #0000ff;">=""</span><span style="color: #0000ff;">&gt;</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">63</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">img </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">="http://p2.sinaimg.cn/1134235113/180/61721259911787"</span><span style="color: #ff0000;"> alt</span><span style="color: #0000ff;">=""</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">64</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">65</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">66</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>效果如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201510/720690-20151020145334380-990935963.png" alt="" /></p>
<p>主要使用的是::-webkit-scrollbar（凹槽），::-webkit-scrollbar-thumb（拖动块），::-webkit-scrollbar-track（背景槽）的属性来定义滚动条，good，加个链接，忽略掉它，哈哈，<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>！</p>]]></description></item><item><title>学习笔记-AngularJs（十）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/10/16/4858303.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Fri, 16 Oct 2015 03:56:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/10/16/4858303.html</guid><description><![CDATA[<p>前面一直在说自定义指令，但是却一直没有一次系统地去了解，现在需要我们一起来学习如何去使用自定义指令，去丰富html标签、属性，实现多元化、多功能的标签（或是属性）。辣么，啥是指令？要了解指令，首先需要了解AngularJs的HTML编译器，简单地说让浏览器认识你自定义指令或是Angular的指令集，将其行为运用到DOM上（视图），分两个过程编译和链接，编译阶段是遍历DOM并且收集所有的相关指令，生成一个链接函数；链接阶段是给通过编译阶段调用所说的链接函数来将模板与作用域链接起来，绑定一个作用域，生成一个动态的视图。作用域模型的任何改变都会反映到视图上，并且视图上的任何用户操作也都会反映到作用域模型。</p>
<p>那么说到底，由某个属性、元素名称、css类名出现而导致的行为，或者说是DOM的变化，能让你以一种声明式的方法来扩展HTML表示能力，这就是指令！</p>
<p>官网（忽略，<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>）也写了一个比较详细的指令demo（具体属性分析如下）:</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> myModule =<span style="color: #000000;"> angular.module(...);

myModule.directive(</span><span style="color: #800000;">'</span><span style="color: #800000;">directiveName</span><span style="color: #800000;">'</span>, function factory(injectables) { <span style="color: #008000;">//</span><span style="color: #008000;">工厂函数里面injectables是何意呢？望知道的人告知</span>
    <span style="color: #0000ff;">var</span> directiveDefinitionObject =<span style="color: #000000;"> {<br />
        priority: </span><span style="color: #800080;">0</span>, <span style="color: #008000;">//</span><span style="color: #008000;">优先级priority,Dom里面会有很多指令，定义优先级，可以使此指令优先执行 <br /></span>
　　　 　terminal：<span style="color: #0000ff;">false</span>, <span style="color: #008000;">//</span><span style="color: #008000;">如果被设置为true，那么该指令就会在同一个DOM的指令集和中最后被执行<br /></span>
        template: <span style="color: #800000;">'</span><span style="color: #800000;">&lt;div&gt;&lt;/div&gt;</span><span style="color: #800000;">'</span>, <span style="color: #008000;">//</span><span style="color: #008000;"> or </span><span style="color: #008000;">//</span><span style="color: #008000;"> function(tElement, tAttrs) { ... },
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> templateUrl: 'directive.html', </span><span style="color: #008000;">//</span><span style="color: #008000;"> or </span><span style="color: #008000;">//</span><span style="color: #008000;"> function(tElement, tAttrs) { ... },  </span><span style="color: #008000;">//</span><span style="color: #008000;">template或templateUrl顾名思义就是模板文件，可以编写，也可以url，也可以是function(tElement,tAttrs){ return ... ;}<br /><br /></span>
        replace: <span style="color: #0000ff;">false</span>, <span style="color: #008000;">//</span><span style="color: #008000;">是否替换现在的元素<br /><br /></span>
        transclude: <span style="color: #0000ff;">false</span>, <span style="color: #008000;">//重要属性之一，</span><span style="color: #008000;">配合ng-transclude使用，为true时，可以将原元素的内容（html、其他指令）提取到带有指令ngTransclude的元素内，下面有例子说明！（注：<strong>指令的内部可以访问外部指令的作用域，并且模板也可以访问外部的作用域对象</strong>）<br /><br /></span>
        restrict: <span style="color: #800000;">'</span><span style="color: #800000;">A</span><span style="color: #800000;">'</span>, <span style="color: #008000;">//</span><span style="color: #008000;">以哪种形式声明指令行为的格式，有AECM，分别是属性&lt;div my-directive="exp"&gt; &lt;/div&gt; 、元素*&lt;my-directive&gt;&lt;/my-directive&gt; 、 class*&lt;div class="my-directive: exp;"&gt;&lt;/div&gt; 、注释&lt;!-- directive: my-directive exp --&gt;<br /><br /></span>
        templateNamespace: <span style="color: #800000;">'</span><span style="color: #800000;">html</span><span style="color: #800000;">'</span>, <span style="color: #008000;">//</span><span style="color: #008000;">模板的命名空间,有'html'、'svg'等，默认为'html'<br /><br /></span>
        scope: <span style="color: #0000ff;">false</span>, <span style="color: #008000;">//</span><span style="color: #008000;">是否创造一个新的作用域（针对指令）<br />　　　　　/*scope是最难理解的一个属性*/<br /><br /></span>
<span style="color: #000000;">        controller: function($scope, $element, $attrs, $transclude, otherInjectables) {...
        }, </span><span style="color: #008000;">//</span><span style="color: #008000;">控制器的构造对象，预编译阶段执行，$scope当前作用域，$element当前元素，$attrs当前元素的属性集合，并且它是共享的，其他指令可以通过它的名字得到（参考依赖属性（通过require属性引入）。这就使得指令间可以互相交流来扩大自己的能力。当然也可以是控制　　　　　　　 器名字（那么此控制器需要在应用声明好，这样便可以通过注入$attrs、$element操纵指令对应模板的dom），$transclude，用来操作嵌入作用域对应的dom，也就是被提取到ngTransclude的元素里面的dom了，下面有例子说明！<br /><br /></span>
        controllerAs: <span style="color: #800000;">'</span><span style="color: #800000;">stringAlias</span><span style="color: #800000;">'</span>, <span style="color: #008000;">//</span><span style="color: #008000;">定义控制器的别名<br /><br /></span>
        require: <span style="color: #800000;">'</span><span style="color: #800000;">siblingDirectiveName</span><span style="color: #800000;">'</span>, <span style="color: #008000;">//</span><span style="color: #008000;"> or </span><span style="color: #008000;">//</span><span style="color: #008000;"> ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'], </span><span style="color: #008000;">//</span><span style="color: #008000;"> 请求将另一个控制器作为参数传入到当前链接函数。 这个请求需要传递被请求指令的控制器的名字。之前有例子关于表单自定义　　　　　　　　　　　　　　　　　　　　　　　　验证有使用到，<a href="http://www.cnblogs.com/wuxiaobin/p/4838577.html" target="_blank">学习笔记-AngularJs(八)</a><br /><br /></span>
        compile: function compile(tElement, tAttrs, transclude) { <span style="color: #008000;">//</span><span style="color: #008000;">tElement指令所在的元素,tAttrs指令所在元素属性集合</span>
            <span style="color: #0000ff;">return</span><span style="color: #000000;"> {
                pre: function preLink(scope, iElement, iAttrs, controller) {...
                },
                post: function postLink(scope, iElement, iAttrs, controller) {...
                }
            }
            </span><span style="color: #008000;">//</span><span style="color: #008000;"> or
            </span><span style="color: #008000;">//</span><span style="color: #008000;"> return function postLink( ... ) { ... } </span><span style="color: #008000;">//</span><span style="color: #008000;">编译函数是用来处理需要修改模板DOM（执行于放到dom之前的dom操作）的情况的。因为大部分指令都不需要修改模板，所以这个函数也不常用。返回的是函数或是对象，返回函数时等效于link链接函数</span>
<span style="color: #000000;">        },
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> or
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> link: { </span><span style="color: #008000;">//</span><span style="color: #008000;">链接函数负责注册DOM事件和更新DOM。它是在模板被克隆之后执行的。 它也是大部分指令逻辑代码编写的地方。scope当前作用域，iElement当前元素，iAttrs当前元素的属性集合，controller就是上面require属性的值，于是就可以调用require进来的控制　　　　　　　　　　　　器的属性方法,（包括之前讲的ngModel或是其他指令controller和controllerAs定义的有控制器名的控制器方法）
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> pre: function preLink(scope, iElement, iAttrs, controller) { ... }, </span><span style="color: #008000;">//</span><span style="color: #008000;"> post: function postLink(scope, iElement, iAttrs, controller) { ... } </span><span style="color: #008000;">//</span><span style="color: #008000;"> } </span><span style="color: #008000;">//</span><span style="color: #008000;"> or </span><span style="color: #008000;">//</span><span style="color: #008000;"> link: function postLink( ... ) { ... } </span>
<span style="color: #000000;">    };
    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> directiveDefinitionObject;
});</span></pre>
</div>
<p>&nbsp;compile和link选项是互斥的。如果同时设置了这两个选项，那么会把compile所返回的函数当作链接函数，而link选项本身则会被忽略。</p>
<p>编译函数负责对模板DOM进行转换。链接函数负责将作用域和DOM进行链接。</p>
<p>上面demo有些属性在实际操作上，都是取默认的属性，那么官网将其简化成了这个样子：</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('916960f7-8f05-4665-ba43-86efa67642cd')"><img id="code_img_closed_916960f7-8f05-4665-ba43-86efa67642cd" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_916960f7-8f05-4665-ba43-86efa67642cd" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('916960f7-8f05-4665-ba43-86efa67642cd',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_916960f7-8f05-4665-ba43-86efa67642cd" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">var</span> myModule =<span style="color: #000000;"> angular.module(...);

myModule.directive(</span><span style="color: #800000;">'</span><span style="color: #800000;">directiveName</span><span style="color: #800000;">'</span>, function factory(injectables) { <span style="color: #008000;">//</span><span style="color: #008000;">此处需要注意，在视图引入指令时，采用的是骆峰命名法，所以调用时应该是directive-name</span>
  <span style="color: #0000ff;">var</span> directiveDefinitionObject =<span style="color: #000000;"> {
    link: function postLink(scope, iElement, iAttrs) { ... }
  };
  </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> directiveDefinitionObject;
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> or
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> return function postLink(scope, iElement, iAttrs) { ... }</span>
});</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>到这里还是需要编写些demo，才能起到学习的效果！</p>
<p>在之前的<a href="http://www.cnblogs.com/wuxiaobin/p/4838577.html" target="_blank">学习笔记-AngularJs（八）</a>里面就有一个自定义表单验证的demo，情景是这样的，在input框里面不能写入&ldquo;xiaobin&rdquo;，主要是对ngModel中<em>$setValidity(validationErrorKey, isValid);</em>和<em>$setViewValue(value, trigger);</em>在双向绑定中是如何实现scope-&gt;view、view-&gt;scope之间的那个验证和格式化的学习，没看过的话，可以去看一下，虽然理解得不透彻！下面贴一下主要代码：</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('5689b8a7-d309-4970-894e-c85340b44668')"><img id="code_img_closed_5689b8a7-d309-4970-894e-c85340b44668" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_5689b8a7-d309-4970-894e-c85340b44668" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('5689b8a7-d309-4970-894e-c85340b44668',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_5689b8a7-d309-4970-894e-c85340b44668" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">var</span> custom = angular.module('customControl', ['ngSanitize'<span style="color: #000000;">]);

custom.directive(</span>"noxiaobin", <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
</span><span style="color: #0000ff;">return</span><span style="color: #000000;"> {
restrict: </span>"A"<span style="color: #000000;">,
require: </span>"?ngModel"<span style="color: #000000;">,
link: </span><span style="color: #0000ff;">function</span><span style="color: #000000;"> (scope, element, attrs, ngModel) {
</span><span style="color: #0000ff;">if</span> (!ngModel) <span style="color: #0000ff;">return</span><span style="color: #000000;">;
ngModel.$parsers.push(</span><span style="color: #0000ff;">function</span> (v) { <span style="color: #008000;">//</span><span style="color: #008000;">传说中的验证器</span>

<span style="color: #0000ff;">if</span> (v != "xiaobin"<span style="color: #000000;">) {
ngModel.$setValidity(</span>'noxiaobin', <span style="color: #0000ff;">true</span>); <span style="color: #008000;">//</span><span style="color: #008000;">通过获取从dom过来的值，然后进行验证，使用$setValidity('noxiaobin', true);改变noxiaobin的值，然后反馈会dom</span>
<span style="color: #0000ff;">return</span><span style="color: #000000;"> v;
} </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {
ngModel.$setValidity(</span>'noxiaobin', <span style="color: #0000ff;">false</span><span style="color: #000000;">);
</span><span style="color: #0000ff;">return</span><span style="color: #000000;"> undefined;
}

});
}
}
});</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>在这里，我们另外写一个比较综合的例子，dialog.html可到github下载（github地址：<a href="https://github.com/xiaobin5201314/AngularJS-Learning/tree/master/block-example/指令-13" target="_blank">https://github.com/xiaobin5201314/AngularJS-Learning/tree/master/block-example/指令-13</a>）</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;
&lt;html ng-app=<span style="color: #800000;">'</span><span style="color: #800000;">directiveModule</span><span style="color: #800000;">'</span>&gt;
    &lt;head&gt;
        &lt;meta charset=<span style="color: #800000;">"</span><span style="color: #800000;">utf8</span><span style="color: #800000;">"</span>/&gt;
        &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">../jquery.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
         &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">../angular.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
         &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">../bootstrap.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
         &lt;link rel=<span style="color: #800000;">"</span><span style="color: #800000;">stylesheet</span><span style="color: #800000;">"</span> href=<span style="color: #800000;">"</span><span style="color: #800000;">../bootstrap.min.css</span><span style="color: #800000;">"</span>&gt;

        &lt;script&gt;
            <span style="color: #0000ff;">var</span> directive = angular.module(<span style="color: #800000;">'</span><span style="color: #800000;">directiveModule</span><span style="color: #800000;">'</span><span style="color: #000000;">, []);

            </span><span style="color: #008000;">//</span><span style="color: #008000;">这里是验证指令的内部可以访问外部指令的作用域，这样我们在dialog.html也可以查看到遍历出来的的arrs</span>
            directive.controller(<span style="color: #800000;">"</span><span style="color: #800000;">directiveControl</span><span style="color: #800000;">"</span>,[<span style="color: #800000;">"</span><span style="color: #800000;">$scope</span><span style="color: #800000;">"</span><span style="color: #000000;">,function($scope){
                $scope.arrs</span>=[<span style="color: #800000;">"</span><span style="color: #800000;">我是内容一</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">我是内容二</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">我是内容三</span><span style="color: #800000;">"</span><span style="color: #000000;">];
                $scope.hide</span>=<span style="color: #0000ff;">false</span><span style="color: #000000;">;
            }])

            </span><span style="color: #008000;">//</span><span style="color: #008000;">将任意可以被注入的ng服务注入到控制器中，便可以在指令中使用它了。控制器中也有一些特殊的服务可以被注入到指令当中,当然这是在应用上声明、也可以直接写在controller属性上</span>
            directive.controller(<span style="color: #800000;">"</span><span style="color: #800000;">directiveChildControl</span><span style="color: #800000;">"</span>,[<span style="color: #800000;">'</span><span style="color: #800000;">$scope</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">$attrs</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">$element</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">$transclude</span><span style="color: #800000;">'</span><span style="color: #000000;">,function($scope,$attrs,$element,$transclude){
                    $element.css(</span><span style="color: #800000;">'</span><span style="color: #800000;">border</span><span style="color: #800000;">'</span>, <span style="color: #800000;">'</span><span style="color: #800000;">#fff</span><span style="color: #800000;">'</span>);             <span style="color: #008000;">//</span><span style="color: #008000;">改变模板dom里面的结构</span>
                    $transclude(function (clone) {              <span style="color: #008000;">//</span><span style="color: #008000;">这是操作嵌入的作用域里面的dom</span>
                     <span style="color: #0000ff;">var</span> a = angular.element(<span style="color: #800000;">'</span><span style="color: #800000;">&lt;a&gt;</span><span style="color: #800000;">'</span><span style="color: #000000;">);
                     a.attr(</span><span style="color: #800000;">'</span><span style="color: #800000;">href</span><span style="color: #800000;">'</span>, <span style="color: #800000;">'</span><span style="color: #800000;">http://www.cnblogs.com/wuxiaobin</span><span style="color: #800000;">'</span><span style="color: #000000;">);
                     a.text(</span><span style="color: #800000;">'</span><span style="color: #800000;">我的博客原地址</span><span style="color: #800000;">'</span><span style="color: #000000;">);
                     $element.find(</span><span style="color: #800000;">'</span><span style="color: #800000;">.modal-body</span><span style="color: #800000;">'</span><span style="color: #000000;">).append(a);
                 });
            }])

            directive.directive(</span><span style="color: #800000;">"</span><span style="color: #800000;">dialog</span><span style="color: #800000;">"</span><span style="color: #000000;">, function () {
                 </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> {
                     restrict: </span><span style="color: #800000;">"</span><span style="color: #800000;">AE</span><span style="color: #800000;">"</span><span style="color: #000000;">,
                     replace: </span><span style="color: #0000ff;">true</span><span style="color: #000000;">,
                     transclude:</span><span style="color: #0000ff;">true</span>, <span style="color: #008000;">//</span><span style="color: #008000;">配合ng-transclude使用，为true时，可以将原元素的内容（html、其他指令）提取到带有指令ngTransclude的元素内</span>
                     controller:<span style="color: #800000;">'</span><span style="color: #800000;">directiveChildControl</span><span style="color: #800000;">'</span><span style="color: #000000;">,
                     scope:{
                         title:</span><span style="color: #800000;">"</span><span style="color: #800000;">@</span><span style="color: #800000;">"</span> <span style="color: #008000;">//</span><span style="color: #008000;">模板也可以访问外部的作用域对象,dialog.html的{{title}}正是局部作用域访问父作用域的所产生的效果，这样可以很好实现我们的组件的设计思想，但对于@、=、&amp;的写法有些不理解，望有更好的学习资料可以提供一下，当然搞懂了，也会更新上来</span>
<span style="color: #000000;">                     },
                     templateUrl: </span><span style="color: #800000;">'</span><span style="color: #800000;">dialog.html</span><span style="color: #800000;">'</span><span style="color: #000000;">,
                     link: function(scope, element, attrs, ctrl) { 
                        console.log(element.html());
                        element.find(</span><span style="color: #800000;">'</span><span style="color: #800000;">.modal-title</span><span style="color: #800000;">'</span>).css(<span style="color: #800000;">'</span><span style="color: #800000;">color</span><span style="color: #800000;">'</span>, <span style="color: #800000;">'</span><span style="color: #800000;">red</span><span style="color: #800000;">'</span><span style="color: #000000;">); 
                  }
             }
             });


            
        </span>&lt;/script&gt;

    &lt;/head&gt;
    &lt;body ng-controller=<span style="color: #800000;">"</span><span style="color: #800000;">directiveControl</span><span style="color: #800000;">"</span>&gt;    
        
         &lt;button <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">btn btn-lg btn-primary </span><span style="color: #800000;">"</span> data-toggle=<span style="color: #800000;">"</span><span style="color: #800000;">modal</span><span style="color: #800000;">"</span> data-target=<span style="color: #800000;">"</span><span style="color: #800000;">#myModal</span><span style="color: #800000;">"</span>&gt;弹出模态框&lt;/button&gt;
        &lt;dialog title=<span style="color: #800000;">"</span><span style="color: #800000;">我是传递过来的title</span><span style="color: #800000;">"</span>&gt;
            &lt;span ng-repeat=<span style="color: #800000;">"</span><span style="color: #800000;">arr in arrs</span><span style="color: #800000;">"</span> ng-hide=<span style="color: #800000;">"</span><span style="color: #800000;">hide</span><span style="color: #800000;">"</span>&gt;<span style="color: #000000;">
                {{$index}}</span>-{{arr}} &lt;br&gt;
            &lt;/span&gt;<span style="color: #000000;">
            我的内容即将保存，被提取到</span>&lt;code&gt;  span[ng-transclude] &lt;/code&gt;<span style="color: #000000;">上
        </span>&lt;/dialog&gt;

    &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
<p>效果图：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201510/720690-20151016114716319-1281438584.png" alt="" /></p>]]></description></item><item><title>学习笔记-AngularJs（九）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/10/07/4858415.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 07 Oct 2015 09:39:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/10/07/4858415.html</guid><description><![CDATA[<p>到目前为止，我们所做的学习案例都是没有加任何动画效果的，对于以往来说，我们经常会去使用一些动画插件或是css框架（如：animate.css）来点缀我们的网页，这样显得生动，高大上，那么接下来我们可以学习一下，怎么在AngularJs下来实现叼酷炫的动画操作，主要使用的命令是<strong>ngAnimate。</strong></p>
<p>与之前的ngResource，ngRoute一样，需要注入ngAnimate和引入ng-animate.js才可以使用此服务，想在你的angular应用程序使用ngAnimate来实现动画功能，前提条件是将ngAnimate包含到您的应用程序，动画是由使用CSS转换/动画或JavaScript回调来实现。angular本身各种核心ng指令将提供动画钩子，支持动画的的指令有ngRepeat, ngInclude, ngIf, ngSwitch,ngShow, ngHide, ngView and ngClass，当然自定义命令也是可以通过使用$animate服务来进行动画操作，其各个指令对动画支持情况如下表（忽略，<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>）：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201510/720690-20151007140951862-1659398190.png" alt="" /></p>
<ul>
<li><span class="pln">ng<span class="pun">-<span class="pln">enter &nbsp;class 主要用于新添加的元素并渲染到页面中，添加后会添加class ng-enter-active</span></span></span></li>
<li>ng-move &nbsp;class 主要用于当元素被移动时，移动后会添加class ng-move-active</li>
<li>ng-leave &nbsp;class主要用于被删除时，删除后会添加class ng-leave-active</li>
<li>ng-hide,ng-show &nbsp;class用于是否判断执行，对应的还会有几个css，ng-hide-add,ng-hide-add-active,ng-hide-remove,ng-hide-remove-active,会在使用ng-show或是ng-hide指令操作dom时动态添加的class</li>
<li>对于表单，在之前的学习笔记上也有通过不同验证的属性，而得到的class（如input无效则会加上class="ng-invalid"），从而来定义其显示样式</li>
</ul>
<p>　　必须要明白：（1）父元素动画没执行完，子元素动画不执行，但是可以将此行为屏蔽掉，加上<strong><code><span class="pln">ng<span class="pun">-<span class="pln">animate<span class="pun">-<span class="pln">children</span></span></span></span></span></code>&nbsp;&nbsp;</strong>　</p>
<p>　　　　　　　　（2）在使用$http获取远程数据时，会自动延长动画时间，应用加载，动画不马上执行！</p>
<p>　　通过审查phonecat上面（<a href="http://angular.github.io/angular-phonecat/step-12/app/#/phones" target="_blank">http://angular.github.io/angular-phonecat/step-12/app/#/phones</a>）的元素，观察其变化，不难看出，AngularJs可以通过ngAnimate模块在不同时间点给上不同的class，然后通过定义这些class的css，来实现动画操作！觉得还是需要举例子来学习，比较容易懂！主要分两部分来举例，CSS-defined Animations和JavaScript-defined Animations。</p>
<p>CSS-defined Animations</p>
<p>还记得之前的<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/wuxiaobin/p/4811756.html">学习笔记-AngularJs（三）</a>使用了filter对ng-repeat进行过滤吗？我们现在修改一下之前的代码，把它改成过滤检索歌曲，代码如下：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;<br />&lt;html ng-app=<span style="color: #800000;">'</span><span style="color: #800000;">animate-css</span><span style="color: #800000;">'</span>&gt;
    &lt;head&gt;
        &lt;meta charset=<span style="color: #800000;">"</span><span style="color: #800000;">utf8</span><span style="color: #800000;">"</span>/&gt;
        &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">angular.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
        &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">angular-animate.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt; <span style="color: #008000;">//使用ngAnimate模块需要引入angular-animate.js</span>
        &lt;script&gt;<span style="color: #000000;">
            angular.module(</span><span style="color: #800000;">'</span><span style="color: #800000;">animate-css</span><span style="color: #800000;">'</span>, [<span style="color: #800000;">'</span><span style="color: #800000;">ngAnimate</span><span style="color: #800000;">'</span><span style="color: #000000;">])<span style="color: #008000;">//注入ngAnimate，这样animate动画效果便自动应用在了项目中，于是就需要定义css改变样式</span>
            .controller(</span><span style="color: #800000;">'</span><span style="color: #800000;">songController</span><span style="color: #800000;">'</span>, [<span style="color: #800000;">'</span><span style="color: #800000;">$scope</span><span style="color: #800000;">'</span><span style="color: #000000;">, function($scope) {
                $scope.songs</span>=[<span style="color: #800000;">'</span><span style="color: #800000;">爱你一万年</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">开心的马骝</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">北京欢迎你</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">笑傲江湖</span><span style="color: #800000;">'</span> ,<span style="color: #800000;">'</span><span style="color: #800000;">练习</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">爱情买卖</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">七里香</span><span style="color: #800000;">'</span> ,<span style="color: #800000;">'</span><span style="color: #800000;">死了都要爱</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">北京爱情故事</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">星星点灯</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">星空</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">豆浆和油条</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">神话</span><span style="color: #800000;">'</span><span style="color: #000000;">];
            }]);
       </span>&lt;/script&gt;
        
        &lt;style&gt;<br />　　　　　　　<span style="color: #008000;">/*上文已有提到，angular不同时间点会有不同的class，正是利用这些class来制作动画，必须了解ng-enter,ng-enter-active,ng-leave,ng-leave-active,ng-move,ng-move-active这些class的先后顺序*/</span><br /><span style="color: #000000;">
            li{list</span>-<span style="color: #000000;">style: none; }
            body{margin: 50px; background</span>-color: #<span style="color: #800080;">333</span><span style="color: #000000;">; color: #ccc; overflow: hidden;}
            h3{color: #fff;}
            .song</span>-list.ng-<span style="color: #000000;">enter,
            .song</span>-list.ng-<span style="color: #000000;">leave,
            .song</span>-list.ng-<span style="color: #000000;">move {
              </span>-webkit-transition: <span style="color: #800080;">0</span><span style="color: #000000;">.5s linear all;
              </span>-moz-transition: <span style="color: #800080;">0</span><span style="color: #000000;">.5s linear all;
              </span>-o-transition: <span style="color: #800080;">0</span><span style="color: #000000;">.5s linear all;
              transition: </span><span style="color: #800080;">0</span><span style="color: #000000;">.5s linear all;
            }

            .song</span>-list.ng-<span style="color: #000000;">enter,
            .song</span>-list.ng-<span style="color: #000000;">move {
              opacity: </span><span style="color: #800080;">0</span><span style="color: #000000;">;
              height: </span><span style="color: #800080;">0</span><span style="color: #000000;">;
              overflow: hidden;
            }

            .song</span>-list.ng-move.ng-move-<span style="color: #000000;">active,
            .song</span>-list.ng-enter.ng-enter-<span style="color: #000000;">active {
              opacity: </span><span style="color: #800080;">1</span><span style="color: #000000;">;
              height: 120px;
            }

            .song</span>-list.ng-<span style="color: #000000;">leave {
              opacity: </span><span style="color: #800080;">1</span><span style="color: #000000;">;
              overflow: hidden;
            }

            .song</span>-list.ng-leave.ng-leave-<span style="color: #000000;">active {
              opacity: </span><span style="color: #800080;">0</span><span style="color: #000000;">;
              height: </span><span style="color: #800080;">0</span><span style="color: #000000;">;
              padding</span>-top: <span style="color: #800080;">0</span><span style="color: #000000;">;
              padding</span>-bottom: <span style="color: #800080;">0</span><span style="color: #000000;">;
            }        
        </span>&lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;    
        
        &lt;div ng-controller=<span style="color: #800000;">"</span><span style="color: #800000;">songController</span><span style="color: #800000;">"</span>&gt;
            &lt;input type=<span style="color: #800000;">"</span><span style="color: #800000;">text</span><span style="color: #800000;">"</span> ng-model=<span style="color: #800000;">"</span><span style="color: #800000;">search</span><span style="color: #800000;">"</span>&gt;
            &lt;button type=<span style="color: #800000;">"</span><span style="color: #800000;">submit</span><span style="color: #800000;">"</span>&gt;Filter&lt;/button&gt;
            &lt;ul&gt;
            &lt;li <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">song-list</span><span style="color: #800000;">"</span> ng-repeat=<span style="color: #800000;">"</span><span style="color: #800000;">song in songs | filter:search</span><span style="color: #800000;">"</span>&gt;<span style="color: #000000;">
            {{song}}
            </span>&lt;/li&gt; 
            &lt;/ul&gt;                 
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
<p>&nbsp;JavaScript-defined Animations</p>
<p>&nbsp;如果你不想使用CSS3转换或CSS3动画，如果你想提供动画还不支持CSS的浏览器转换/动画,那么你可以使用JavaScript动画定义AngularJS模块内，也就是自定义动画，实现个性化的动画效果，先来看官网是如何去使用javascript动画定义的：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;">!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.</span>
<span style="color: #0000ff;">var</span> ngModule = angular.module(<span style="color: #800000;">'</span><span style="color: #800000;">YourApp</span><span style="color: #800000;">'</span>, [<span style="color: #800000;">'</span><span style="color: #800000;">ngAnimate</span><span style="color: #800000;">'</span><span style="color: #000000;">]);
ngModule.animation(</span><span style="color: #800000;">'</span><span style="color: #800000;">.my-crazy-animation</span><span style="color: #800000;">'</span><span style="color: #000000;">, function() {
  </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> {
    enter: function(element, done) {
      </span><span style="color: #008000;">//</span><span style="color: #008000;">run the animation here and call done when the animation is complete</span>
      <span style="color: #0000ff;">return</span><span style="color: #000000;"> function(cancelled) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">this (optional) function will be called when the animation
        </span><span style="color: #008000;">//</span><span style="color: #008000;">completes or when the animation is cancelled (the cancelled
        </span><span style="color: #008000;">//</span><span style="color: #008000;">flag will be set to true if cancelled).</span>
<span style="color: #000000;">      };
    },
    leave: function(element, done) { },
    move: function(element, done) { },

    </span><span style="color: #008000;">//</span><span style="color: #008000;">animation that can be triggered before the class is added</span>
<span style="color: #000000;">    beforeAddClass: function(element, className, done) { },

    </span><span style="color: #008000;">//</span><span style="color: #008000;">animation that can be triggered after the class is added</span>
<span style="color: #000000;">    addClass: function(element, className, done) { },

    </span><span style="color: #008000;">//</span><span style="color: #008000;">animation that can be triggered before the class is removed</span>
<span style="color: #000000;">    beforeRemoveClass: function(element, className, done) { },

    </span><span style="color: #008000;">//</span><span style="color: #008000;">animation that can be triggered after the class is removed</span>
<span style="color: #000000;">    removeClass: function(element, className, done) { }
  };
});</span></pre>
</div>
<p>不难看出是可以不仅自己定义enter（添加元素）、move（移动元素）、leave（删除元素）等状态，而且还可以增加addClass、beforeRemoveClass、removeClass等监听事件。那么我们对上面过滤歌名的demo修改一下：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;
&lt;html ng-app=<span style="color: #800000;">'</span><span style="color: #800000;">animate-javascript</span><span style="color: #800000;">'</span>&gt;
    &lt;head&gt;
        &lt;meta charset=<span style="color: #800000;">"</span><span style="color: #800000;">utf8</span><span style="color: #800000;">"</span>/&gt;
        <span style="color: #339966;">&lt;script src="jquery.js"&gt;&lt;/script&gt;</span>
        &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">angular.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
        &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">angular-animate.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
        &lt;script&gt;
            <span style="color: #0000ff;">var</span> jav = angular.module(<span style="color: #800000;">'</span><span style="color: #800000;">animate-javascript</span><span style="color: #800000;">'</span>, [<span style="color: #800000;">'</span><span style="color: #800000;">ngAnimate</span><span style="color: #800000;">'</span><span style="color: #000000;">]);
            jav.controller(</span><span style="color: #800000;">'</span><span style="color: #800000;">songController</span><span style="color: #800000;">'</span>, [<span style="color: #800000;">'</span><span style="color: #800000;">$scope</span><span style="color: #800000;">'</span><span style="color: #000000;">, function($scope) {
                $scope.songs</span>=[<span style="color: #800000;">'</span><span style="color: #800000;">爱你一万年</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">开心的马骝</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">北京欢迎你</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">笑傲江湖</span><span style="color: #800000;">'</span> ,<span style="color: #800000;">'</span><span style="color: #800000;">练习</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">爱情买卖</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">七里香</span><span style="color: #800000;">'</span> ,<span style="color: #800000;">'</span><span style="color: #800000;">死了都要爱</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">北京爱情故事</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">星星点灯</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">星空</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">豆浆和油条</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">神话</span><span style="color: #800000;">'</span><span style="color: #000000;">];
            }]);
            jav.animation(</span><span style="color: #800000;">"</span><span style="color: #800000;">.repeat-animation</span><span style="color: #800000;">"</span><span style="color: #000000;">,function(){  <span style="color: #339966;">//我们引入angular-animate.js和注入ngAnimate模块后，便可以使用.animation(element,function(){...})来定义动画,这里我们定义了一个class为.repeat-animation的的动画
                  </span></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> {
                    enter : function(element, done) { <span style="color: #339966;">//对于动画行为的函数格式是function(element,done){...}，这里的element指得是一个jquery对象（前提必须引入jquery.js）,done是结束的回调函数
                      </span></span><span style="color: #0000ff;">var</span> width =<span style="color: #000000;"> element.width();
                      element.css({
                        position: </span><span style="color: #800000;">'</span><span style="color: #800000;">relative</span><span style="color: #800000;">'</span><span style="color: #000000;">,
                        left: </span>-2<span style="color: #800080;">0</span><span style="color: #000000;">,
                        opacity: </span><span style="color: #800080;">0</span><span style="color: #000000;">
                      });
                      element.animate({
                        left: </span><span style="color: #800080;">0</span><span style="color: #000000;">,
                        opacity: </span><span style="color: #800080;">1</span><span style="color: #000000;">
                      }, done);
                    },
                    leave : function(element, done) {
                      element.css({
                        position: </span><span style="color: #800000;">'</span><span style="color: #800000;">relative</span><span style="color: #800000;">'</span><span style="color: #000000;">,
                        left: </span><span style="color: #800080;">0</span><span style="color: #000000;">,
                        opacity: </span><span style="color: #800080;">1</span><span style="color: #000000;">
                      });
                      element.animate({
                        left: </span>-<span style="color: #800080;">10</span><span style="color: #000000;">,
                        opacity: </span><span style="color: #800080;">0</span><span style="color: #000000;">
                      }, done);
                    },
                    move : function(element, done) {
                      element.css({
                        left: </span><span style="color: #800000;">"5</span><span style="color: #800000;">px</span><span style="color: #800000;">"</span><span style="color: #000000;">,
                        opacity: </span><span style="color: #800080;">0.2</span><span style="color: #000000;">
                      });
                      element.animate({
                        left: </span><span style="color: #800000;">"</span><span style="color: #800000;">0px</span><span style="color: #800000;">"</span><span style="color: #000000;">,
                        opacity: </span><span style="color: #800080;">1</span><span style="color: #000000;">
                      }, done);
                    }
                  };
            })
        </span>&lt;/script&gt;
        
        &lt;style&gt;<span style="color: #000000;">
            li{list</span>-<span style="color: #000000;">style: none; }
            body{margin: 50px; background</span>-color: #<span style="color: #800080;">333</span><span style="color: #000000;">; color: #ccc; overflow: hidden;}
            h3{color: #fff;}
        </span>&lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;    
        
        &lt;div ng-controller=<span style="color: #800000;">"</span><span style="color: #800000;">songController</span><span style="color: #800000;">"</span>&gt;
            &lt;input type=<span style="color: #800000;">"</span><span style="color: #800000;">text</span><span style="color: #800000;">"</span> ng-model=<span style="color: #800000;">"</span><span style="color: #800000;">search</span><span style="color: #800000;">"</span>&gt;
            &lt;button type=<span style="color: #800000;">"</span><span style="color: #800000;">submit</span><span style="color: #800000;">"</span>&gt;Filter&lt;/button&gt;
            &lt;ul&gt;
            &lt;li <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">song-list <span style="color: #339966;">repeat-animation</span></span><span style="color: #800000;">"</span> ng-repeat=<span style="color: #800000;">"</span><span style="color: #800000;">song in songs | filter:search</span><span style="color: #800000;">"</span>&gt;<span style="color: #000000;">
            {{song}}
            </span>&lt;/li&gt; 
            &lt;/ul&gt;                 
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
<p>&nbsp;这是对ng-animate的一个大概的了解，其中还有许多遗漏的点（比如说$animate服务等），随后学到了，会补充上去，其他指令的自定义动画(通过css或是javascript)的代码demo更新到github上(地址：<a href="https://github.com/xiaobin5201314/AngularJS-Learning/tree/master/block-example/动画操作-12" target="_blank">https://github.com/xiaobin5201314/AngularJS-Learning/tree/master/block-example/动画操作-12</a>)！</p>]]></description></item><item><title>font-size、vertical-align、line-height三位css好汉的江湖恩怨</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/10/06/4857438.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 06 Oct 2015 09:42:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/10/06/4857438.html</guid><description><![CDATA[<p>font-size、vertical-align、line-height三位css好汉的江湖恩怨font-size、vertical-align、line-height三位css好汉的江湖恩怨font-size、vertical-align、line-height三位css好汉的江湖恩怨font-size、vertical-align、line-height三位css好汉的江湖恩怨font-size、vertical-align、line-height三位css好汉的江湖恩怨</p>]]></description></item><item><title>使用git管理github上的项目</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/10/06/4857259.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 06 Oct 2015 08:45:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/10/06/4857259.html</guid><description><![CDATA[<p>使用git可以把我们的项目代码上传到github上面去，方便自己管理，如何使用git？觉得是每位程序猿所必需要有的谋生技能，所以在此记录一下自己学会使用的这个过程：</p>
<p>一、需要注册github账号，这样就可以在自己的github上面创建仓库（Create a&nbsp;New Repository）了，填好一些配置信息，然后便可以点击"Create Repository"按钮了！<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>如图：</p>
<p>&nbsp;<img src="http://images2015.cnblogs.com/blog/720690/201510/720690-20151006155503596-399577792.png" alt="" /></p>
<p>二、安装客户端tortoiseGit(小乌龟)，于是我们便可以右键Git Init Here(初始化本地仓库)，然后会出现.git文件，同时也可以Git Bash进入git命令行，将项目代码上传至github上面创建的对应的仓库。</p>
<p>三、配置Git</p>
<p>　　1、首先需要在本地创建ssh key（可以理解创建密钥文件）</p>
<div>　　　&nbsp; $<strong> ssh-keygen -t rsa -C "<a href="http://blog.sina.com.cn/s/blog_63eb3eec0101cf6x.htmlmailto:your_email@youremail.com">your_email@youremail.com</a>"</strong>&nbsp; //双引号里面是自己的邮箱，需要是自己在github上面注册的邮箱，这一操作后要求确认路径和输入密码，密码建议与github密码一致，这样比较好记！一路回车键，成功的话，根据命令显示的地址找出.ssh文件夹，进去，找到id_rsa.pub，复制里面的key，登录github，进入<strong>Setting -&gt;&nbsp; SSH keys</strong>，点击Add SSH Key，将复制的key粘贴进去，title随便填！</div>
<div>&nbsp;</div>
<div>　　2、为了验证是否成功，在git bash输入 $ <strong>ssh -T&nbsp;<a href="http://blog.sina.com.cn/s/blog_63eb3eec0101cf6x.htmlmailto:git@github.com">git@github.com</a>&nbsp;</strong>，如果是第一次的话，会提示是否continue，输入yes，会看到<strong>You&rsquo;ve successfully authenticated, but GitHub does not provide shell access</strong>，那么证明成功连接github！</div>
<div>&nbsp;</div>
<div>　　3、接下来还需要配置一下username和email，之后每次commit都会使用到的：　</div>
<div>
<div>　　　&nbsp; $ <strong>git config --global user.name "your name"</strong> //需要和github上名称一致</div>
<div>　　　&nbsp; $ <strong>git config --global user.email "<a href="http://blog.sina.com.cn/s/blog_63eb3eec0101cf6x.htmlmailto:your_email@youremail.com">your_email@youremail.com</a>"</strong> //需要和github上注册邮箱一致</div>
<div>&nbsp;</div>
<div>四、Git常用命令行　</div>
<div>　　git clone ...&nbsp; //克隆别人的项目</div>
<div>
<div>&nbsp;&nbsp;&nbsp;&nbsp; 创建一个项目名为angular文件夹<br />&nbsp;&nbsp;&nbsp;&nbsp; 进入这个angular项目<br />&nbsp;&nbsp;&nbsp;&nbsp; $ git init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //初始化&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; $ git add README.md &nbsp; &nbsp; &nbsp; &nbsp;//更新README文件</div>
<div>　&nbsp; $ git add *&nbsp;//更新所有文件<br />&nbsp;&nbsp;&nbsp;&nbsp; $ git commit -m 'first commit'&nbsp;&nbsp;&nbsp;&nbsp; //提交更新，并注释信息&ldquo;one commit&rdquo;，第一次提交<br />&nbsp;&nbsp;&nbsp;&nbsp; $ git remote add origin&nbsp;<a href="http://blog.csdn.net/steven6977/article/details/11268675mailto:git@github.com:defnngj/hello-world.git" target="_blank">git@github.com:xiaobin5201314/angular.git</a>&nbsp;&nbsp;&nbsp;&nbsp; //第一次需要连接远程github项目<br />&nbsp;&nbsp;&nbsp;&nbsp; $ git push -u origin master&nbsp;&nbsp;&nbsp; &nbsp;//将本地项目更新到github项目上去，或是（git push origin master）</div>
<div>　 &nbsp;$ git pull -u origin master&nbsp;&nbsp;&nbsp; &nbsp;//将github项目更新到本地，或是（git pull origin master）</div>
<div>　 &nbsp;$&nbsp;git checkout -b feature_x &nbsp; //创建一个叫做&ldquo;feature_x&rdquo;的分支，并切换过去</div>
<div>　 &nbsp;$&nbsp;git checkout master &nbsp;//切换回主分支</div>
<div>　 &nbsp;$ git branch -d feature_x &nbsp;//把新建的分支删掉</div>
<div>　 &nbsp;$&nbsp;git push origin &lt;branch&gt; //将分支推送到远端仓库<em><br /></em></div>
<div>　 &nbsp;$ &nbsp;git merge &lt;branch&gt; //将某个分支合并到master</div>
<div>&nbsp;</div>
<div>五、常见错误：</div>
<div>
<div>
<p>&nbsp;如果输入$ git remote add origin&nbsp;<a href="http://blog.csdn.net/steven6977/article/details/11268675mailto:git@github.com:djqiang/gitdemo.git" target="_blank">git@github.com:xiaobin5201314（github帐号名）/gitdemo（项目名）.git</a>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;提示出错信息：fatal: remote origin already exists.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;解决办法如下：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;1、先输入$ git remote rm origin</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;2、再输入$ git remote add origin&nbsp;<a href="http://blog.csdn.net/steven6977/article/details/11268675mailto:git@github.com:djqiang/gitdemo.git" target="_blank">git@github.com:xiaobin5201314/gitdemo.git</a>&nbsp;就不会报错了！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;3、如果输入$ git remote rm origin&nbsp;还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改gitconfig文件的内容</p>
<p>&nbsp;&nbsp;&nbsp; 4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\angular_d14f7551eeb4aea0e4ae9fcd3358bd96420bb5c8\etc</p>
<p>&nbsp;&nbsp;&nbsp; 5、找到一个名为gitconfig的文件，打开它把里面的<code>[remote "origin"]那一行</code>删掉就好了！</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp; 如果输入$ ssh -T&nbsp;<a href="http://blog.csdn.net/steven6977/article/details/11268675mailto:git@github.com" target="_blank">git@github.com</a><br />&nbsp;&nbsp;&nbsp; 出现错误提示：Permission denied (publickey).因为新生成的key不能加入ssh就会导致连接不上github，可以重新生成一个。</p>
<p>&nbsp;&nbsp;&nbsp; 解决办法如下：</p>
<p>&nbsp;&nbsp;&nbsp; 1、先输入$ ssh-agent，再输入$ ssh-add ~/.ssh/id_key，这样就可以了。</p>
<p>&nbsp;&nbsp;&nbsp; 2、如果还是不行的话，输入ssh-add ~/.ssh/id_key 命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。</p>
<p>&nbsp;&nbsp;&nbsp; 3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp; 如果输入$ git push origin master</p>
<p>&nbsp;&nbsp;&nbsp; 提示出错信息：error:failed to push som refs to .......</p>
<p>&nbsp;&nbsp;&nbsp; 解决办法如下：</p>
<p>&nbsp;&nbsp;&nbsp; 1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来</p>
<p>&nbsp;&nbsp;&nbsp; 2、再输入$ git push origin master</p>
<p>&nbsp;&nbsp;&nbsp; 3、如果出现报错 fatal: Couldn't find remote ref master或者fatal: 'origin' does not appear to be a git repository以及fatal: Could not read from remote repository.</p>
<p>&nbsp;&nbsp;&nbsp; 4、则需要重新输入$ git remote add origin<a href="http://blog.csdn.net/steven6977/article/details/11268675mailto:git@github.com:djqiang/gitdemo.git" target="_blank">git@github.com:xiaobin5201314/gitdemo.git</a></p>
<p>&nbsp;</p>












</div>











</div>












</div>












</div>
<div>六、README.md也可以怎么编写</div>
<div>&nbsp;</div>
<div>　&nbsp; &nbsp;README.md不单单可以写文字说明，还可以控制样式，显示图片，列表等有趣的操作，使用的是一种MarkDown的标签语言，十分简单，感兴趣可以到<a href="http://www.kuqin.com/shuoit/20141125/343459.html" target="_blank">原来Github上的README.md文件这么有意思&mdash;&mdash;Markdown语言详解</a>去阅读，这篇文章有着很详细的介绍，里面也介绍了两个比较实用的在线编写README.md的工具！</div>]]></description></item><item><title>学习笔记-AngularJs（八）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/29/4838577.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 29 Sep 2015 03:22:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/29/4838577.html</guid><description><![CDATA[<p class="api-profile-header-heading">在使用form.FormController和ngModel.NgModelController之前，先来学习一下怎么一个ng-model-options指令，觉得怎么这个指令挺好用的，我们知道ng-model是可以实现数据的双向绑定，至于双向数据绑定这个概念时必须要清楚的，都是这样的一个过程，view-&gt;scope和scope-&gt;view，只要双向绑定的element都是走怎么一个过程的，那么这个ng-model-options，就是可以实现对延迟更新、如何触发更新、时区（timezone针对input[type='date']等）等的控制，来看一下官网（<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>这个不是，哈哈）的例子：</p>
<div class="cnblogs_code">
<pre>//github上的block-example/表单操作-11/ng-model-options.html<br />angular.module('optionsExample'<span style="color: #000000;">, [])
.controller(</span>'ExampleController', ['$scope', <span style="color: #0000ff;">function</span><span style="color: #000000;">($scope) {
  $scope.user </span>= { name: 'say', data: ''<span style="color: #000000;"> };

  $scope.cancel </span>= <span style="color: #0000ff;">function</span><span style="color: #000000;">(e) {
    </span><span style="color: #0000ff;">if</span> (e.keyCode == 27<span style="color: #000000;">) {
      $scope.userForm.userName.$rollbackViewValue();
    }
  };
}]);</span></pre>
</div>
<div class="cnblogs_code">
<pre>&lt;div ng-controller="ExampleController"&gt;
  &lt;form name="userForm"&gt;<span style="color: #000000;">
    Name:
    </span>&lt;input type="text" name="userName"<span style="color: #000000;">
           ng</span>-model="user.name"<span style="color: #000000;">
           ng</span>-model-options="{ updateOn: 'blur',debounce: 1000 ,getterSetter: false&nbsp; }"<span style="color: #000000;">
           ng</span>-keyup="cancel($event)" /&gt;&lt;br /&gt;<span style="color: #000000;">

    Other data:
    </span>&lt;input type="text" ng-model="user.data" /&gt;&lt;br /&gt;
  &lt;/form&gt;
  &lt;pre&gt;user.name = &lt;span ng-bind="user.name"&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;</pre>
</div>
<p>updateOn：可以写入事件名字，将此element按所写事件触发更新</p>
<p>debounce：当我们写进keydowm事件的时候，我需要的是它尽可能说是当我输入完毕后，再去触发更新，那么这个时候我们可以延迟个1s！</p>
<p>getterSetter：为true的时候，则是指element的值是从函数return过来滴！</p>
<p>我们看一下这里，&nbsp;$scope.userForm.userName.$rollbackViewValue(); userForm、userName是什么鬼？眼尖的可以看到是表单的name和input[name='userName'],那么其实可以怎么理解<strong>表单实例可以随意地使用name属性暴露到scope</strong>中，于是在$scope就可以使用表单实例了，便可以使用表单控制器的属性和方法了！</p>
<p class="api-profile-header-heading">form.FormController是啥？</p>
<p class="api-profile-header-heading">FormController跟踪所有input和form的各种状态的控制,如被有效/无效/已交互/未交互。官网文档：<a href="http://docs.angularjs.cn/api/ng/type/form.FormController" target="_blank">http://docs.angularjs.cn/api/ng/type/form.FormController</a></p>
<p class="api-profile-header-heading">其拥有的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">$rollbackViewValue(); $commitViewValue(); $addControl(); $removeControl(); $setValidity(); $setDirty(); $setPristine(); $setUntouched(); $setSubmitted();</span></pre>
</div>
<p>$addControl() &nbsp;//添加ngModel controller ,ngModel会自动添加，除非自定义指令或许会用上<br />$removeControl() &nbsp;//与$addControl()相反<br />$setValidity() &nbsp;//在自定义表单检验有着很大作用</p>
<p>$rollbackViewValue() //这个我是这样理解的，回滚到上一个ViewValue</p>
<p>拥有的属性：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">$pristine(form没被动过)  $dirty(</span>form被动过<span>) $valid(全部验证通过) $invalid(验证不通过) $submitted</span></pre>
<pre><span style="color: #000000;">
$error
    email、max、maxlength、min、minlength、number、pattern、required、url、date、datetimelocal、time、week、month</span></pre>
</div>
<p>给一个官网的例子（使用表单控制器的属性和方法怎么去验证input的正确性）：</p>
<div class="cnblogs_code">
<pre></pre>
<pre>//github上的block-example/表单操作-11/ng-form.html，其它类型的input[type=*]验证也都更新到github了</pre>
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">doctype html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html </span><span style="color: #ff0000;">ng-app</span><span style="color: #0000ff;">='formExample'</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">meta </span><span style="color: #ff0000;">charset</span><span style="color: #0000ff;">="utf8"</span><span style="color: #0000ff;">/&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">="http://code.angularjs.org/angular-1.0.1.min.js"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span><span style="background-color: #f5f5f5; color: #800000;">
         .my-form </span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
           -webkit-transition</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">all linear 0.5s</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
           transition</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">all linear 0.5s</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
           background</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> transparent</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
         <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
         .my-form.ng-invalid </span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
           background</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> red</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
         <span style="background-color: #f5f5f5; color: #000000;">}</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><span style="background-color: #f5f5f5; color: #000000;">
          angular.module(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">formExample</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, [])
            .controller(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">FormController</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, [</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">$scope</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">($scope) {
              $scope.userType </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">guest</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">;
              $scope.email </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">739288994@qq.com</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">;

              </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> list </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> $scope.list </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> [];

              $scope.submit </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">() {
                     </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">($scope.userType){ list.push(</span><span style="background-color: #f5f5f5; color: #0000ff;">this</span><span style="background-color: #f5f5f5; color: #000000;">.userType);}
                     </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">($scope.email){  list.push(</span><span style="background-color: #f5f5f5; color: #0000ff;">this</span><span style="background-color: #f5f5f5; color: #000000;">.email);}    
                      </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> console.log(this.userType+","+this.email);</span>
                      <span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> console.log($scope.list);</span>
<span style="background-color: #f5f5f5; color: #000000;">                  };
            }]);
        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>    
        <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">表单控制器</span><span style="color: #008000;">--&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">form </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="myForm"</span><span style="color: #ff0000;"> ng-submit</span><span style="color: #0000ff;">="submit()"</span><span style="color: #ff0000;">  ng-controller</span><span style="color: #0000ff;">="FormController"</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">="my-form"</span> <span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
          userType: </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="input"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="text"</span><span style="color: #ff0000;"> ng-model</span><span style="color: #0000ff;">="userType"</span><span style="color: #ff0000;"> required</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="error"</span><span style="color: #ff0000;"> ng-show</span><span style="color: #0000ff;">="myForm.input.$error.required"</span><span style="color: #0000ff;">&gt;</span>Required!<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>  <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">这里的意思是没有填的话就会显示</span><span style="color: #008000;">--&gt;</span><span style="color: #000000;">
          email:  </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="email"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="email"</span><span style="color: #ff0000;">  ng-model</span><span style="color: #0000ff;">="email"</span><span style="color: #0000ff;">&gt;</span>
                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="error"</span><span style="color: #ff0000;"> ng-show</span><span style="color: #0000ff;">="myForm.email.$error.email"</span><span style="color: #0000ff;">&gt;</span>Wrong Email!<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span> 
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="submit"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="提交"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="submit"</span> <span style="color: #0000ff;">/&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>userType = {{userType}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>email = {{email}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.input.$valid = {{myForm.input.$valid}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">表单的input的有效为true</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.input.$error = {{myForm.input.$error}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">表单的input的$error</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.email.$valid = {{myForm.email.$valid}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">表单的input的有效为true</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.email.$error = {{myForm.email.$error}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span> <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">表单的input的$error</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.$error.email = {{!!myForm.$error.email}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span> 
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.$error.required = {{!!myForm.$error.required}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>  <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">$error属性的required</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.$valid = {{myForm.$valid}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>        <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">有效效为true</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.$invalid = {{myForm.$invalid}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>    <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">无效为true</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.$pristine= {{myForm.$pristine}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>   <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">与表单有相互作用为true</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.$dirty= {{myForm.$dirty}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>   <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">与表单无相互作用为true</span><span style="color: #008000;">--&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>myForm.$submitted = {{myForm.$submitted}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>   
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>提交的数据：{{list|json}}<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tt</span><span style="color: #0000ff;">&gt;</span>
         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">form</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>

<span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> If the name attribute is specified, the form controller is published onto the current scope under this name. </span><span style="color: #008000;">--&gt;</span>

<span style="color: #008000;">&lt;!--</span><span style="color: #008000;">表单阻止了表单默认action提交的方式，改用ng-submit或ng-click对表单进行绑定，具体操作看列子</span><span style="color: #008000;">--&gt;</span>

<span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> &lt;form [name=""]&gt;...&lt;/form&gt; 等价于 &lt;div ng-form='##'&gt;&lt;/div&gt; 控制器为name属性的值 </span><span style="color: #008000;">--&gt;</span></pre>
</div>
<p>具体可以看代码！</p>
<p>ngModel.NgModelController是啥？</p>
<p class="api-profile-header-heading">NgModelController 为ngModel指令提供了API。该控制器包含数据双向绑定服务、验证、Value格式化和解析、CSS更新。它不包含任何逻辑处理DOM渲染或DOM event，这样的DOM相关逻辑应使用其他指令,NgModelController用来控制元素的数据绑定。Angular默认提供许多关于input元素&nbsp;DOM逻辑处理。官网文档：<a href="http://docs.angularjs.cn/api/ng/type/ngModel.NgModelController" target="_blank">http://docs.angularjs.cn/api/ng/type/ngModel.NgModelController</a></p>
<p class="api-profile-header-heading">其拥有的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">$render(); $isEmpty(value); $setValidity(validationErrorKey, isValid); $setPristine(); $setDirty(); $setUntouched(); $setTouched(); $rollbackViewValue(); $validate(); $commitViewValue(); $setViewValue(value, trigger);</span></pre>
</div>
<p>$render：&nbsp;angular 会把 $modelValue 经过 $formatters 得出来的值放入 $viewValue中，(这时 $viewValue = $modelValue 经过 $formatters) 然后触发我们写好的 $render .&nbsp;跟着$setViewValue(value, trigger);一起使用。</p>
<p>$setViewValue：scope改变$modelValue，使用$setViewValue(),改变$viewValue</p>
<p>$setValidity：使用这个配合$parsers可以实现表单自定义验证</p>
<p>拥有的属性：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">$viewValue  //界面显示的数据<br /><br />$modelValue  //$scope上面的value<br /><br />$parsers  //在</span>view-&gt;model<span>的时候会触发的一个函数组，无论什么时候Model发生改变，所有的ngModelController.$formatters(model发生改变时触发数据有效验证和格式化转变)数组中的function将排队执行，所以在这里每一个function都有机会去格式化model的值，并且通过NgModelController.$setValidity修改空间的验证状态。</span></pre>
<p><span style="color: #000000;"><br />$formatters //</span><span style="color: #000000;">在</span>model-&gt;view<span>的时候会触发的一个函数组，&nbsp;无论任何时候用户与控件发生交互，将会触发NgModelCtroller.$setViewValue。这时候轮到执行NgModelController.$parsers(当控件从dom取值之后，将会执行这个数组中的所有方法，对值进行审查过滤或转换，也进行验证)数组中的所有方法。</span></p>
<pre><span style="color: #000000;"><br />$validators <br />$asyncValidators <br />$viewChangeListeners <br />$error <br />$pending <br />$untouched <br />$touched <br />$pristine <br />$dirty <br />$valid <br />$invalid <br />$name</span></pre>
</div>
<p>&nbsp;那么多个属性都差不多，是不是关系很密切勒！双向绑定的机制可以在$parsers和$formatters可以体现出来，通过这些我们可以在view-&gt;scope做类似表单验证（自定义）的功能（配合<em>$setValidity(validationErrorKey, isValid);</em>），scope-&gt;view数据格式自定义等操作（配合<em id="__mceDel" style="font-family: 'Courier New'; font-size: 12px; line-height: 1.5;">$setViewValue(value, trigger);</em>），可以看一下下面的这个例子(<a href="https://github.com/xiaobin5201314/AngularJS-Learning/blob/master/block-example/表单操作-11/ng-model.html" target="_blank">https://github.com/xiaobin5201314/AngularJS-Learning/blob/master/block-example/表单操作-11/ng-model.html</a>)：</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre></pre>
<p>var custom = angular.module('customControl', ['ngSanitize']);</p>
<p> custom.directive("noxiaobin", function () {<br />                 return {<br />                     restrict: "A",<br />                     require: "?ngModel",<br />                     link: function (scope, element, attrs, ngModel) {<br />                     	if (!ngModel) return;<br />                         ngModel.$parsers.push(function (v) {  //传说中的验证器<br /> <br />                                 if (v != "xiaobin") {<br />                                     ngModel.$setValidity('noxiaobin', true); //通过获取从dom过来的值，然后进行验证，使用$setValidity('noxiaobin', true);改变noxiaobin的值，然后反馈会dom<br />                                     return v;<br />                                 } else {<br />                                     ngModel.$setValidity('noxiaobin', false);<br />                                     return undefined;<br />                                 }<br /> <br />                         });<br />                     }<br />                 }<br />             });</p>
<pre></pre>
<p> custom.directive('contenteditable', ['$sce', function($sce) {<br />			  return {<br />			    restrict: 'A', //指定该指令是为属性类型的指令<br />			    require: '?ngModel', // 与ngModel指令的相互交流<br />			    link: function(scope, element, attrs, ngModel) { //scope分别是指令作用的作用域，element触发指令的元素，attrs是element的属性集合，ngmodel是控制器就是引入的ngModel<br />			      if (!ngModel) return;</p>
<pre></pre>
<p> // output data to the view<br />			      ngModel.$render = function() {<br />			         element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));  //$viewValue的值进行format<br />			      };</p>
<pre></pre>
<p> //对element的监听<br />			      element.on('blur keyup change', function() {<br />			        scope.$evalAsync(read); //执行read方法<br />			      });<br />			      read(); // 初始化</p>
<pre></pre>
<p> // Write data to the model<br />			      function read() {<br />			        var html = element.html();<br />			        // When we clear the content editable the browser leaves a &lt;br&gt; behind<br />			        // If strip-br attribute is provided then we strip this out<br />			        if ( attrs.stripBr &amp;&amp; html == '&lt;br&gt;' ) {<br />			          html = '';<br />			        }</p>
<pre></pre>
<p> ngModel.$setViewValue(html); //获取ViewValue，设置$viewValue<br />			      }</p>
<p>			    }<br />			  };<br />			}]);</p>
<pre><span style="color: #000000;">&nbsp;</span></pre>
</div>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">form </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="myForm"</span><span style="color: #0000ff;">&gt;</span>
         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">contenteditable 
              name</span><span style="color: #0000ff;">="myWidget"</span><span style="color: #ff0000;"> ng-model</span><span style="color: #0000ff;">="userContent"</span><span style="color: #ff0000;">
              strip-br</span><span style="color: #0000ff;">="true"</span><span style="color: #ff0000;">
              required</span><span style="color: #0000ff;">&gt;</span>点击编辑<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">ng-show</span><span style="color: #0000ff;">="myForm.myWidget.$error.required"</span><span style="color: #0000ff;">&gt;</span>Required!<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>

          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text"</span><span style="color: #ff0000;"> name</span><span style="color: #0000ff;">="email"</span><span style="color: #ff0000;"> ng-model</span><span style="color: #0000ff;">="email"</span><span style="color: #ff0000;"> noxiaobin </span><span style="color: #0000ff;">/&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span </span><span style="color: #ff0000;">ng-show</span><span style="color: #0000ff;">="myForm.email.$error.noxiaobin"</span><span style="color: #0000ff;">&gt;</span>Value nerver have xiaobin!<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>
         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">hr</span><span style="color: #0000ff;">&gt;</span>
         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">textarea </span><span style="color: #ff0000;">ng-model</span><span style="color: #0000ff;">="userContent"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">textarea</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">form</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;以上有两个指令分别是</p>
<p>1、view-&gt;scope，配合<span class="pln">$setValidity<span class="pun">(<span class="pln">validationErrorKey<span class="pun">,<span class="pln">&nbsp;isValid<span class="pun">);进行表单验证，通过反馈回view的noxiaobin来判断是否显示</span></span></span></span></span></span></p>
<p><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun">2、scope-&gt;view，使用<span class="pln">$setViewValue<span class="pun">(<span class="pln">value<span class="pun">,<span class="pln">&nbsp;trigger<span class="pun">);设置view的值，然后触发$render,对其进行格式化</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun">3、代码下载：<a href="https://github.com/xiaobin5201314/AngularJS-Learning" target="_blank">https://github.com/xiaobin5201314/AngularJS-Learning</a><a href="https://github.com/xiaobin5201314/AngularJS-Learning/blob/master/block-example/表单操作-11/ng-model.html" target="_blank"><br /></a></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun">对于</span></span></span></span></span></span></span></span></span></span></span></span><em id="__mceDel" style="font-size: 14px; line-height: 1.5;">ngModel.NgModelController</em>确实有些绕，也有些地方还是不懂，不过也有些文章写得还是比较明晰的，如：<a href="http://sentsin.com/web/659.html" target="_blank">http://sentsin.com/web/659.html</a>，如果对<em id="__mceDel">ngModel.NgModelController</em>有那些更加全，或是更加详细的资料可以拿给我学习学习！！！</p>]]></description></item><item><title>学习笔记-AngularJs（七）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/24/4834246.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Thu, 24 Sep 2015 03:24:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/24/4834246.html</guid><description><![CDATA[<p>在学习笔记-AngularJs（六）提及了事件处理器和过滤器以及它们的例子，而我们知道之前我是使用$http服务去获得我们需要的json数据，但是$http是比较底层的用法，有时候我们想把获取json数据包装成一个服务，然后每个控制器只要直接依赖我们自己写的服务，就可以去获取需要的数据，那么就需要自定义服务，现在我们需要学习一下怎么定义自己的服务，于是我们在js中建了services.js，一不小心插入个链接，<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>，忽略，代码如下：</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">var</span> phoneService = angular.module(<span style="color: #800000;">'</span><span style="color: #800000;">phoneService</span><span style="color: #800000;">'</span>, [<span style="color: #800000;">'</span><span style="color: #800000;">ngResource</span><span style="color: #800000;">'</span><span style="color: #000000;">]);
 
phoneService.factory(</span><span style="color: #800000;">"</span><span style="color: #800000;">People</span><span style="color: #800000;">"</span><span style="color: #000000;">,function($resource){   //工程函数，自定义的服务尽量不要使用$,避免跟自带服务混淆
    </span><span style="color: #0000ff;">return</span> $resource(<span style="color: #800000;">'</span><span style="color: #800000;">json/:phoneId.json</span><span style="color: #800000;">'</span><span style="color: #000000;">, {}, {
        query: {method:</span><span style="color: #800000;">'</span><span style="color: #800000;">GET</span><span style="color: #800000;">'</span>, <span style="color: #0000ff;">params</span>:{phoneId:<span style="color: #800000;">'</span><span style="color: #800000;">phone</span><span style="color: #800000;">'</span>}, isArray:<span style="color: #0000ff;">true</span><span style="color: #000000;">}
      });
})<br />//工厂创建一个资源对象,让你与RESTful服务器端数据源交互。</span></pre>
</div>
<p>&nbsp;这里建立模块phoneService，至于为啥要怎么建，之前有讲过了，这里需要注意的是，依赖了ngResource模块，而且必须在index.html引入angular-resource.js文件，那么就可以使用$resource服务了。建立服务，可以使用factory、service，这里使用的是factory。在这里就不得不讲一下这个$resource服务了，使用方法：</p>
<div class="cnblogs_code">
<pre>$resource(url, [paramDefaults], [actions], options);</pre>
</div>
<p>url，指得是RESTful服务器端的地址，有这样的一些形式：</p>
<div class="cnblogs_code">
<pre>$resource(<span style="color: #800000;">'</span><span style="color: #800000;">http://example.com/resource.json</span><span style="color: #800000;">'</span>) <span style="color: #008000;">//</span><span style="color: #008000;">这里指向的是resource.json</span>
<span style="color: #000000;">
$resource(</span><span style="color: #800000;">'</span><span style="color: #800000;">http://example.com/:id.json</span><span style="color: #800000;">'</span>)  <span style="color: #008000;">//</span><span style="color: #008000;">通过传一个id参数过来，去获取对应的json</span>
$resource(<span style="color: #800000;">'</span><span style="color: #800000;">http://example.com/resource/:resource_id.:format</span><span style="color: #800000;">'</span>)<span style="color: #008000;">//</span><span style="color: #008000;">通过传一个resource_id和format参数过来，去获取对应的格式的数据模型</span></pre>
</div>
<p>paramDefaults，指得是默认参数，是一个对象，比如说：{resource_id:'1', salutation:'Hello'}，那么其实整个默认url就是'http://example.com/resource/resource_id/1?salutation=hello'，当参数{someParam: '@someProp'}是以@为前缀,那么这个参数的值将从相应的属性中提取data对象(调用一个操作方法时提供)。例如,如果defaultParam对象是{ someParam:@someProp }然后someParam将data.someProp的value。对于这个带@前缀的值，不大清楚是怎么回事，望知道的人告知一下！</p>
<p>action，可以自定义获取资源的行为，其语法如下：</p>
<div class="cnblogs_code">
<pre>{action1: {method:?, <span style="color: #0000ff;">params</span>:?, isArray:?, headers:?<span style="color: #000000;">, ...},
 action2: {method:</span>?, <span style="color: #0000ff;">params</span>:?, isArray:?, headers:?<span style="color: #000000;">, ...},
 ...}</span></pre>
</div>
<p>其对应的参数，还有url（资源路径的重写）、timeout（请求超时）、<code><span class="pln">responseType（请求数据类型）、function（data）{...}的<code><span class="pln">Response</span></code>函数，等等（更多属性可去官方文档看）！</span></code></p>
<p><span class="pln">比如说我们重新自定义query请求资源的行为：</span>query: {method:'GET', params:{phoneId:'phone'}, isArray:true}，那么调用该方法，就能获得phone.josn的数据。</p>
<p>也有这些默认的行为（其属性是与自定义资源行为的action是一样的）：</p>
<div class="cnblogs_code">
<pre>{ <span style="color: #800000;">'</span><span style="color: #800000;">get</span><span style="color: #800000;">'</span>:    {method:<span style="color: #800000;">'</span><span style="color: #800000;">GET</span><span style="color: #800000;">'</span><span style="color: #000000;">},
  </span><span style="color: #800000;">'</span><span style="color: #800000;">save</span><span style="color: #800000;">'</span>:   {method:<span style="color: #800000;">'</span><span style="color: #800000;">POST</span><span style="color: #800000;">'</span><span style="color: #000000;">},
  </span><span style="color: #800000;">'</span><span style="color: #800000;">query</span><span style="color: #800000;">'</span>:  {method:<span style="color: #800000;">'</span><span style="color: #800000;">GET</span><span style="color: #800000;">'</span>, isArray:<span style="color: #0000ff;">true</span><span style="color: #000000;">},
  </span><span style="color: #800000;">'</span><span style="color: #800000;">remove</span><span style="color: #800000;">'</span>: {method:<span style="color: #800000;">'</span><span style="color: #800000;">DELETE</span><span style="color: #800000;">'</span><span style="color: #000000;">},
  </span><span style="color: #800000;">'</span><span style="color: #800000;">delete</span><span style="color: #800000;">'</span>: {method:<span style="color: #800000;">'</span><span style="color: #800000;">DELETE</span><span style="color: #800000;">'</span>} };</pre>
</div>
<p>假如现在有怎么一个需求，需要我们在控制器文件中检索出phone.json中userId=123的一条数据，可以这样写：</p>
<div class="cnblogs_code">
<pre>//services.js（自定义服务文件）<br />phoneService.factory(<span style="color: #800000;">"</span><span style="color: #800000;">People</span><span style="color: #800000;">"</span><span style="color: #000000;">,function($resource){ 
    </span><span style="color: #0000ff;">return</span> $resource(<span style="color: #800000;">'</span><span style="color: #800000;">/user/:userId</span><span style="color: #800000;">'</span>, {userId:<span style="color: #800000;">'</span><span style="color: #800000;">@id</span><span style="color: #800000;">'</span><span style="color: #000000;">});
}) </span></pre>
</div>
<div class="cnblogs_code">
<pre><code class="lang-js"><span class="kwd">//controller.js（控制器文件）<br />var<span class="pln"> user <span class="pun">=<span class="pln"> People<span class="typ"><span class="pun">.<span class="kwd">get<span class="pun">({<span class="pln">userId<span class="pun">:<span class="lit">123<span class="pun">},<span class="pln"> <span class="kwd">function<span class="pun">()<span class="pln"> <span class="pun">{<span class="pln">
  user<span class="pun">.<span class="pln">abc <span class="pun">=<span class="pln"> <span class="kwd">true<span class="pun">;<span class="pln">
  user<span class="pun">.<span class="pln">$save<span class="pun">();<span class="pln">
<span class="pun">});</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<p>这里是这样的，获得userId=123的某个对象，然后在其回调函数将其user.abc进行修改，然后使用$save保存，然后再返回新的记录，赋给user，user是我们得到的资源对象实例，那么操作保存,删除,删除可用方法$+对应资源行为（eg:$save()）方法。这样就可以轻松地支持CRUD操作(创建、读取、更新、删除)在服务器端数据！想更好理解这种形式的curd，可以看一下这个官方的例子：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> Define CreditCard class</span>
<span style="color: #0000ff;">var</span> CreditCard = $resource(<span style="color: #800000;">'</span><span style="color: #800000;">/user/:userId/card/:cardId</span><span style="color: #800000;">'</span><span style="color: #000000;">,
 {userId:</span><span style="color: #800080;">123</span>, cardId:<span style="color: #800000;">'</span><span style="color: #800000;">@id</span><span style="color: #800000;">'</span><span style="color: #000000;">}, {
  charge: {method:</span><span style="color: #800000;">'</span><span style="color: #800000;">POST</span><span style="color: #800000;">'</span>, <span style="color: #0000ff;">params</span>:{charge:<span style="color: #0000ff;">true</span><span style="color: #000000;">}}
 });

</span><span style="color: #008000;">//</span><span style="color: #008000;"> We can retrieve a collection from the server</span>
<span style="color: #0000ff;">var</span> cards =<span style="color: #000000;"> CreditCard.query(function() {
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> GET: /user/123/card
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> server returns: [ {id:456, number:'1234', name:'Smith'} ];</span>

  <span style="color: #0000ff;">var</span> card = cards[<span style="color: #800080;">0</span><span style="color: #000000;">];
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> each item is an instance of CreditCard</span>
  expect(card instanceof CreditCard).toEqual(<span style="color: #0000ff;">true</span><span style="color: #000000;">);
  card.name </span>= <span style="color: #800000;">"</span><span style="color: #800000;">J. Smith</span><span style="color: #800000;">"</span><span style="color: #000000;">;
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> non GET methods are mapped onto the instances</span>
<span style="color: #000000;">  card.$save();
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> server returns: {id:456, number:'1234', name: 'J. Smith'};

  </span><span style="color: #008000;">//</span><span style="color: #008000;"> our custom method is mapped as well.</span>
  card.$charge({amount:<span style="color: #800080;">9.99</span><span style="color: #000000;">});
  </span><span style="color: #008000;">//</span><span style="color: #008000;"> POST: /user/123/card/456?amount=9.99&amp;charge=true {id:456, number:'1234', name:'J. Smith'}</span>
<span style="color: #000000;">});

</span><span style="color: #008000;">//</span><span style="color: #008000;"> we can create an instance as well</span>
<span style="color: #0000ff;">var</span> newCard = <span style="color: #0000ff;">new</span> CreditCard({number:<span style="color: #800000;">'</span><span style="color: #800000;">0123</span><span style="color: #800000;">'</span><span style="color: #000000;">});
newCard.name </span>= <span style="color: #800000;">"</span><span style="color: #800000;">Mike Smith</span><span style="color: #800000;">"</span><span style="color: #000000;">;
newCard.$save();
</span><span style="color: #008000;">//</span><span style="color: #008000;"> POST: /user/123/card {number:'0123', name:'Mike Smith'}
</span><span style="color: #008000;">//</span><span style="color: #008000;"> server returns: {id:789, number:'0123', name: 'Mike Smith'};</span>
expect(newCard.id).toEqual(<span style="color: #800080;">789</span>);</pre>
</div>
<p>好了，来看一下controller.js文件：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> phoneController = angular.module(<span style="color: #800000;">'</span><span style="color: #800000;">phoneController</span><span style="color: #800000;">'</span><span style="color: #000000;">,  []); 



phoneController.controller(</span><span style="color: #800000;">"</span><span style="color: #800000;">phone-list-controller</span><span style="color: #800000;">"</span>,[<span style="color: #800000;">'</span><span style="color: #800000;">$scope</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">People</span><span style="color: #800000;">'</span><span style="color: #000000;">,function($scope,People){
        $scope.phones </span>=<span style="color: #000000;"><span style="color: #ff0000;"> People.query(); </span> //重写的资源行为</span><span style="color: #000000;">
        $scope.order </span>= <span style="color: #800000;">'</span><span style="color: #800000;">name</span><span style="color: #800000;">'</span><span style="color: #000000;">;
}]);

phoneController.controller(</span><span style="color: #800000;">"</span><span style="color: #800000;">phone-detail-controller</span><span style="color: #800000;">"</span>,[<span style="color: #800000;">"</span><span style="color: #800000;">$scope</span><span style="color: #800000;">"</span>,<span style="color: #800000;">'</span><span style="color: #800000;">$routeParams</span><span style="color: #800000;">'</span>,<span style="color: #800000;">"</span><span style="color: #800000;">People</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">$location</span><span style="color: #800000;">"</span><span style="color: #000000;">,function($scope,$routeParams,People,$location){
 </span><span style="color: #0000ff;">if</span><span style="color: #000000;">($routeParams.phoneId){<br />　　//使用默认资源行为
  <span style="color: #ff0000;">  $scope.people </span></span><span style="color: #ff0000;">= People.get({phoneId: $routeParams.phoneId}, function(data) {
           $scope.main_image = data.images[0</span><span style="color: #000000;"><span style="color: #ff0000;">];
      });</span>

    }</span><span style="color: #0000ff;">else</span><span style="color: #000000;">{
        $location.path(</span><span style="color: #800000;">"</span><span style="color: #800000;">/phones</span><span style="color: #800000;">"</span><span style="color: #000000;">); 
    }
    $scope.setImage</span>=<span style="color: #000000;">function(url){ 
        
        $scope.main_image </span>=<span style="color: #000000;"> url;
    }  

    </span><span style="color: #008000;">/*</span><span style="color: #008000;">$location使用</span><span style="color: #008000;">*/</span><span style="color: #000000;">
    console.log($location.absUrl()); </span><span style="color: #008000;">//</span><span style="color: #008000;">"</span><span style="color: #008000; text-decoration: underline;">http://example.com/</span><span style="color: #008000;">#/some/path?foo=bar&amp;baz=xoxo" =&gt; 完整url</span>
    console.log($location.url()); <span style="color: #008000;">//</span><span style="color: #008000;"> "/some/path?foo=bar&amp;baz=xoxo" =&gt; url的search部分</span>
    console.log($location.protocol()); <span style="color: #008000;">//</span><span style="color: #008000;"> "http" =&gt;协议</span>
    console.log($location.host()); <span style="color: #008000;">//</span><span style="color: #008000;"> "example.com" =&gt; 主机</span>
    console.log($location.port()); <span style="color: #008000;">//</span><span style="color: #008000;"> "80" =&gt;端口号
    </span><span style="color: #008000;">//</span><span style="color: #008000;">console.log($location.path([path])); </span><span style="color: #008000;">//</span><span style="color: #008000;">  "/some/path" =&gt; 跳转至指定路由</span>
    console.log($location.search()); <span style="color: #008000;">//</span><span style="color: #008000;">{foo: 'bar', baz: 'xoxo'} =&gt; 以对象形式展现，还可以$location.search("foo","yahoo");进行修改</span>
    console.log($location.hash());  <span style="color: #008000;">//</span><span style="color: #008000;"> given url </span><span style="color: #008000; text-decoration: underline;">http://example.com/</span><span style="color: #008000;">#/some/path?foo=bar&amp;baz=xoxo#hashValue    $location.hash() == "hashValue"
　　//更详细的介绍可以去看官方文档</span><span style="color: #000000;">
}]); </span></pre>
</div>
<p>上面有着$loaciton服务的一些补充！那么学习的项目就这样搞定了，但是就只是入门而已，接下来需要好好阅读angularJs的官方文档，真正想搞懂，还是得去看文档！虽然是英文渣渣，但是确实必经之路！加油！源码下载：<a href="https://github.com/xiaobin5201314/AngularJS-Learning.git" target="_blank">https://github.com/xiaobin5201314/AngularJS-Learning.git</a></p>]]></description></item><item><title>学习笔记-AngularJs（六）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/23/4832257.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 23 Sep 2015 07:38:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/23/4832257.html</guid><description><![CDATA[<p>在学习笔记-AngularJs（五），通过引入bootstrap.css进行改写整个样式，这时学习项目也变得好看多了，现在我们又需要目录再进行一次改变，如下图：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150923145548225-860162651.png" alt="" /></p>
<p>这样就符合之前讲的对学习目录进行布置了！</p>
<p>angualrJs自带了一些默认的过滤器，如：</p>
<div class="cnblogs_code">
<pre>{{<span style="color: #800000;">"</span><span style="color: #800000;">xiaobin</span><span style="color: #800000;">"</span> |<span style="color: #000000;"> uppercase}}
{{</span><span style="color: #800000;">"</span><span style="color: #800000;">XIAOBIN</span><span style="color: #800000;">"</span> |<span style="color: #000000;"> lowercase}}
{{ </span><span style="color: #800080;">1304375948024</span> | date:<span style="color: #800000;">"</span><span style="color: #800000;">yyyy-MM-dd</span><span style="color: #800000;">"</span><span style="color: #000000;">}}
{{ {</span><span style="color: #800000;">"</span><span style="color: #800000;">foo</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">dddd</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">far</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">ddddddd</span><span style="color: #800000;">"</span>} | join}}</pre>
</div>
<p>现在我们来学一下怎么自定义过滤器，在js文件中添加filters.js，加入一下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> phoneFilter = angular.module(<span style="color: #800000;">'</span><span style="color: #800000;">phoneFilter</span><span style="color: #800000;">'</span><span style="color: #000000;">, []);
phoneFilter.filter(</span><span style="color: #800000;">"</span><span style="color: #800000;">checkHun</span><span style="color: #800000;">"</span><span style="color: #000000;">,function(){ 

    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> function(input){ //input表示的是需要过滤的参数

        </span><span style="color: #0000ff;">return</span> input ?   <span style="color: #800000;">'</span><span style="color: #800000;">\u2718</span><span style="color: #800000;">'</span>: <span style="color: #800000;">'</span><span style="color: #800000;">\u2713</span><span style="color: #800000;">'</span><span style="color: #000000;"> ; //这里是对人物的婚姻状态进行判断要嘛打勾要嘛打叉

    };

});</span></pre>
</div>
<p>当然这里建立phoneFilter模块，同时需要在app.js进行依赖，随便对之后的服务、指令等进行，代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> phonecat = angular.module(<span style="color: #800000;">'</span><span style="color: #800000;">phonecat</span><span style="color: #800000;">'</span>,  [<span style="color: #800000;">'</span><span style="color: #800000;">ngRoute</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">phoneController</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">phoneFilter</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">phoneService</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">ngResource</span><span style="color: #800000;">'</span>]);  <span style="color: #008000;">//</span><span style="color: #008000;">[....]依赖注入 </span></pre>
</div>
<p>那在模板使用自定义的过滤器，可以这样使用：</p>
<div class="cnblogs_code">
<pre>{{phone.is_h | checkHun }} //当然需要在之前的phone.json再对应去添加一个is_h婚姻状态</pre>
</div>
<p>对于angularJs也有事件处理器，都是通过ng-*的形式来触发写在controllers.js的控制器文件的，如：ng-click，ng-keydown等等！现在来看一下，对于之前phone-detail.html中，就只有怎么一句话："这是phoneId为{{phoneId}}的详情页"，十分简单，现在需要充实它，就拿一个大佬来看，结果就会变成这样<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150923151749944-126059258.png" alt="" width="1415" height="593" /></p>
<p>需要实现一个功能是点击相对应图片，对应上面的大图就会被替换成小图，可以使用ng-click来绑定一个函数实现这个功能，于是建立个1.json来储存数据，如下(内容可以自己去找)：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">{
  </span><span style="color: #800000;">"</span><span style="color: #800000;">intro</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">...</span><span style="color: #800000;">"</span><span style="color: #000000;">,
  </span><span style="color: #800000;">"</span><span style="color: #800000;">gaikuang</span><span style="color: #800000;">"</span><span style="color: #000000;">: {
      </span><span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">马云</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">n_name</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">风清扬（阿里内部的花名）</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">birth</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">1964年9月10日</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">y_name</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Jackma</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">from</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">中华人民共和国</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">zuji</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">汉族</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">birth_d</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">浙江省杭州市</span><span style="color: #800000;">"</span><span style="color: #000000;">
  },
  
  </span><span style="color: #800000;">"</span><span style="color: #800000;">jian_intro</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">...</span><span style="color: #800000;">"</span><span style="color: #000000;">,

  </span><span style="color: #800000;">"</span><span style="color: #800000;">beijing</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;"> 企业家</span><span style="color: #800000;">"</span><span style="color: #000000;">,

  </span><span style="color: #800000;">"</span><span style="color: #800000;">school</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">杭州师范学院，获外语学士学位</span><span style="color: #800000;">"</span><span style="color: #000000;">,

  </span><span style="color: #800000;">"</span><span style="color: #800000;">images</span><span style="color: #800000;">"</span><span style="color: #000000;">:[
            </span><span style="color: #800000;">"</span><span style="color: #800000;">image/yun.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">,
            </span><span style="color: #800000;">"</span><span style="color: #800000;">image/yun1.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">,
            </span><span style="color: #800000;">"</span><span style="color: #800000;">image/yun2.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">,
            </span><span style="color: #800000;">"</span><span style="color: #800000;">image/yun3.jpg</span><span style="color: #800000;">" //图片可以自己找</span><span style="color: #000000;">
          ],

  </span><span style="color: #800000;">"</span><span style="color: #800000;">others</span><span style="color: #800000;">"</span><span style="color: #000000;">: {

      </span><span style="color: #800000;">"</span><span style="color: #800000;">jiguan</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">浙江嵊州谷来镇，后父母移居杭州</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">xueli</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">本科</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">xuexing</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">o型</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">wife</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">张英</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">xingzuo</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">处女座</span><span style="color: #800000;">"</span><span style="color: #000000;">

  }
 
}</span></pre>
</div>
<p>我们可以使用之前讲过的那个$http服务来拉取数据，我需要实现的是从<strong>#/phones/{{phone.id}}中</strong>的phone.id来拉取数据，也就是id=1（可以怎么理解），还记得之前引入的ngRoute模块吗？它有个$routeParams服务，可以通过$routeParams.phoneId获取id了，那么就可以通过$http服务来获取了，控制器代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">phoneController.controller(</span><span style="color: #800000;">"</span><span style="color: #800000;">phone-detail-controller</span><span style="color: #800000;">"</span>,[<span style="color: #800000;">"</span><span style="color: #800000;">$scope</span><span style="color: #800000;">"</span>,<span style="color: #800000;">'</span><span style="color: #800000;">$routeParams</span><span style="color: #800000;">'</span>,<span style="color: #800000;">"</span><span style="color: #800000;">$http</span><span style="color: #800000;">"</span><span style="color: #000000;">,function($scope,$routeParams,$http){  //注入$routeParams服务
    $http.</span><span style="color: #0000ff;">get</span>(<span style="color: #800000;">"</span><span style="color: #800000;">json/</span><span style="color: #800000;">"</span>+<span style="color: #ff0000;">$routeParams.phoneId</span>+<span style="color: #800000;">"</span><span style="color: #800000;">.json</span><span style="color: #800000;">"</span><span style="color: #000000;">).success(function(data, status, headers, config) { 
          </span><span style="color: #0000ff;">if</span>(status==<span style="color: #800080;">200</span><span style="color: #000000;">){ 
                  $scope.people </span>=<span style="color: #000000;"> data;   
                  $scope.main_image </span>= data.images[<span style="color: #800080;">0</span><span style="color: #000000;">]; //需要初始化默认的大图
          }
      }).error(function() {
               $scope.message </span>= <span style="color: #800000;">"</span><span style="color: #800000;">获取不到此人的详细信息</span><span style="color: #800000;">"</span><span style="color: #000000;">
      });<br />　　//关键在这，事件处理器触发的函数
    $scope.setImage</span>=<span style="color: #000000;">function(url){ 
        $scope.main_image </span>=<span style="color: #000000;"> url;
    }  
}]);</span></pre>
</div>
<p>模板文件如下：</p>
<div class="cnblogs_code">
<pre>&lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">panel panel-primary</span><span style="color: #800000;">"</span>&gt;
    &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">panel-heading</span><span style="color: #800000;">"</span>&gt;人物简介&lt;/div&gt;
    &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">panel-body</span><span style="color: #800000;">"</span>&gt;
            &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">row</span><span style="color: #800000;">"</span>&gt;
              &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">col-xs-4</span><span style="color: #800000;">"</span>&gt;
                &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">thumbnail col-xs-12</span><span style="color: #800000;">"</span>&gt;
                  <span style="color: #ff0000;">&lt;img ng-src="{{main_image}}" alt=""&gt;</span>
                &lt;/div&gt;
                &lt;!--添加事件处理器的demo--&gt;
                &lt;div ng-repeat=<span style="color: #800000;">"</span><span style="color: #800000;">imgurl in people.images</span><span style="color: #800000;">"</span> <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">thumbnail col-xs-3</span><span style="color: #800000;">"</span>&gt;
                  &lt;img ng-src=<span style="color: #800000;">"</span><span style="color: #800000;">{{imgurl}}</span><span style="color: #800000;">"</span> <span style="color: #ff0000;"><strong>ng-click="setImage(imgurl);" </strong></span>alt=<span style="color: #800000;">""</span>&gt;
                &lt;/div&gt;                
              &lt;/div&gt;
              &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">col-xs-8</span><span style="color: #800000;">"</span>&gt;
                      &lt;table <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">table</span><span style="color: #800000;">"</span>&gt;
                          &lt;tr&gt;&lt;td colspan=<span style="color: #800000;">"</span><span style="color: #800000;">3</span><span style="color: #800000;">"</span>&gt;{{people.gaikuang.name}}&lt;/td&gt; &lt;/tr&gt;
                          &lt;tr&gt;
                              &lt;td&gt;个人背景&lt;/td&gt;
                              &lt;td&gt;职业：{{people.beijing}}&lt;/td&gt;
                              &lt;td&gt;毕业院校：{{people.school}}&lt;/td&gt;
                          &lt;/tr&gt;
                          &lt;tr&gt;
                              &lt;td&gt;个人概况&lt;/td&gt;
                              &lt;td&gt;中文名：{{people.gaikuang.name}} &lt;br&gt; 别名：{{people.gaikuang.n_name}} &lt;br&gt; 民族：{{people.gaikuang.zuji}} &lt;br&gt; 出生日期：{{people.gaikuang.birth}}&lt;/td&gt;
                              &lt;td&gt;外文名：{{people.gaikuang.y_name}} &lt;br&gt; 国籍：{{people.gaikuang.form}} &lt;br&gt; 出生地：{{people.gaikuang.birth_d}}&lt;/td&gt;
                          &lt;/tr&gt;
                          &lt;tr&gt;
                              &lt;td&gt;其他信息&lt;/td&gt;
                              &lt;td&gt;  籍贯：{{people.others.jiguan}} &lt;br&gt;   血型：{{people.others.xuexing}}&lt;/td&gt;
                              &lt;td&gt;  学历：{{people.others.xueli}}  &lt;br&gt; 妻子：{{people.others.wife}}  &lt;br&gt;   星座：{{people.others.xingzuo}}&lt;/td&gt;
                          &lt;/tr&gt;
                          &lt;tr&gt;&lt;td colspan=<span style="color: #800000;">"</span><span style="color: #800000;">3</span><span style="color: #800000;">"</span>&gt;{{people.jian_intro}}&lt;/td&gt;&lt;/tr&gt;
                      &lt;/table&gt;
              &lt;/div&gt;    
            &lt;/div&gt;
    &lt;/div&gt;
    &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">panel-footer</span><span style="color: #800000;">"</span>&gt;{{people.intro}}&lt;/div&gt;
&lt;/div&gt;</pre>
</div>
<p>到此为止，事件处理器和过滤器的例子就如同上述所讲了！</p>]]></description></item><item><title>学习笔记-AngularJs（五）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/22/4820426.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 22 Sep 2015 02:48:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/22/4820426.html</guid><description><![CDATA[<p>之前的页面太丑了，后来我引入了bootstrap.css，把样式进行修了一番，如下图（一不小心，插入个链接，忽略，<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>）：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150918220201586-2087304390.png" alt="" /></p>
<p>（链接：<a href="http://www.live086.cn/angularjs/#/phones" target="_blank">http://www.live086.cn/angularjs/#/phones</a>）</p>
<p>是不是觉得好看多了，这里我在原先phone.json里面多加了人物的图片，于是phone.json就变成：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">[

        {</span>"id":1, "name":"xioabin","number":"18824863982","age":12,"thumb":"image/nan.jpg"<span style="color: #000000;">},
　　　　　....  
]<br />//图片可以自己找</span></pre>
</div>
<p>控制器文件没有任何变化，模版文件加了bootstrap.css，有了明显的变化，代码如下：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;

&lt;html ng-app ng-controller="PhoneListCtrl"&gt;

  &lt;head&gt;

      &lt;meta charset='utf8' /&gt;

      &lt;title ng-bind="'Google Phone Gallery:' + query"&gt;&lt;/title&gt;  

      &lt;!-- &lt;title ng-bind-template="Google Phone Gallery:{{query}}"&gt;&lt;/title&gt; --&gt;

    &lt;script src="http://code.angularjs.org/angular-1.0.1.min.js"&gt;&lt;/script&gt;

    &lt;script src="script.js"&gt;&lt;/script&gt;

    &lt;link rel="stylesheet" href="bootstrap.min.css"&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;div class="example2"&gt;

 
    &lt;form class="form-inline" style="margin:20px 0;"&gt;
      &lt;div class="form-group"&gt;&lt;label <span style="color: #0000ff;">for</span>="select"&gt;帅选：&lt;/label&gt;&lt;select name="select" id="select" ng-model='order' class="form-control" &gt;&lt;option value="name"&gt;名字&lt;/option&gt;&lt;option value="age"&gt;年龄&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 
      &lt;div class="form-group"&gt;&lt;label <span style="color: #0000ff;">for</span>="search"&gt;搜索&lt;/label&gt;&lt;input id="search" name="search" type="text" ng-model='query' class="form-control"  /&gt;&lt;/div&gt;
    &lt;/form&gt;

         &lt;!--迭代器--&gt;

    &lt;table class="table"&gt;
        &lt;tr&gt;
          &lt;th class="text-center"&gt;头像&lt;/th&gt;
          &lt;th class="text-center"&gt;昵称&lt;/th&gt;
          &lt;th class="text-center"&gt;电话号码&lt;/th&gt;
          &lt;th class="text-center"&gt;年龄&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr ng-repeat='phone in phones | filter:query | orderBy:order'&gt;
          &lt;td class="text-center"&gt;&lt;a href="<strong><span style="color: #008000;">#/phones/{{phone.id}}</span></strong>"&gt;&lt;img <strong><span style="color: #008000;">ng-src</span></strong>="{{phone.thumb}}"  style="width:40px;height:40px;border-radius:50%;" alt="hahah"&gt;&lt;/a&gt;  &lt;!--添加ng-src识别绑定的数据--&gt;&lt;/td&gt;
          &lt;td class="text-center"&gt;{{phone.name}}&lt;/td&gt;
          &lt;td class="text-center"&gt;{{phone.number}}&lt;/td&gt;
          &lt;td class="text-center"&gt;{{phone.age}}&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;

 

    &lt;/div&gt;
 
  &lt;/body&gt;

&lt;/html&gt;</pre>
</div>
<p>其他内容不变，但是由于json文件里面我们加了人物的图片，我需要使用ng-src来绑定图片路径的，这个不能使用原始的src，不然src＝"{{phone.thumb}}"是加载不了图片资源的。</p>
<p>有没有注意到"<strong>#/phones/{{phone.id}}</strong>"为啥要怎样写，于是这里就涉及到路由的配置和怎么实现多视图之间的跳转了，于是我们对整个学习项目做了修改：目录如下：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150918222419304-351046455.png" alt="" /></p>
<p>这里就如同我们之前所讲，将控制器文件，服务文件，过滤器，指令都分开来写，index.html就是这个学习项目的布局模板，也可以理解成根模板，所有视图（其他模板tpls）会通过路由加载到这个模板的<strong><span style="color: #339966;">ng-view</span></strong>里面，代码如下：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;

&lt;html ng-app="phonecat"&gt;

  &lt;head&gt;

      &lt;meta charset='utf8' /&gt;

      &lt;title ng-bind="'Google Phone Gallery:' + query"&gt;&lt;/title&gt;  

      &lt;!-- &lt;title ng-bind-template="Google Phone Gallery:{{query}}"&gt;&lt;/title&gt; --&gt;

    &lt;!--ng-bind与ng-bind-template的使用方式--&gt;

    &lt;script src="lib/angular.min.js"&gt;&lt;/script&gt;
   <strong><span style="color: #339966;"> &lt;script src="lib/angular-route.js"&gt;&lt;/script&gt;</span></strong>
    &lt;script src="app.js"&gt;&lt;/script&gt;
    &lt;script src="controllers.js"&gt;&lt;/script&gt;

    &lt;link rel="stylesheet" href="bootstrap.min.css"&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;div <strong><span style="color: #339966;">ng-view</span></strong>&gt;&lt;/div&gt;
 
  &lt;/body&gt;

&lt;/html&gt;</pre>
</div>
<p>app.js，首先通过angular.module('phonecat', &nbsp;['ngRoute','phoneController']);建立模块，记住ng-app="phonecat",对于一个html页面想有多个ng-app，可以angualr.bootstrap(doucment,['phonecat',...]);在这里需要注入"ngRoute"服务，而且也必须引入angular-route.js，</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> phonecat = angular.module('phonecat',  ['ngRoute','phoneController']);  <span style="color: #008000;">//</span><span style="color: #008000;">[....]依赖注入</span>
<span style="color: #000000;">
phonecat.config([</span>'$routeProvider',<span style="color: #0000ff;">function</span><span style="color: #000000;">($routeProvider){
    $routeProvider.
        when(</span>"/phones",{templateUrl:"tpls/phones-list.html",controller:"phone-list-controller"<span style="color: #000000;">}).
        when(</span>"/phones/:phoneId",{templateUrl:"tpls/phones_detail.html",controller:"phone-detail-controller"<span style="color: #000000;">}).
        otherwise({redirectTo:</span>"/phones"<span style="color: #000000;">});
}])<br /><br />//这里的配置是这样的意思：域名＋项目目录＋/#/phones那么会跳转至</span><span style="line-height: 1.5;">tpls/phones-list.html，处理的控制器为</span><span style="line-height: 1.5;">phone-list-controller<br /></span></pre>
<pre><span>域名＋项目目录＋/#/phones/id</span><span style="line-height: 1.5;">那么会跳转至</span>tpls/phones_detail.html<span style="line-height: 1.5;">，处理的控制器为</span>phone-detail-controller</pre>
<pre>//使用config注入$routeProvider服务(只有引入ngRoute模块才可以使用)，<span class="kwd">when<span class="pun">(<span class="pln">path<span class="pun">,<span class="pln">&nbsp;route<span class="pun">)和otherwise(params)来定义路由，<br />　　when(path,route)   path: 访问的url； route是一个对象，里面controller（对应控制器），</span></span></span></span></span></span><span style="line-height: 1.5;">controllerAs,templateUrl(模板的路径)、tempalte、redirectTo<br />　　otherwise(params), 是匹配没有相应路由时，该怎么处理！</span><span style="line-height: 1.5;">{redirectTo:"/phones"</span><span style="line-height: 1.5;">} 跳转至/phones</span></pre>
</div>
<p>&nbsp;phone-list.html</p>
<div class="cnblogs_code">
<pre> &lt;div ng-controller="phone-list-controller"&gt;
    &lt;form class="form-inline" style="margin:20px 0;"&gt;
      &lt;div class="form-group"&gt;&lt;label <span style="color: #0000ff;">for</span>="select"&gt;帅选：&lt;/label&gt;&lt;select name="select" id="select" ng-model='order' class="form-control" &gt;&lt;option value="name"&gt;名字&lt;/option&gt;&lt;option value="age"&gt;年龄&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; 
      &lt;div class="form-group"&gt;&lt;label <span style="color: #0000ff;">for</span>="search"&gt;搜索&lt;/label&gt;&lt;input id="search" name="search" type="text" ng-model='query' class="form-control"  /&gt;&lt;/div&gt;
    &lt;/form&gt;

    &lt;!--迭代器--&gt;

    &lt;table class="table"&gt;
        &lt;tr&gt;
          &lt;th class="text-center"&gt;头像&lt;/th&gt;
          &lt;th class="text-center"&gt;昵称&lt;/th&gt;
          &lt;th class="text-center"&gt;电话号码&lt;/th&gt;
          &lt;th class="text-center"&gt;年龄&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr ng-repeat='phone in phones | filter:query | orderBy:order'&gt;
          &lt;td class="text-center"&gt;&lt;a href="#/phones/{{phone.id}}"&gt;&lt;img ng-src="{{phone.thumb}}"  style="width:40px;height:40px;border-radius:50%;" alt="hahah"&gt;&lt;/a&gt;  &lt;!--添加ng-src识别绑定的数据--&gt;&lt;/td&gt;
          &lt;td class="text-center"&gt;{{phone.name}}&lt;/td&gt;
          &lt;td class="text-center"&gt;{{phone.number}}&lt;/td&gt;
          &lt;td class="text-center"&gt;{{phone.age}}&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;

 &lt;/div&gt;</pre>
</div>
<p>phone-detail.html</p>
<div class="cnblogs_code">
<pre>这是phoneId为{{phoneId}}的详情页</pre>
</div>
<p>controllers.js</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> phoneController = angular.module('phoneController'<span style="color: #000000;">,  []); 
phoneController.controller(</span>"phone-list-controller",['$scope','$http',<span style="color: #0000ff;">function</span><span style="color: #000000;">($scope,$http){
      $http.get(</span>"phone.json").success(<span style="color: #0000ff;">function</span><span style="color: #000000;">(data, status, headers, config) {
          </span><span style="color: #0000ff;">if</span>(status==200){ $scope.phones = d<span style="color: #000000;">ata;  }
            console.log(status</span>+","+headers+","+<span style="color: #000000;">config);
            </span><span style="color: #008000;">//</span><span style="color: #008000;"> alert(JSON.stringify(data));</span><span style="color: #000000;">
      });
        $scope.order </span>= 'name'<span style="color: #000000;">;
}]);
phoneController.controller(</span>"phone-detail-controller",["$scope",'<span style="color: #008000;">$routeParams</span>',<span style="color: #0000ff;">function</span><span style="color: #000000;">($scope,$routeParams){
    $scope.phoneId </span>=<span style="color: #000000;"> $routeParams.phoneId;<br />　　//$routeParams是需要引入ngRoute模块，获得传过来的参数phoneId
}])</span></pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>学习笔记-AngularJs（四）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/18/4820332.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Fri, 18 Sep 2015 13:43:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/18/4820332.html</guid><description><![CDATA[<p>之前学习的事视图与模版，我们在控制器文件中直接定义一个数组，让其在模版文件中用ng-repeat指令构造一个迭代器，定义的数组<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>如同以下：</p>
<div class="cnblogs_code">
<pre>    $scope.phones =<span style="color: #000000;"> [
        {</span>'name':'xioabin','number':'18824863682','age':'12'<span style="color: #000000;">},
        {</span>'name':'xioalong','number':'18824863683','age':'19'<span style="color: #000000;">},
        {</span>'name':'xiaohua','number':'18824863684','age':'5'<span style="color: #000000;">},
        {</span>'name':'xiaoMING','number':'18824863685','age':'1'<span style="color: #000000;">},
        {</span>'name':'xiaoTU','number':'18824863686','age':'2'<span style="color: #000000;">},
        {</span>'name':'xiaoKE','number':'18824863687','age':'40'<span style="color: #000000;">},
    ];</span></pre>
</div>
<p>这种形式往往不是我们所要的，我们通常会使用常用ajax技术去获取数据，在angular也有类似的服务来实现XHR，那就是 $http，使用怎么一个服务，需要将代码放置在本地服务器或是web站点上，首先先准备phone.json文件，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">[

        {</span>"name":"xioabin","number":"18824863682","age":"12"<span style="color: #000000;">},

        {</span>"name":"xioalong","number":"18824863683","age":"19"<span style="color: #000000;">},

        {</span>"name":"xiaohua","number":"18824863684","age":"5"<span style="color: #000000;">},

        {</span>"name":"xiaoMING","number":"18824863685","age":"1"<span style="color: #000000;">},

        {</span>"name":"xiaoTU","number":"18824863686","age":"2"<span style="color: #000000;">},

        {</span>"name":"xiaodfs","number":"18824863687","age":"46"<span style="color: #000000;">},

        {</span>"name":"xiaodfE","number":"18824863682","age":"46"<span style="color: #000000;">},

        {</span>"name":"xiaobh","number":"18824863680","age":"48"<span style="color: #000000;">},

        {</span>"name":"xiaogg","number":"18824863687","age":"10"<span style="color: #000000;">},

        {</span>"name":"xiaouu","number":"18824863686","age":"20"<span style="color: #000000;">},

        {</span>"name":"xiaoKds","number":"18824863682","age":"30"<span style="color: #000000;">},

        {</span>"name":"xiaoKEdad","number":"18824863689","age":"60"<span style="color: #000000;">},

        {</span>"name":"xiaoKb","number":"18824863683","age":"90"<span style="color: #000000;">},

        {</span>"name":"xiaofa","number":"18824863685","age":"17"<span style="color: #000000;">}

    ]</span></pre>
</div>
<p>内容可以自己设置，模版文件代码与之前大同小异：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;

&lt;html ng-app ng-controller="PhoneListCtrl"&gt;

  &lt;head&gt;

      &lt;meta charset='utf8' /&gt;

      &lt;title ng-bind="'Google Phone Gallery:' + query"&gt;&lt;/title&gt;  

      &lt;!-- &lt;title ng-bind-template="Google Phone Gallery:{{query}}"&gt;&lt;/title&gt; --&gt;

    &lt;script src="http://code.angularjs.org/angular-1.0.1.min.js"&gt;&lt;/script&gt;

    &lt;script src="script.js"&gt;&lt;/script&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;div class="example2"&gt;<span style="color: #000000;">

        Select:  

        </span>&lt;select name="select" id="select" ng-model='order'&gt;

            &lt;option value="name"&gt;名字&lt;/option&gt;

            &lt;option value="age"&gt;年龄&lt;/option&gt;

        &lt;/select&gt;                        
<span style="color: #000000;">
        Search: </span>&lt;input name="search" type="text" ng-model='query' /&gt;

         &lt;ul&gt;

         &lt;!--迭代器--&gt;
    &lt;li&gt;
      &lt;span&gt;序号&lt;/span&gt;&amp;nbsp;&amp;nbsp; 
      &lt;span&gt;姓名&lt;/span&gt;&amp;nbsp;&amp;nbsp; 
      &lt;span&gt;号码&lt;/span&gt;&amp;nbsp;&amp;nbsp; 
      &lt;span&gt;年龄&lt;/span&gt;
    &lt;/li&gt;
         &lt;li ng-repeat='phone in phones | filter:query | orderBy:order'&gt;

               &lt;span&gt;{{$index+1}}&lt;/span&gt;&amp;nbsp;&amp;nbsp;  &lt;span&gt;{{phone.name}}&lt;/span&gt;&amp;nbsp; &amp;nbsp; &lt;span&gt;{{phone.number}}&lt;/span&gt;&amp;nbsp; &amp;nbsp; &lt;span&gt;{{phone.age}}&lt;/span&gt;

         &lt;/li&gt;

         &lt;/ul&gt;

    &lt;/div&gt;

  &lt;/body&gt;

&lt;/html&gt;

 </pre>
</div>
<p>不同的就是控制器文件的不同，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;">注入服务$http</span>
<span style="color: #0000ff;">function</span><span style="color: #000000;"> PhoneListCtrl($scope,$http){
      $http.get(</span>"phone.json").success(<span style="color: #0000ff;">function</span><span style="color: #000000;">(data, status, headers, config) {
          </span><span style="color: #0000ff;">if</span>(status==200){ $scope.phones =<span style="color: #000000;"> data;  }
        console.log(status</span>+","+headers+","+<span style="color: #000000;">config);
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> alert(JSON.stringify(data));</span>
<span style="color: #000000;">      });
        $scope.order </span>= 'name'<span style="color: #000000;">;
}</span></pre>
</div>
<p>这里传入了一个$http，那么我们就可以通过$http.get(路径).success(function(data,status){/*成功获取数据，之后该干嘛？*/})，data是返回的数据，status是状态码，header和config可以打印出来看一下，应该是一些配置和头部吧！这样$scope.phones就与之前一样是一个数组了！</p>
<p>官网的$http是这样的形式，可以参考着写：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">$http({  
        url:</span>'...'<span style="color: #000000;">,
           method:</span>'...'<span style="color: #000000;">,
           data:</span>'...'<span style="color: #000000;">,
          params:</span>'...'<span style="color: #000000;">,
          cache:</span>'...'<span style="color: #000000;">
      })
         .success(</span><span style="color: #0000ff;">function</span><span style="color: #000000;">(){....})
         .error(</span><span style="color: #0000ff;">function</span>() {.....});</pre>
</div>
<p>如果我们的控制器按上面那样写的话，在压缩代码时候会出错，那么有这两种方法可以解决这个问题：</p>
<p>为了克服压缩引起的问题，只要在控制器函数里面给$inject属性赋值一个依赖服务标识符的数组，就像被注释掉那段最后一行那样：</p>
<p>PhoneListCtrl.$inject = ['$scope', '$http'];</p>
<p>另一种方法也可以用来指定依赖列表并且避免压缩问题&mdash;&mdash;使用Javascript数组方式构造控制器：把要注入的服务放到一个字符串数组（代表依赖的名字）里，数组最后一个元素是控制器的方法函数：</p>
<p>var PhoneListCtrl = ['$scope', '$http', function($scope, $http) { /* constructor body */ }];</p>
<p>这就是angularjs的<strong>依赖注入</strong>了！当控制器构造的时候，AngularJS的依赖注入器会将这些服务注入到你的控制器中。当然，依赖注入器也会处理所需服务可能存在的任何传递性依赖（一个服务通常会依赖于其他的服务）。</p>
<p>注意不要使用&lsquo;$&rsquo;前缀来命名你自己的服务和模型（就是自己可以定义自己的服务，像$http），否则可能会产生名字冲突。</p>
<p>&nbsp;</p>]]></description></item><item><title>学习笔记-AngularJs（三）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/16/4811756.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 16 Sep 2015 10:02:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/16/4811756.html</guid><description><![CDATA[<p>学习笔记-AngularJs（二）写了个所有程序语言入门时都必须要写的Hello World，那么从现在开始做那个之前说过的互联网大佬介绍的学习例子，当然这里开始会慢慢按照之前说过的目录来搭建这个学习的demo，将控制器、过滤器、指令、服务、基本配置都独立成一个个js文件，直接贴张效果图（<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>，一不小心）：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150916172728054-698224727.png" alt="" />（有点简陋，之后再把样式写好看些！）</p>
<p>&nbsp;</p>
<p>这里实现的功能是这样的，在前台遍历phones的对象数组，然后可以按照年龄和名字排序，也可以通过输入字符串过滤检索。代码如下：</p>
<p>html：</p>
<div class="cnblogs_code">
<p>&lt;!doctype html&gt;<br />&lt;html ng-app ng-controller="PhoneListCtrl"&gt;<br />  &lt;head&gt;<br />  	&lt;meta charset='utf8' /&gt;<br />  	&lt;title ng-bind="'Google Phone Gallery:' + query"&gt;&lt;/title&gt;  <br />  	&lt;!-- &lt;title ng-bind-template="Google Phone Gallery:{{query}}"&gt;&lt;/title&gt; --&gt;<br />    &lt;script src="http://code.angularjs.org/angular-1.0.1.min.js"&gt;&lt;/script&gt;<br />    &lt;script src="script.js"&gt;&lt;/script&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;div class="example2"&gt;<br />    	Select:  <br />    	&lt;select name="select" id="select" ng-model='order'&gt;<br />    		&lt;option value="name"&gt;名字&lt;/option&gt;<br />    		&lt;option value="age"&gt;年龄&lt;/option&gt;<br />    	&lt;/select&gt;						<br />    	Search: &lt;input name="search" type="text" ng-model='query' /&gt;<br /> 		&lt;ul&gt;<br /> 		&lt;!--迭代器--&gt;<br /> 		&lt;li ng-repeat='phone in phones | filter:query | orderBy:order'&gt;<br /> 			    {{phone.name}}<br />   				&lt;p&gt;{{phone.number}}&lt;/p&gt;<br /> 		&lt;/li&gt;<br /> 		&lt;/ul&gt;<br />    &lt;/div&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;<br /> </p>



</div>
<p>js：</p>
<div class="cnblogs_code">
<p>function PhoneListCtrl($scope){<br />	$scope.phones = [<br />		{'name':'xioabin','number':'18824863682','age':'12'},<br />		{'name':'xioalong','number':'18824863683','age':'19'},<br />		{'name':'xiaohua','number':'18824863684','age':'5'},<br />		{'name':'xiaoMING','number':'18824863685','age':'1'},<br />		{'name':'xiaoTU','number':'18824863686','age':'2'},<br />		{'name':'xiaoKE','number':'18824863687','age':'40'},<br />	];<br />		$scope.order = 'name';</p>
<p>}</p>



</div>
<p>代码不多，但是也有挺多知识点在里面的，首先我们使用no-repeat遍历js文件里面的phones对象数组，于是后面在html中出现了<strong>ng-repeat='phone in phones | filter:query | orderBy:order'，</strong>那这是这样解释的，遍历phones，按照<strong>query</strong>过滤，<strong>order</strong>排序，而filter和orderBy则是angularJs的迭代器，相应的自带迭代器还有：currency（货币转换）、json（json格式转换）、date（日期转换）、lowercase、uppercase（大小写转换）等。而query和order是input中ng-model绑定的数据，那这样就可以实时拿着条件检索数据。这里有几点是要讲的：</p>
<p>ng-app &nbsp; &nbsp;标识以下内容就归angularjs管理</p>
<p>ng-controller 指得是包裹的内容中是在控制器PhoneListCtrl的控制下，在其作用域下去操作变量和函数</p>
<p><strong>&lt;title ng-bind="'Google Phone Gallery:' + query"&gt;&lt;/title&gt;&nbsp;</strong><br /><strong>&lt;title ng-bind-template="Google Phone Gallery:{{query}}"&gt;&lt;/title&gt;</strong></p>
<p>这里是两种数据绑定的形式，<strong>ng-bind和<strong>ng-bind-template，异同上面已经很明显地体现出来了！</strong></strong>当然还有其他的用途，就是有时候我们是这样写的&lt;span&gt;{{bind}}&lt;/span&gt;的，然后在拼命刷新页面的时候，会经常看到{{bind}}的闪现，那么用ng-bind和ng-bind-template就可以解决了，像这样&lt;span ng-bind="bind"&gt;&lt;/span&gt;。</p>]]></description></item><item><title>frameset，iframe框架之间如何互相调用变量、函数</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/16/4812732.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 16 Sep 2015 03:41:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/16/4812732.html</guid><description><![CDATA[<p>以往一直在编写的都是前台的UI，很少使用到frameset、iframe，对其了解也是十分有限，只是知道其可以为其当前页面引入html文件成为当前页的一部分，但是这两天在做后台UI界面的时候，发现这样的框架也是有相当多知识点在里面的。那框架是啥？可以这样说：通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。每份HTML文档称为一个框架，并且每个框架都独立于其他的框架。那么关于框架，有几个方面是需要我了解的：</p>
<p><strong>（1）获得html页面上的frame</strong></p>
<p>　　window.frames可以获得本页面上所有frame集合，用法与document.forms,document.imgs的用法相似，这是这里用的是window对象，获取某个框架可以这样做window.frames[0]、window.frames['frameName']、frames['frameName']、frames[0]、self.frames[0]，此处self与window等价，相当于本页面的window对象。</p>
<p>这里也还要再看两个属性,contentWindow、contentDocument两个属性，也是可以用来获取子窗口，框架的window对象的。</p>
<p>contentWindow 兼容各个浏览器，可取得子窗口的 window 对象。</p>
<p>contentDocument Firefox 支持，&gt; ie8 的ie支持。可取得子窗口的 document 对象。</p>
<p>假如我要刷新本页面中第一个框架的页面，可以怎么做：</p>
<div class="cnblogs_code">
<pre>window.frames[0].contentWindow.location.reload();</pre>
</div>
<p><strong>（2）父框架调用子框架的变量或函数</strong></p>
<p>结合上面说的获得页面上的frame，那么调用子框架的变量或是函数可以这样来：</p>
<div class="cnblogs_code">
<pre>frames[0<span style="color: #000000;">].a;
frames[</span>0].refresh();<br />alert(frames[0].location.href);</pre>
</div>
<p>这是调用第一个框架里面的a变量和refresh函数。</p>
<p><strong>（3）子框架调用父框架的变量或函数</strong></p>
<p>对于子框架调用父框架的这种情况下，window有个属性叫parent，用来调用上层框架的，所以可以这样来：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">window.parent.a;
window.parent.refresh();</span></pre>
</div>
<p>这是调用子框架调用父框架的a变量和refresh函数。</p>
<p><strong>（4）兄弟框架之间的调用</strong></p>
<p>&nbsp;可以通过它们的父框架来相互调用，可以这样做</p>
<div class="cnblogs_code">
<pre>self.parent.frames['child1'<span style="color: #000000;">];
self.parent.frames[</span>'child2'];</pre>
</div>
<p><strong>（5）多层框架的调用</strong></p>
<div class="cnblogs_code">
<pre>window.frames[0].frames[2<span style="color: #000000;">];
window.frames[</span>'child_1'].frames['sub_child_3'];</pre>
</div>
<p><strong>（6）顶层框架</strong></p>
<p>首先需要判断是否为顶层框架，也就是根，可以这样来做：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">if</span>(self==<span style="color: #000000;">window.top){
        </span><span style="color: #008000;">//</span><span style="color: #008000;">....</span>
<span style="color: #000000;">}
</span><span style="color: #008000;">/*</span><span style="color: #008000;">window的另外一个属性top，它表示对顶层框架的引用，这可以用来判断一个框架自身是否为顶层框架</span><span style="color: #008000;">*/</span></pre>
</div>
<p>基本关于frameset和iframe之间的互相调用知识点就这些，这个嘛，忽略，<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>！</p>]]></description></item><item><title>学习笔记-AngularJs（二）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/15/4785348.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 15 Sep 2015 06:51:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/15/4785348.html</guid><description><![CDATA[<p>在接下来学习angularjs中，我按照的就是之前&nbsp;学习笔记-AngularJs（一）所讲的目录来搭建一个学习的项目，做一个互联网大佬人物简介的例子，当然也可以使用angualrjs上面提供的官方例子，phonecat，其实大同小异，都是差不多的，可以用git下载下这个学习环境&nbsp;git clone https://github.com/angular/angular-phonecat ，然后</p>
<div class="cnblogs_code">
<pre>cd angular-<span style="color: #000000;">phonecat
node scripts</span>/web-server.js</pre>
</div>
<p>记住不要关闭命令行，就可以测试了！</p>
<p>这里先写hello world开始：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;
&lt;html ng-app&gt;
    &lt;head&gt;
        &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">http://code.angularjs.org/angular-1.0.1.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;<span style="color: #000000;">
        Hello {{</span><span style="color: #800000;">'</span><span style="color: #800000;">World</span><span style="color: #800000;">'</span>}}!
    &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
<p>就这样hello world就简单地写好了，{{'world'}}这里面就是一个表达式，这里这个表达式是个字符串，但我们要把它改成Hello * ，World可以动态改变任意字符串，可以这样写：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;
&lt;html ng-app&gt;
    &lt;head&gt;
        &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">http://code.angularjs.org/angular-1.0.1.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;<span style="color: #000000;">    
        Your name: </span>&lt;input type=<span style="color: #800000;">"</span><span style="color: #800000;">text</span><span style="color: #800000;">"</span> ng-model=<span style="color: #800000;">"</span><span style="color: #800000;">yourname</span><span style="color: #800000;">"</span> placeholder=<span style="color: #800000;">"</span><span style="color: #800000;">World</span><span style="color: #800000;">"</span>&gt;
        &lt;hr&gt;<span style="color: #000000;">
        Hello  {{ yourname </span>||<span style="color: #800000;">'</span><span style="color: #800000;">World</span><span style="color: #800000;">'</span>}}!
    &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
<p>ng-model绑定了一个yourname的变量（双向数据绑定），这样'World'即可以改变成其他的字符串了！那我们还想说把它得到的字符串用alert弹出来，可以怎么做：</p>
<p>html：</p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;
&lt;html ng-app&gt;
  &lt;head&gt;
    &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">http://code.angularjs.org/angular-1.0.1.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
    &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">script.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">example2</span><span style="color: #800000;">"</span> ng-controller=<span style="color: #800000;">"</span><span style="color: #800000;">Cntl1</span><span style="color: #800000;">"</span>&gt;<br />　　　　&lt;h1&gt;{{init}}&lt;/h1&gt;<br /><span style="color: #000000;">
      Name: </span>&lt;input ng-model=<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> type=<span style="color: #800000;">"</span><span style="color: #800000;">text</span><span style="color: #800000;">"</span>/&gt;
      &lt;button ng-click=<span style="color: #800000;">"</span><span style="color: #800000;">greet()</span><span style="color: #800000;">"</span>&gt;Greet&lt;/button&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;

</pre>
</div>
<p>js:</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">function Cntl1($window, $scope){
  $scope.name </span>= <span style="color: #800000;">'</span><span style="color: #800000;">World</span><span style="color: #800000;">'</span>;<span style="color: #008000;">//</span><span style="color: #008000;">实现数据双向绑定</span>
　$scope.init = 'Hello xiaobin';<span style="color: #000000;">
  $scope.greet </span>=<span style="color: #000000;"> function() {
    ($window.mockWindow </span>|| $window).alert(<span style="color: #800000;">'</span><span style="color: #800000;">Hello </span><span style="color: #800000;">'</span> +<span style="color: #000000;"> $scope.name);
  }
}</span></pre>
<pre>&lt;!--补充：表达式计算是发生在作用域中的。Javascript默认是以window为作用域的。AngularJS要使用window作用域的话得用$window来指向全局window对象。 比如说，你使用window中定义的alert()方法，在AngularJS表达式中必须写成$window.alert()才行。这是为了防止意外进入全局作用域（各种bug的来源）而设计的。 --&gt;</pre>
<pre></pre>
</div>
<p>这里可以看到html的模板里面ng-model绑定了一个变量name，js里面的Cntl1控制器<span style="line-height: 1.5;">在scope作用域中也定义了一个那么变量$scope.name，这里就可以很深刻体现出数据的双向绑定了，两处的值的改变都会影响另外一个的值变化。上面给button绑定了一个ng-click指令，没错，里面的greet（）函数正是我们在控制器文件里面定义的函数，通过这种方式我们实现了视图和控制器的交互，至于谁是模板，谁是控制器，上面的代码已经很详细！</span></p>
<p><span style="line-height: 1.5;">那么如果是有这样的另外要求，需要在视图遍历某个数组，那可以这样做：</span></p>
<p><span style="line-height: 1.5;">html:</span></p>
<div class="cnblogs_code">
<pre>&lt;!doctype html&gt;
&lt;html ng-app&gt;
  &lt;head&gt;
    &lt;meta charset=<span style="color: #800000;">'</span><span style="color: #800000;">utf8</span><span style="color: #800000;">'</span>/&gt;
    &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">http://code.angularjs.org/angular-1.0.1.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
    &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">script.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div ng-controller=<span style="color: #800000;">"</span><span style="color: #800000;">Cntl2</span><span style="color: #800000;">"</span> <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">expressions</span><span style="color: #800000;">"</span>&gt;<span style="color: #000000;">
      {{hello}}
      </span>&lt;br&gt;<span style="color: #000000;">
      Expression:
      </span>&lt;input type=<span style="color: #800000;">'</span><span style="color: #800000;">text</span><span style="color: #800000;">'</span> ng-model=<span style="color: #800000;">"</span><span style="color: #800000;">expr</span><span style="color: #800000;">"</span> size=<span style="color: #800000;">"</span><span style="color: #800000;">80</span><span style="color: #800000;">"</span>/&gt;
      &lt;button ng-click=<span style="color: #800000;">"</span><span style="color: #800000;">addExp(expr)</span><span style="color: #800000;">"</span>&gt;Evaluate&lt;/button&gt;
      &lt;ul&gt;
       &lt;li ng-repeat=<span style="color: #800000;">"</span><span style="color: #800000;">exprd in exprs</span><span style="color: #800000;">"</span>&gt;<span style="color: #000000;">
         [ </span>&lt;a href=<span style="color: #800000;">""</span> ng-click=<span style="color: #800000;">"</span><span style="color: #800000;">removeExp($index)</span><span style="color: #800000;">"</span>&gt;X&lt;/a&gt;<span style="color: #000000;"> ]
         </span>&lt;tt&gt;{{exprd}}&lt;/tt&gt; =&gt; &lt;span ng-bind=<span style="color: #800000;">"</span><span style="color: #800000;">$parent.$eval(exprd)</span><span style="color: #800000;">"</span>&gt;&lt;/span&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
<p>js:</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">function</span> Cntl2($scope) { <span style="color: #008000;">//</span><span style="color: #008000;">$scope注入的作用域</span>
  <span style="color: #0000ff;">var</span> exprs = $scope.exprs = [];  <span style="color: #008000;">//</span><span style="color: #008000;">这是通过$scope.创建的数组</span>
  $scope.expr = '3*10|currency'; <span style="color: #008000;">//</span><span style="color: #008000;">添加默认模型属性，对应模板的input框中相对应有模型变量的默认值</span>
  $scope.hello = '小斌开始学习angularJs拉！'<span style="color: #000000;">;
  $scope.addExp </span>= <span style="color: #0000ff;">function</span><span style="color: #000000;">(expr) {
     exprs.push(expr);</span><span style="color: #008000;">//</span><span style="color: #008000;">压入数组(push)</span>
<span style="color: #000000;">  };

  $scope.removeExp </span>= <span style="color: #0000ff;">function</span><span style="color: #000000;">(index) {
    exprs.splice(index, </span>1); <span style="color: #008000;">//</span><span style="color: #008000;">删除某个数组项(splice)</span>
<span style="color: #000000;">  };
}

</span><span style="color: #008000;">//</span><span style="color: #008000;">模型和视图分离，但是他们两者确实是同步的</span></pre>
</div>
<p>这里感觉会比之前两个例子有些复杂，这是希望通过在input框填写内容，点击确定按钮，下面列表会多增加一项内容！这里面绑定的addExp和removeExp函数是执行增加内容项和删除内容项的作用，每增加一个就会往exprs压入一个数组项，在视图是这样输出来的，通过ng-repeat = "exprd in exprs "添加到li标签下，然后遍历出来的。</p>
<p>补充：ng-bind指得是绑定某个内容，输出到span标签里面，对应的还有ng-template-bind，之后详学<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>！</p>
<pre>$parent.$eval(exprd)指得是执行exprd，可以看一下上面的代码， &lsquo;3*10|currency&rsquo;其实加了货币过滤器（angular自带），至于$parent不是很理解，有知道的人就告诉我一下呢！</pre>]]></description></item><item><title>基于thinkphp的后台管理系统模板快速搭建</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/15/4809429.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 15 Sep 2015 04:06:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/15/4809429.html</guid><description><![CDATA[<p>当我们在搭建网站的时候，后端开发人员在编写后台的管理系统的时候，往往会因为缺少一个合适的后台管理系统的模板，而必须去重新编写一个，这几天由于工作上的安排，需要去研究一下<a title="thinkcmf" href="http://demo.thinkcmf.com/admin" target="_blank">thinkcmf</a>的后台管理系统，于是发现那个模式是相当不错，感觉基本每个后台管理系统都可以套用，我把它的主题框架划分了4个大块，三级菜单栏、内容iframe、标签栏、顶栏，如下图：</p>
<p><img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150915103017961-1404588808.png" alt="" width="950" height="441" /></p>
<p>是不是觉得挺可以的？是不是有种所有后台管理系统都可以套用的赶脚勒？由于整个后台过于庞大，但我们又只是要其这样的主体UI框架，其他的都不要，于是我把它重新复制粘贴了一下，把我们需要的这个UI的实现给提取出来了，</p>
<p>查看效果：<a href="http://www.live086.cn/Text/" target="_blank">http://www.live086.cn/Text/</a>（空间2015/09/23会停用，所以可以下载面的源码，直接放在本地服务器(wampserver)就可以运行）</p>
<p>获取源码：<a href="http://pan.baidu.com/s/1gdEqUYJ" target="_blank">http://pan.baidu.com/s/1gdEqUYJ</a>&nbsp; 密码：c951</p>
<p>这个嘛，<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a></p>
<p>这个UI比较特别的地方在，我们在选择三级菜单栏时，右侧的内容iframe会即时的更换，所选择的菜单项也会以标签的形式出现在标签栏上，可以随意切换，关闭，同时也可以点击<img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150915104826429-1628045635.png" alt="" />刷新当前的内容iframe，整个操作起来舒服简单方便，其代码主要从几个方面来实现这些功能：</p>
<div class="cnblogs_code">
<pre>openapp(url, appid, appname, selectObj) </pre>
</div>
<p>这是一个核心的函数，就是打开与菜单栏或是标签栏相对应的iframe，url是iframe的路径，thinkphp用U方法生成，appid是iframe的唯一标识，必传，在切换标签栏的时候和iframe隐藏与否有很重要的作用，否则会出现点击菜单栏没有效果的，具体可以下载源码去看，appname则是标签显示名称，selectObj是触发对象</p>
<div class="cnblogs_code">
<pre>$current_iframe[0].contentWindow.location.reload();</pre>
</div>
<p>而刷新功能则是使用到iframe的属性contentWindow,相当于获得iframe的window对象，于是可以达到刷新的作用，对于框架之间互相调用函数和变量，可前往看这篇博客<a href="http://www.cnblogs.com/wuxiaobin/p/4812732.html" target="_blank">http://www.cnblogs.com/wuxiaobin/p/4812732.html</a></p>
<p>至于三级菜单怎么实现？关闭标签的实现？其他细节功能可以查看源码去看！</p>]]></description></item><item><title>学习笔记－AngularJs （一）</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/09/05/4782443.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Sat, 05 Sep 2015 03:01:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/09/05/4782443.html</guid><description><![CDATA[<p>最近对AngularJs产生了浓厚的学习兴趣，于是便搜罗所有资料，开始学习起来，也希望把学习过程记录下来。</p>
<p>首先学习之前，需要对AngularJs进行个大概的了解：</p>
<p>AngularJS[1]<a class="sup-anchor" name="ref_[1]_9717543"></a>&nbsp;&nbsp;诞生于2009年，由Misko Hevery 等人创建，后为Google所收购。是一款优秀的前端JS框架，已经被用于Google的多款产品当中。AngularJS有着诸多特性，最为核心的是：MVVM、模块化、自动化双向数据绑定、语义化标签、依赖注入等等。</p>
<div class="para">AngularJS使用了不同的方法，它尝试去补足HTML本身在构建应用方面的缺陷。AngularJS通过使用我们称为标识符(directives)的结构，让浏览器能够识别新的语法。例如：</div>
<div class="para">使用双大括号{{}}语法进行数据绑定；</div>
<div class="para">使用DOM控制结构来实现迭代或者隐藏DOM片段；</div>
<div class="para">支持表单和表单的验证；</div>
<div class="para">能将逻辑代码关联到相关的DOM元素上；</div>
<div class="para">能将HTML分组成可重用的组件。</div>
<div class="para">AngularJS主要考虑的是构建CRUD应用，不适合游戏，图形界面编辑器，这种DOM操作很频繁也很复杂的应用。</div>
<div class="para">就不写hello world的程序例子，直接先展现一个项目目录，这样对一个项目的构建才有所眉目，不至于无从下手，觉得angular.js官方给的phonecat项目是值得学习的，js文件目录主要如下图：</div>
<div class="para">&nbsp;</div>
<div class="para"><img src="http://images2015.cnblogs.com/blog/720690/201509/720690-20150904231029529-348350327.png" alt="" /></div>
<div class="para">&nbsp;</div>
<div class="para">js文件目录：</div>
<div class="para">&nbsp;</div>
<div class="para">一、app.js &nbsp;项目的配置文件，路由的配置，模块的依赖可以写在这里。demo：</div>
<div class="para">&nbsp;</div>
<div class="para">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var phonecatApp = angular.module('phonecatApp', [  'ngRoute',  'phonecatAnimations',
  'phonecatControllers',  'phonecatFilters',  'phonecatServices','phonecatDirectives']); 
 
//路由
phonecatApp.config(['$routeProvider',
function($routeProvider) {
$routeProvider. 
when('/phones', {
templateUrl: 'partials/phone-list.html',//模板的相对路径
controller: 'PhoneListCtrl' //使用的控制器名
}).
when('/phones/:phoneId', {
templateUrl: 'partials/phone-detail.html',
controller: 'PhoneDetailCtrl'
}).
otherwise({
redirectTo: '/phones'
});
}]);
</pre>
</div>
<p>&nbsp;</p>
</div>
<div class="para">&nbsp;</div>
<div class="para">&nbsp;</div>
<div class="para">//使用angular.moudle('<span style="background-color: #ff0000;">phonecatApp</span>',[...])进行模块化，<span style="background-color: #ff0000;">phonecatApp&nbsp;<span style="background-color: #ffffff;">就是ng－app的值，ng－app指的是从拥有该指令的html标签开始，将整个控制权交给angular.js去管理，［...］是对模块的依赖，通俗地讲，就比如［］里面的&nbsp;'phonecatControllers'，那么之后在controller.js（后面有讲）就可以直接</span></span></div>
<div class="para">&nbsp;</div>
<div class="para">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var phonecatControllers = angular.module('phonecatControllers', []); //'phonecatControllers'此处在app.js有进行模块依赖了，所以这里就这样写
phonecatControllers.controller("控制器名",function($scope){...})
</pre>
</div>
<p>&nbsp;</p>
</div>
<div class="para">&nbsp;</div>
<div class="para"><span style="color: #000000;">以往的套路是这样的，</span></div>
<div class="para">var phonecatApp&nbsp;= angular.moudle("phonecatApp",[]);</div>
<div class="para">然后phonecatApp.controller("控制器名",function(){...})，这样的话那么我们指令、服务、过滤器都需要写在同一个js文件。当然也是可以没有错的，但是把所有js代码写在同一个js文件里面，太臃肿了，管理起来也难！</div>
<div class="para">&nbsp;</div>
<div class="para">路由的设置也在这里写，路由的知识以后再详细讲，这里只是讲整个项目的目录。</div>
<div class="para">&nbsp;</div>
<div class="para">二、controller.js &nbsp;项目的控制器文件，所有控制器写在这里。demo：</div>
<div class="para">&nbsp;
<div class="para">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var phonecatControllers = angular.module('phonecatControllers', []); 
phonecatControllers.controller("控制器名",['$scope' ,'$http',function($scope,$http){...}]);
</pre>
</div>
<p>&nbsp;</p>
</div>
<div class="para">&nbsp;</div>
<div class="para">三、services.js &nbsp;项目的服务文件，根据angualr的依赖注入机制，可以自己写服务，然后在写控制器代码时传入，如：phonecatControllers.controller("控制器名",['$scope' ,'myservice',function($scope,myservice){...}]);&nbsp;<span style="background-color: #888888;">myservice<span style="background-color: #ffffff;">是自定义的服务，这样就可以注入，在不同控制器调用同个业务（引入$http等来异步获取数据，因为不同控制器操作的源是一样的，所以可以封装成一个服务供调用），可以使用自定义服务来进行封装，供不同控制器注入调用，尽量不要使用$命名，以免冲突出现错误</span></span>。demo：</div>
<div class="para">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var phonecatServices = angular.module('phonecatServices', [...]); //同上所述，［...］为依赖

phonecatServices.factory('Phone', function(){

　　return ['1882345555','123453222'];

});
</pre>
</div>
<p>&nbsp;</p>
</div>
</div>
<div class="para">
<p><span style="line-height: 1.5;">编写服务js，分别有factory、provider、service方法，这里使用factory，这样的话在controller.js写控制器的时候，就可以注入使用了，上面有阐述了。</span></p>
</div>
<div class="para">四、filters.js &nbsp;项目过滤器文件，看过大概看了一下angular.js内置的一些过滤器（如date、curreny等，因为是初学，所有只是大概看了一下，之后会继续学习深入的），那往往是不够用的，往往我们需要自己自定义一些过滤器，这样的话我们就可以在我们的模板文件（.html）中引入了，如&lt;input ng-model='xxx' type="text" <span style="background-color: #ff0000;">onlyNum</span> /&gt;或是&lt;span&gt;{{XxXX | <span style="background-color: #ff0000;">touuper</span> }}&lt;/span&gt;,onlyNum（限制只能输入数字）、touuper（转换成大写字母）就是我们自定义的过滤器。demo：</div>
<div class="para">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var phonecatFilter = angular.module('phonecatFilters', []); //同上所述，［...］为依赖
phonecatFilter.filter('touuper', function() {
   return function(input) {
       return input.toUpperCase();
   };
});
</pre>
</div>
<p>&nbsp;</p>
<span style="line-height: 1.5;">五、directives.js 项目的指令文件，这里写的是项目中，我们自己自定义的标签，制定的标签可以引入到模板文件里面使用，其代表含义，我们在directives.js中去定义，这个也是angualr.js比较有特点的功能，原本的html标签已经很丰富的了，但是这样的自定义标签可以使htmldom结构中更能自定义话，ng-*就是指令，可以去打开源码去看，它们都会被编译我们熟悉的属性、html标签，而指令有着四种形式AEMC,分别是attrs、element、注释、class，demo：</span></div>
<div class="para">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">angular.module('phonecatDirectives', []).directive("hello", function() {
return {

scope: {} ,//是否具有独立作用域
restrict: 'AEMC',   //定义类型
template: '&lt;div&gt;Hi everyone!&lt;/div&gt;',  //模板
replace: true  //是否替换原来的节点

link: function(scope,element,attrs,[controller]){　

//定义指令的行为，如果不需要则不需引入

}

compile:function(){

//编译指令时的函数

}

templateUrl: ""  //模版路径
}
});
</pre>
</div>
<p><a href="http://t.cn/RUbL4rP" target="_blank">&nbsp;http://t.cn/RUbL4rP</a></p>
<p>总结：这里主要讲了，一个angualr项目的基本目录，方便之后去创建一个项目，不会说没有思路，这里的js文件主要有，app.js、controllers.js、services.js、filters.js、directives.js，分别是基本配置、控制器、服务、过滤器、指令，在配合模版（.html）使用,实现mvc模式的设计思路，之后每一分块会继续学习，继续深入，然后记录下来，在这里先讲目录。这确实是一门很有前途的技术，会好好学习的！&nbsp;</p>
</div>
<div class="para">&nbsp;</div>]]></description></item><item><title>jquery自定义类的封装</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/08/12/4724360.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 12 Aug 2015 07:27:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/08/12/4724360.html</guid><description><![CDATA[<p>如何用jquery自定义一个类？（demo参考）</p>
<p>/*简单使用*/</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">(function($){

　//el操纵对象，option属性值

　 $.love = function(el,option){ 

　　　　var lo = $(el);

　　　　var lo.vars =  $.extend({},$.love.default ,option); //合并成新对象，则是新的属性列表

　　　　//定义其他属性

　　　　　　......

　　　　　　var method = {};

　　　　//私有方法,私有方法之间可互相调用

　　　　method={

　　　　　　functionA: function() {...},

　　　　　　functionB: function() {...},

　　　　　　functionC: function() {...},

　　　　　　...

　　　　}

　　　　//公有方法（特权方法），供类外调用

　　　　this.publicFunction = function(a,b,c){

　　　　　　....

　　　　　　/*调用私有函数*/

　　　　　　method.functionA();

　　　　　　...

　　　　}

　　　　...

 

　}

　//可设置默认属性

　$.love.default = {

　　option1:...,

　　option2:...,

　　....

　　}

})(jQuery);
</pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;/*类外调用*/</p>
<p>　　var a = new $.love("#id",{title:"name",age:12,...});</p>
<p>　　a.publicFunction(a,b,c);</p>
<p>&nbsp;</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">/*相对高级点*/

(function($){

　//el操纵对象，option属性值

　 $.love = function(el,option){ 

　　　　var lo = $(el);

　　　　var lo.vars =  $.extend({},$.love.default ,option); //合并成新对象，则是新的属性列表

　　　　//定义其他属性

　　　　　　......

　　　　　　var method = {};

　　　　$.data(el, "love", lo); //在元素上存放数据，包括lo的所有属性，方法

　　　　//私有方法,私有方法之间可互相调用

　　　　method={

　　　　　　functionA: function() {...},

　　　　　　functionB: function() {...},

　　　　　　functionC: function() {...},

　　　　　　...

　　　　}

　　　　//公有方法（特权方法），供类外调用

 　　　　lo.pfunctionA = function(){

　　　　　　/*调用私有函数*/

　　　　　　method.functionA();

　　　　},

　　　　 lo.pfunctionB = function(){...},

　　　　...

 

　}

　//可设置默认属性

　$.love.default = {

　　option1:...,

　　option2:...,

　　....

　　}

　　$.fn.love(option){

　　　　var $this = $(this); 

　　　　if( $this.data('love')===undefined){

　　　　　new $.love(this,option);

　　　　}else{

　　　　　 var love = $this.data('love'); //直接使用类中的函数等

　　　　　 love.pfunctionA();

　　　　}

　　}

})(jQuery);
</pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="http://t.cn/RUbL4rP" target="_blank">&nbsp;http://t.cn/RUbL4rP</a></p>
<p>$ ==&gt; "$ "就是 jQuery 对象的引用，等于"jQuery&nbsp;"</p>
<p>(function(){<span style="line-height: 1.5;">}) ==&gt;模仿块级作用域</span></p>
<p><span style="line-height: 1.5;">$.xxx ==&gt;针对&nbsp;jQuery 对象添加方法（我的理解）</span></p>
<p><span style="line-height: 1.5;">$.fn.xxx ==》针对元素添加方法（我的理解）</span></p>]]></description></item><item><title>怎么样才是设计功能函数的好思路（javascript）？</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/08/05/4703939.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 05 Aug 2015 02:53:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/08/05/4703939.html</guid><description><![CDATA[<p>在js里面，对于函数的调用，实际上也是也是面向对象的思路，于是写好js函数，也是考核面向对象设计的能力，同时也必须考虑到如何实现高内聚和低耦合，拿一个例子来说，现在的需求是这样的，实现个投资进度框，就是如图所示：<img src="http://images0.cnblogs.com/blog2015/720690/201508/051008587985937.png" alt="" />总共分四步来走，第一步&ldquo;创建订单中&rdquo;，成功改变提示信息&ldquo;创建订单成功！&rdquo;，显示<img src="http://images0.cnblogs.com/blog2015/720690/201508/051012594865772.png" alt="" />，不成功改变提示信息&ldquo;创建订单失败！&rdquo;,显示<img src="http://images0.cnblogs.com/blog2015/720690/201508/051015158143258.png" alt="" />，依次下去第二步，第三步，第四步！</p>
<div class="para">我的dom结构是这样的<a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a>：</div>
<div class="para">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">&lt;!--投资操作进度tip--&gt;
&lt;div class="invest_progress_tip"&gt;
&lt;div class="progress_tip_title text-center"&gt;
&lt;div class="la-timer la-2x" &gt;
&lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;span&gt;小羊正在拼命地处理中&middot;&middot;&middot;&lt;/span&gt;
&lt;/div&gt;
&lt;div class="progress_tip_content"&gt;

&lt;/div&gt;
&lt;/div&gt;
</pre>
</div>
<p>&nbsp;</p>
<p><br />&lt;!--投资操作进度tip//--&gt;</p>
<p>那就是这样的，我需要做的就是设计一个函数，对其调用，依次传参，然后对其&lt;div class="progress_tip_content"&gt;&lt;/div&gt;添加dom节点，添加每个实现步骤。那如何设计这个函数勒？刚开始，我是依照三种状态来设计这个函数的，flag为0,1,2。0为初始化，1为成功，2为不成功，于是怎么一个函数就出来：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">/*
调用说明
show_p_tip({
step:"createOrder", //步骤名称，名称任意
flag: 0, // 0=状态未显示 1=状态已显示（成功） 2=状态已显示（未成功）
msg:'正在创建订单&middot;&middot;&middot; ', //提示信息
is_begin: true, //提示框初始化，用于第一步操作,第一步必须初始化,前提flag必为0
is_success: true, //成功支付的提示（成功支付按钮）,用于最后一步成功结果，,前提flag必为1
param: object对象 //如 {is_NoAuth:true, url:'http://www.baidu.com', tradeData:'hahahhaha', method:'post'} is_NoAuth必为true 前提flag必为2
});

*/

function show_p_tip(object){

switch(object.flag){
case 0:
if(object.is_begin){
$(".invest_tip .invest_tip_close").removeClass('close_window');
$(".invest_tip").css('z-index',9996);
$(".invest_progress_tip").center().fadeIn();
}
$(".invest_progress_tip .progress_tip_content").append('&lt;div id="div_'+object.step+'"&gt;&lt;span id="span_'+object.step+'"&gt;'+object.msg+'&lt;/span&gt;&lt;i class="p-icon p-1"&gt;&lt;/i&gt;&lt;/div&gt;'); 
break;

case 1:
if(object.msg!=''){
$(".invest_progress_tip .progress_tip_content #span_"+object.step).html(object.msg);
}	
$(".invest_progress_tip .progress_tip_content &gt; div#div_"+object.step+" .p-icon").fadeIn(); 
if(object.is_success){ 
$(".invest_progress_tip .progress_tip_content").append('&lt;div class="invest_success_result mt15 text-center"&gt;&lt;a href="javascript:void(0);" class="invest_result_btn btn btn-primary btn-block"&gt;完成支付&lt;/a&gt;&lt;/div&gt;');
}	
break;

case 2:
if(object.msg!=''){
$(".invest_progress_tip .progress_tip_content #span_"+object.step).html(object.msg);
}	
$(".invest_progress_tip .progress_tip_content &gt; div#div_"+object.step+" .p-icon").addClass('p-2');
$(".invest_progress_tip .progress_tip_content &gt; div#div_"+object.step+" .p-icon").fadeIn(); 
if(object.param.is_NoAuth){ 
var form = createForm(object.param);
$(".invest_progress_tip .progress_tip_content").append('&lt;div class="invest_noauth_tip mt5"&gt;点击支付按钮前往&lt;span class="text-primary"&gt;一麻袋&lt;/span&gt;进行支付操作&lt;/div&gt;'); 
$(".invest_progress_tip .progress_tip_content .invest_noauth_tip").append(form);
}	
break;

}

if(object.tip_msg&amp;&amp;object.tip_msg!=''){ 
$(".invest_progress_tip .progress_tip_title .la-timer&gt;div").addClass('success');	
$(".invest_progress_tip .progress_tip_title span").text(object.tip_msg); 
}

}
</pre>
</div>
<p>&nbsp;</p>
<p><span style="line-height: 1.5;">那么可以看出来，使用flag作为参考依据，于是就会出现很多问题，代码出现了很多问题，比如</span></p>
<p>状态为flag为1，成功的时候，我要求显示&rdquo;完成支付&ldquo;的按钮，需要在flag为1的前提下，添加个参数is_success;</p>
<p>状态为flag为0,显示初始化的时候，需要在第一步做些其他操作（初始化），又要传入参数is_begin来保证第一步可以实现某个操作</p>
<p>虽然功能可以实现，但是代码相当冗余，可扩展性不好，相当不智能！</p>
<p>于是另外一种方法出来了，</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">/*
调用说明
show_p_tip({
action:'_init', //动作名
name: 'tag1', //标识名
msg:'正在创建订单...', //提示信息
status: 1, // 0错误 1正确
form: object对象 //如 {url:'http://www.baidu.com', tradeData:'hahahhaha', method:'post'}
});
eg:

show_p_tip({ action:'_init',msg:'小羊正在疯狂处理中！'});

show_p_tip({ action:'_tips',name:'tag1',msg:'正在创建订单...'});
show_p_tip({ action:'_tips',name:'tag1',msg:'创建订单成功！',status:1});
show_p_tip({ action:'_tips',name:'tag1',msg:'现金券下单失败！',status:0});

show_p_tip({ action:'_jump',form:{url:'http://www.baidu.com', tradeData:'hahahhaha', method:'post'}});

show_p_tip({ action:'_complete'});

show_p_tip({ action:'_end'});
*/
function show_p_tip(object){
switch(object.action){
//初始化
case '_init':
var msg = object.msg?object.msg:'小羊正在拼命地处理中！';
$('.invest_progress_tip').attr('rel',1);
$('.invest_progress_tip .progress_tip_title span').text(msg);
$(".invest_tip .invest_tip_close").removeClass('close_window');
$(".invest_tip").css('z-index',9996);
$(".invest_progress_tip").center().fadeIn();
break;
//流程提示
case '_tips':
if($('.invest_progress_tip').attr('rel')!='1'){
show_p_tip({action:'_init'});
}
if(!$('#div_'+object.name).length){
$(".invest_progress_tip .progress_tip_content").append('&lt;div id="div_'+object.name+'"&gt;&lt;span id="span_'+object.name+'"&gt;'+object.msg+'&lt;/span&gt;&lt;i class="p-icon p-1"&gt;&lt;/i&gt;&lt;/div&gt;'); 
} 
$("#span_"+object.name).html(object.msg);
if(object.status==1) $("#div_"+object.name+" .p-icon").fadeIn();
if(object.status==0) $("#div_"+object.name+" .p-icon").addClass('p-2').fadeIn();
break;
//跳转支付
case '_jump':
var form = createForm(object.form);
$(".invest_progress_tip .progress_tip_content").append('&lt;div class="invest_noauth_tip mt5"&gt;点击支付按钮前往&lt;span class="text-primary"&gt;一麻袋&lt;/span&gt;进行支付操作&lt;/div&gt;'); 
$(".invest_progress_tip .progress_tip_content .invest_noauth_tip").append(form);
break;
//完成
case '_complete':
var msg = object.msg?object.msg:'完成支付';
$(".invest_progress_tip .progress_tip_content").append('&lt;div class="invest_success_result mt15 text-center"&gt;&lt;a href="javascript:void(0);" class="invest_result_btn btn btn-primary btn-block"&gt;'+msg+'&lt;/a&gt;&lt;/div&gt;');
break;
//结束
case '_end':
var msg = object.msg?object.msg:'小羊保证完成任务！';
$(".invest_progress_tip .progress_tip_title span").text(msg);
$(".invest_progress_tip .progress_tip_title .la-timer&gt;div").addClass('success'); 
break;
}	
}
</pre>
</div>
<p>&nbsp;</p>
<p><br />	</p>






</div>
<div class="para">&nbsp;这种方式，是以action来做参考依据的，分为5种情况，分别是_init（初始化），_tips（流程提示），_jump（跳转支付），_complete（完成支付），_end（结束），然后再使用递归，这样的话就划分了5个模块来处理这样的功能，_init（初始化），可以在第一步做递归调用，每一步都可以使用_tips（流程提示），即可随时改变状态，提示信息，有可以判断是否初始化，而决定是否递归调用_init（初始化），有可以处理其他特殊情况，比如第一步需要初始化操作，最后一步成功需要显示&rdquo;完成支付&ldquo;按钮，都是作为_jump（跳转支付），_complete（完成支付）来处理。代码不冗余了，可扩展性强了！条例清晰多了！</div>
<div class="para">&nbsp;</div>
<div class="para"><span style="color: #ff0000;">总结：在写js功能处理函数时，正确的思想是根据此功能将其划分成多个模块部分，通用模块，初始化模块，结束模块，特殊模块，用好递归等编程思想，这样的思路可以有效的写出好的代码！come on！！！bin！</span></div>
<div class="para">&nbsp;</div>]]></description></item><item><title>svg编辑器是如何制作的！</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/07/31/4681346.html</link><dc:creator>吴绍斌</dc:creator><author>吴绍斌</author><pubDate>Fri, 31 Jul 2015 03:31:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/07/31/4681346.html</guid><description><![CDATA[<p>这几天，对svg技术来劲，于是在网上搜罗各种学习资源，在幕课网上看到相应的视频资源，觉得做得东西特别有趣，于是想把其分享出去！第一章涉及到的如何制作一个svg编辑器，觉得有趣，就去研究它的源代码，后面收获颇多，就想把它纪录下来，不单单只是学习到svg的知识，也同时学习了js，以及一些思想，就是要尽量使用少的代码完成所有功能！</p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/311036316734012.png" alt="" />效果图</p>
<p>首先，我们最经常用到svg的api有怎么三个：</p>
<p>document.createElementNS(NS,name); &nbsp;//创建一个svg标签，NS指得是svg的命名空间，则是'http://www.w3.org/2000/svg'，name指得是标签名，即svg</p>
<p>element.setAttribute(name,value);</p>
<p>element.getAttribute(name);</p>
<p>&nbsp;</p>
<p>// alert(fill.value); 如果该属性是唯一的，其他表单没有出现过，则是可以这样使用</p>
<p>// alert(document.forms[2].fill.value);</p>
<p>&nbsp;</p>
<p>所有代码如下（好好研究）：</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE HTML</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">meta </span><span style="color: #ff0000;">http-equiv</span><span style="color: #0000ff;">="Content-Type"</span><span style="color: #ff0000;"> content</span><span style="color: #0000ff;">="text/html; charset=utf-8"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>SVG 编辑器<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span><span style="background-color: #f5f5f5; color: #800000;">
#toolbox </span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
position</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> absolute</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
top</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
bottom</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
left</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 250px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
border-right</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 1px solid #CCC</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

#toolbox h2 </span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
margin</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
padding</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
background</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> #EEE</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
font-size</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 16px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 24px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
line-height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 24px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
padding</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 5px 10px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

#toolbox form </span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
padding</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 10px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

#canvas </span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
position</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> absolute</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
left</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 260px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
top</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 10px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
bottom</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 10px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
right</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 10px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
box-shadow</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 2px 2px 10px rgba(0,0,0,.4)</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
border-radius</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 5px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

label </span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> inline-block</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 80px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
text-align</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> right</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="toolbox"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>创建<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">form </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="create-shape"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="button"</span><span style="color: #ff0000;"> create</span><span style="color: #0000ff;">="rect"</span><span style="color: #0000ff;">&gt;</span>Rect<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="button"</span><span style="color: #ff0000;"> create</span><span style="color: #0000ff;">="circle"</span><span style="color: #0000ff;">&gt;</span>Circle<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="button"</span><span style="color: #ff0000;"> create</span><span style="color: #0000ff;">="ellipse"</span><span style="color: #0000ff;">&gt;</span>Ellipse<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="button"</span><span style="color: #ff0000;"> create</span><span style="color: #0000ff;">="line"</span><span style="color: #0000ff;">&gt;</span>Line<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">form</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>形状<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">form </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="shape-attrs"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
请先创建图形
</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">form</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>外观和变换<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">form </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="look-and-transform"</span><span style="color: #ff0000;"> disabled</span><span style="color: #0000ff;">="disabled"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">label </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="display: inline;"</span><span style="color: #0000ff;">&gt;</span>填充<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="fill"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="color"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="#ffffff"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">label </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="display: inline;"</span><span style="color: #0000ff;">&gt;</span>描边<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="stroke"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="color"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="#ff0000"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="strokeWidth"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="range"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="1"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>translateX<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="translateX"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="range"</span><span style="color: #ff0000;"> min</span><span style="color: #0000ff;">="-400"</span><span style="color: #ff0000;"> max</span><span style="color: #0000ff;">="400"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="0"</span> <span style="color: #0000ff;">/&gt;</span>

<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>translateY<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="translateY"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="range"</span><span style="color: #ff0000;"> min</span><span style="color: #0000ff;">="-400"</span><span style="color: #ff0000;"> max</span><span style="color: #0000ff;">="400"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="0"</span> <span style="color: #0000ff;">/&gt;</span>

<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>rotate<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="rotate"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="range"</span><span style="color: #ff0000;"> min</span><span style="color: #0000ff;">="-180"</span><span style="color: #ff0000;"> max</span><span style="color: #0000ff;">="180"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="0"</span> <span style="color: #0000ff;">/&gt;</span>

<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>scale<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="scale"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="range"</span><span style="color: #ff0000;"> min</span><span style="color: #0000ff;">="-1"</span><span style="color: #ff0000;"> max</span><span style="color: #0000ff;">="2"</span><span style="color: #ff0000;"> step</span><span style="color: #0000ff;">="0.01"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="1"</span> <span style="color: #0000ff;">/&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">p</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">form</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="canvas"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> SVG_NS </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">http://www.w3.org/2000/svg</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">; </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">命名空间</span>

 

<span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> 图形及对应默认属性</span>
<span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> shapeInfo </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> {
rect: </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">x:10,y:10,width:200,height:100,rx:0,ry:0</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,
circle: </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">cx:200,cy:200,r:50</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,
ellipse: </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">cx:200,cy:200,rx:80,ry:30</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,
line: </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">x1:10,y1:10,x2:100,y2:100</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">
};

</span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;"> 默认公共属性</span>
<span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> defaultAttrs </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> {
fill: </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">#ffffff</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,
stroke: </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">#ff0000</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">
};

</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> createForm </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">create-shape</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> attrForm </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">shape-attrs</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> lookForm </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">look-and-transform</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);

</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> svg </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> createSVG();
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> selected </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">null</span><span style="background-color: #f5f5f5; color: #000000;">;

createForm.addEventListener(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">click</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(e) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;"> (e.target.tagName.toLowerCase() </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">button</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">) {
create(e.target.getAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">create</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">));
}
});

attrForm.addEventListener(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">input</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(e) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;"> (e.target.tagName.toLowerCase() </span><span style="background-color: #f5f5f5; color: #000000;">!=</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">input</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;">;
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> handle </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> e.target;
selected.setAttribute(handle.name, handle.value);
});

lookForm.addEventListener(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">input</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(e) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;"> (e.target.tagName.toLowerCase() </span><span style="background-color: #f5f5f5; color: #000000;">!=</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">input</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;">;
</span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;"> (</span><span style="background-color: #f5f5f5; color: #000000;">!</span><span style="background-color: #f5f5f5; color: #000000;">selected) </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;">;
selected.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">fill</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, fill.value);
selected.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">stroke</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, stroke.value);
selected.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">stroke-width</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, strokeWidth.value);
selected.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">transform</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, encodeTranform({
tx: translateX.value,
ty: translateY.value,
scale: scale.value,
rotate: rotate.value
}));
});

</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> createSVG() {
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> svg </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.createElementNS(SVG_NS, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">svg</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
svg.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">width</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">100%</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">); </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">与canvas等宽</span>
<span style="background-color: #f5f5f5; color: #000000;">svg.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">height</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">100%</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">); </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">与canvas等高</span>
<span style="background-color: #f5f5f5; color: #000000;">canvas.appendChild(svg);

svg.addEventListener(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">click</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(e) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;"> (e.target.tagName.toLowerCase() </span><span style="background-color: #f5f5f5; color: #0000ff;">in</span><span style="background-color: #f5f5f5; color: #000000;"> shapeInfo) { </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">事件对象 http://www.cnblogs.com/GIS_zhou/articles/1576985.html</span>
<span style="background-color: #f5f5f5; color: #000000;">select(e.target);
}
});
</span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;"> svg;
}

</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> create(name) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> shape </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.createElementNS(SVG_NS, name);
svg.appendChild(shape);
select(shape);
}

</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> select(shape) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> attrs </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> shapeInfo[shape.tagName].split(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> attr, name, value;

attrForm.innerHTML </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">""</span><span style="background-color: #f5f5f5; color: #000000;">;

</span><span style="background-color: #f5f5f5; color: #0000ff;">while</span><span style="background-color: #f5f5f5; color: #000000;">(attrs.length) {
attr </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> attrs.shift().split(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
name </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> attr[</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">];
value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> shape.getAttribute(name) </span><span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> attr[</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">];
createHandle(shape, name, value);
shape.setAttribute(name, value);
}

</span><span style="background-color: #f5f5f5; color: #0000ff;">for</span><span style="background-color: #f5f5f5; color: #000000;"> (name </span><span style="background-color: #f5f5f5; color: #0000ff;">in</span><span style="background-color: #f5f5f5; color: #000000;"> defaultAttrs) {
value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> shape.getAttribute(name) </span><span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> defaultAttrs[name];
shape.setAttribute(name, value);
}
selected </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> shape;

updateLookHandle();
}

</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> createHandle(shape, name, value) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> label </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.createElement(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">label</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
label.textContent </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> name;

</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> handle </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.createElement(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">input</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
handle.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">name</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, name);
handle.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">type</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">range</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
handle.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">value</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, value);
handle.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">min</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">);
handle.setAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">max</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #000000;">800</span><span style="background-color: #f5f5f5; color: #000000;">);

attrForm.appendChild(label);
attrForm.appendChild(handle);
}

</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> updateLookHandle() {
fill.value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> selected.getAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">fill</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
stroke.value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> selected.getAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">stroke</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">);
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> t </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> decodeTransform(selected.getAttribute(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">transform</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">));
translateX.value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> t </span><span style="background-color: #f5f5f5; color: #000000;">?</span><span style="background-color: #f5f5f5; color: #000000;"> t.tx : </span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">;
translateY.value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> t </span><span style="background-color: #f5f5f5; color: #000000;">?</span><span style="background-color: #f5f5f5; color: #000000;"> t.ty : </span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">;
rotate.value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> t </span><span style="background-color: #f5f5f5; color: #000000;">?</span><span style="background-color: #f5f5f5; color: #000000;"> t.rotate : </span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">;
scale.value </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> t </span><span style="background-color: #f5f5f5; color: #000000;">?</span><span style="background-color: #f5f5f5; color: #000000;"> t.scale : </span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">;
}

</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> decodeTransform(transString) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> match </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">/</span><span style="background-color: #f5f5f5; color: #000000;">translate\((\d+),(\d+)\)\srotate\((\d+)\)\sscale\((\d+)\)</span><span style="background-color: #f5f5f5; color: #000000;">/</span><span style="background-color: #f5f5f5; color: #000000;">.exec(transString);
</span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;"> match </span><span style="background-color: #f5f5f5; color: #000000;">?</span><span style="background-color: #f5f5f5; color: #000000;"> {
tx: </span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">match[</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">],
ty: </span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">match[</span><span style="background-color: #f5f5f5; color: #000000;">2</span><span style="background-color: #f5f5f5; color: #000000;">],
rotate: </span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">match[</span><span style="background-color: #f5f5f5; color: #000000;">3</span><span style="background-color: #f5f5f5; color: #000000;">],
scale: </span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">match[</span><span style="background-color: #f5f5f5; color: #000000;">4</span><span style="background-color: #f5f5f5; color: #000000;">]
} : </span><span style="background-color: #f5f5f5; color: #0000ff;">null</span><span style="background-color: #f5f5f5; color: #000000;">;
}

</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> encodeTranform(transObject) {
</span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;"> [</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">translate(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, transObject.tx, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, transObject.ty, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,
</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">rotate(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, transObject.rotate, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">,
</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">scale(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">, transObject.scale, </span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">)</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">].join(</span><span style="background-color: #f5f5f5; color: #000000;">''</span><span style="background-color: #f5f5f5; color: #000000;">);
}

 

</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>toolTip(用svg制作出富有动态的对话框)</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/07/31/4652060.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Fri, 31 Jul 2015 02:38:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/07/31/4652060.html</guid><description><![CDATA[<p>昨晚看了用svg如何制作富有动态的tooltip，于是今天就心血来潮学着做一下，于是也成功做出来，也明白其中的原理，收获颇多阿！接下来要多去学习svg，这是个好东西。</p>
<p>这其中也注意了一些平时纠结的细节应该怎么去做(演示：http://www.live086.cn/toolTip/)，比如：</p>
<p> &lt;article&gt;<br />            &lt;section id="sound1"&gt;<br />            &lt;/section&gt;<br />            &lt;section id="sound2"&gt;<br />            &lt;/section&gt;<br />        &lt;/article&gt;</p>
<p>article标签长度为600px,section 分别是300px，然后设置其为display:inline-block;然后是下面的效果：</p>
<p><a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a></p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/161802241415251.png" alt="" /></p>
<p>本来按常理来说的话，应该是头像水平排列，这是因为display:inline-block;会将article标签和section标签之间空白渲染成空格，空格展位，所以会导致图片不在同一排，解决的办法是给article标签和section标签添加如下的css代码：</p>
<p> article{ <br />                width:600px;<br />                margin:200px;<br />                <span style="background-color: #888888;">font-size:0;</span><br />              }<br />              article section{ <br />                display:inline-block;<br />                width:300px;<br />                font-size:14px;<br />                position:relative;<br />              }</p>
<p>于是空白去掉了！</p>
<p>另外对于svg的web图像，我们可以对其进行修改，使其图像的样式可进行修改，它的格式大概如下（举一例子）：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
width="600px" height="300px" viewBox="0 0 600 300" enable-background="new 0 0 600 300" xml:space="preserve"&gt;
&lt;polygon points="89.571,6.648 513.333,6.648 590.25,75.342 553.002,215.306 313.065,273.358 300,293.352 288.876,272.71 
48.936,215.306 9.75,75.342 "/&gt;
&lt;/svg&gt;
</pre>
</div>
<p>&nbsp;</p>
<p>于是我们不可能将其引入到html文件里面，如果说有很多这种svg图像，修改起来很麻烦！</p>
<p>于是使用的是ajax来加载这个图片：</p>
<p>html的dom：&lt;svg data-src="bubble1.svg" width="280" height="140"&gt;&lt;/svg&gt;</p>
<p> // 问题二：对于svg图像我们要如何引入，不可能将整个svg都引入吧，不便于修改编辑<br />                 // 技巧二：使用js进行加载 <br />                  $('svg[data-src]').each(function(index, svg) {<br />                    var src = $(svg).data('src'); //data用于获取data-*属性的路径<br />                    $.ajax({<br />                        url: src,<br />                        dataType: 'xml',<br />                        success: function(content) {<br />                            var doc = content.documentElement;<br />                            $(doc).attr({<br />                                width: $(svg).attr('width'),<br />                                height: $(svg).attr('height')<br />                            });<br />                            $(svg).after(doc).remove();<br />                        }<br />                    })<br />                });</p>
<p>还有对于图片的描边动画效果，这里又怎么个好的方法，只针对svg图像：</p>
<p>使用stroke-dasharray（虚线描边，可以不断尝试，使其调至适应大小，完成实现整个描边的效果）stroke-dashoffset（虚线间隔，调至整个svg没有描边的效果），然后使用transition实现这个动画</p>
<p>最终效果（如图，没有在线演示，动画效果出不来，不过下面贴的代码直接复制，再去下载两个svg图片和头像就可以使用）</p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/162209448919584.png" alt="" /><img src="http://images0.cnblogs.com/blog2015/720690/201507/162209584383247.png" alt="" /></p>
<p>代码如下：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">&lt;!DOCTYPE html&gt;
&lt;html lang="zh-cn"&gt;
&lt;head&gt;
&lt;title&gt;toolTip聊天对话框制作&lt;/title&gt;
&lt;meta charset="utf-8"/&gt;
&lt;meta name="keywords" content="" /&gt;
&lt;meta name="description" content="" /&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt; 
&lt;style type="text/css"&gt;
h1{ 
color:red;
font-size:18px;
}
article{ 
width:600px;
margin:200px;
font-size:0;
}
article section{ 
/*问题一：对于display:inline-block;会出现两个section无法并排排列，由于使用此属性会将article与section之间的空白处渲染成空格，于是无法并排*/
/*技巧一： 父元素设置 font-size:0;清除空白*/
display:inline-block;
width:300px;
font-size:14px;
position:relative;
}
.text-center{ 
text-align:center;
}
#sound1,#sound2{ 
cursor:pointer; 
}
#sound1 img,#sound2 img{ 
width:100px;
height:100px;
border-radius:100%;
}
.sound_1,.sound_2{ 
position:absolute;
top:-104px;
width:200px;
height:100px;
box-sizing: border-box;
opacity:1;
}
.sound_2{ 
padding:28px;
}
.sound_1{ 
padding: 25px 68px 25px 30px;
left: -150px;
top: -134px;
width: 280px;
height: 140px;
}
.sound_1 svg ,.sound_2 svg{ 
position:absolute;
top:0;
left:0;
}
.sound_1 p,.sound_2 p{ 
position:relative;
margin:0;
color:#444;
font-size:12px;
} 
.sound_1 svg path, .sound_2 svg polygon{
fill:#fff;/*填充的颜色*/
stroke:red;/*描边的颜色*/
stroke-width: 6px;/*边的宽度*/
}
.sound_1 svg #path1 {
transform: scale(0, 0);
transform-origin: center;
opacity: 0;
transition-duration: .3s;
transition-delay: 0;
}
.sound_1 svg #path2 {
transform: scale(0, 0);
transform-origin: center;
opacity: 0;
transition-duration: .3s;
transition-delay: .1s;
}
.sound_1 svg #path3 {
transform: scale(0, 0);
transform-origin: center;
opacity: 0;
transition-duration: .3s;
transition-delay: .2s;
}
.sound_1 svg #path4 {
transform: scale(0, 0);
transform-origin: center;
opacity: 0;
transition-duration: .3s;
transition-delay: .25s;
} 
.sound_1 p {
transition: .2s .35s;
opacity: 0;
transform: translate(0, -10px);
} 
#sound1:hover .sound_1 svg #path1,#sound1:hover .sound_1 svg #path2,#sound1:hover .sound_1 svg #path3,#sound1:hover .sound_1 svg #path4{ 
transform: scale(1, 1);
opacity: 1;
transition-delay: 0;
} 
#sound1:hover .sound_1 p{ 
opacity: 1;
transform: translate(0, 0);
} 
/*问题三：对于图片的描边动画效果，这里又怎么个好的方法，只针对svg图像*/
/*技巧三：使用stroke-dasharray（虚线描边，可以不断尝试，使其调至适应大小，实现描边的效果）stroke-dashoffset（虚线间隔，调至整个svg没有描边的效果），然后使用transition实现这个动画 */ 
.sound_2 svg polygon{ 
stroke-dasharray: 1500;
stroke-dashoffset: 1500;
fill-opacity: 0;
transition: .6s;
}
.sound_2 p {
transition: .4s;
transform: scale(-0.5);
opacity: 0;
transform: translate(0, -10px);
} 
#sound2:hover .sound_2 svg polygon{ 
stroke-dashoffset: 0;
fill-opacity: 1;
}
#sound2:hover .sound_2 p {
transform: scale(0);
opacity: 1;
transform: translate(0, 0);
} 
&lt;/style&gt;
&lt;/head&gt; 
&lt;body&gt;

&lt;h1&gt;toolTip聊天对话框制作&lt;/h1&gt;

&lt;article&gt;
&lt;section id="sound1"&gt;
&lt;div class="text-center"&gt;&lt;img src="nan.jpg" /&gt;&lt;/div&gt;
&lt;p class="text-center"&gt;韩国正太&lt;/p&gt;
&lt;div class="sound_1"&gt;
&lt;svg data-src="bubble1.svg" width="280" height="140"&gt;&lt;/svg&gt;
&lt;p&gt;听说优衣库的试衣间已全面升级，空间大小扩充一倍，精装修，同时四面都安有镜子，方便无死角录像呢，要去试一下不，美女！&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="sound2"&gt;
&lt;div class="text-center"&gt;&lt;img src="nv.jpg" /&gt; &lt;/div&gt;
&lt;p class="text-center"&gt;优衣库美女&lt;/p&gt;
&lt;div class="sound_2"&gt;
&lt;svg data-src="bubble2.svg" width="200" height="100"&gt;&lt;/svg&gt;
&lt;p&gt;听起来就很刺激，那走，帅哥，准备家伙，go！&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/article&gt;


&lt;script type="text/javascript"&gt;
$(document).ready(function() {
// 问题二：对于svg图像我们要如何引入，不可能将整个svg都引入吧，不便于修改编辑
// 技巧二：使用js进行加载 
$('svg[data-src]').each(function(index, svg) {
var src = $(svg).data('src'); //data用于获取data-*属性的路径
$.ajax({
url: src,
dataType: 'xml',
success: function(content) {
var doc = content.documentElement;
$(doc).attr({
width: $(svg).attr('width'),
height: $(svg).attr('height')
});
$(svg).after(doc).remove();
}
})
});
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
</div>
<p>&nbsp;</p>
<p><span style="line-height: 1.5;">&nbsp;</span></p>]]></description></item><item><title>swiper-制作活灵活现的微场景、微海报(一)</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/07/20/4660243.html</link><dc:creator>吴绍斌</dc:creator><author>吴绍斌</author><pubDate>Sun, 19 Jul 2015 16:28:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/07/20/4660243.html</guid><description><![CDATA[<p>前几天，接到怎么一个任务，就是制作财富测试的微场景，于是就找寻如何制作的办法，希望做出的效果能与<a href="http://xw.qq.com/iphone/m/yutu/activity/1710.html" target="_blank">腾讯节气微场景</a>相似，当然不用做得怎么漂亮！于是接触了Swiper（http://www.swiper.com.cn），这是一个好东西，能够快速建立微场景、微海报、灯箱（也可以用iscroll.js）等web app！</p>
<p><span style="background-color: #888888;">Swiper使用方法：</span></p>
<p>1.首先加载插件，需要用到的文件有<a href="http://www.swiper.com.cn/download/index.html#file7" target="_blank">swiper.min.js</a>和<a href="http://www.swiper.com.cn/download/index.html#file5" target="_blank">swiper.min.css</a>文件。</p>
<div class="cnblogs_code">
<pre>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; ... &lt;link rel=<span style="color: #800000;">"</span><span style="color: #800000;">stylesheet</span><span style="color: #800000;">"</span> href=<span style="color: #800000;">"</span><span style="color: #800000;">path/to/swiper.min.css</span><span style="color: #800000;">"</span>&gt; &lt;/head&gt; &lt;body&gt; ... &lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">path/to/swiper.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</pre>
</div>
<p>&nbsp;</p>
<p><span class="hljs-doctype">如果你的页面加载了<a href="http://www.swiper.com.cn/download/index.html#file2">jQuery.js</a>或者<a href="http://www.swiper.com.cn/download/index.html#file3">zepto.js</a>，你可以选择使用更轻便的<a href="http://www.swiper.com.cn/download/index.html#file4" target="_blank">swiper.jquery.min.js</a>。</span></p>
<p><span class="hljs-doctype">2.HTML内容。</span></p>
<div class="cnblogs_code">
<pre>&lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-container</span><span style="color: #800000;">"</span>&gt;

&lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-wrapper</span><span style="color: #800000;">"</span>&gt;

&lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-slide</span><span style="color: #800000;">"</span>&gt;Slide <span style="color: #800080;">1</span>&lt;/div&gt;

&lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-slide</span><span style="color: #800000;">"</span>&gt;Slide <span style="color: #800080;">2</span>&lt;/div&gt;

&lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-slide</span><span style="color: #800000;">"</span>&gt;Slide <span style="color: #800080;">3</span>&lt;/div&gt;

&lt;/div&gt;

&lt;!-- 如果需要分页器 --&gt; &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-pagination</span><span style="color: #800000;">"</span>&gt;&lt;/div&gt;

&lt;!-- 如果需要导航按钮 --&gt; &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-button-prev</span><span style="color: #800000;">"</span>&gt;&lt;/div&gt; &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-button-next</span><span style="color: #800000;">"</span>&gt;&lt;/div&gt;

&lt;!-- 如果需要滚动条 --&gt; &lt;div <span style="color: #0000ff;">class</span>=<span style="color: #800000;">"</span><span style="color: #800000;">swiper-scrollbar</span><span style="color: #800000;">"</span>&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;!--导航等组件可以放在container之外--&gt;</pre>
</div>
<p>&nbsp;</p>
<p><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-comment"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-comment"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-comment"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">3.你可能想要给Swiper定义一个大小，当然不要也行。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-comment"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-comment"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-comment"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">4.初始化Swiper：最好是挨着&lt;/body&gt;标签。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<div class="cnblogs_code">
<pre>&lt;script&gt;

<span style="color: #0000ff;">var</span> mySwiper = <span style="color: #0000ff;">new</span> Swiper (<span style="color: #800000;">'</span><span style="color: #800000;">.swiper-container</span><span style="color: #800000;">'</span><span style="color: #000000;">,

{ direction: </span><span style="color: #800000;">'</span><span style="color: #800000;">vertical</span><span style="color: #800000;">'</span><span style="color: #000000;">,

   loop: </span><span style="color: #0000ff;">true</span><span style="color: #000000;">,

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 如果需要分页器 pagination: '.swiper-pagination',

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 如果需要前进后退按钮 nextButton: '.swiper-button-next', prevButton: '.swiper-button-prev',

</span><span style="color: #008000;">//</span><span style="color: #008000;"> 如果需要滚动条 scrollbar: '.swiper-scrollbar', })</span>

&lt;/script&gt;

&lt;/body&gt;</pre>
</div>
<p>&nbsp;</p>
<p><span class="hljs-string" style="line-height: 1.5;"><span class="hljs-comment"><span class="hljs-string"><span class="hljs-string"><span class="hljs-comment"><span class="hljs-string"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">如果不能写在HTML内容的后面，则需要在页面加载完成后再初始化。</span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span style="background-color: #888888;">Swiper Animate使用方法:</span></p>
<p><span style="background-color: #ffffff;">Swiper Animate是Swiper中文网提供的用于在Swiper内快速制作CSS3动画效果的小插件，适用于Swiper2.x和Swiper3.x 。<br />此插件不适用于<strong>loop模式</strong></span></p>
<p><span style="background-color: #ffffff;">1. 使用Swiper Animate需要先加载<a href="http://www.swiper.com.cn/download/index.html#file8" target="_blank">swiper.animate.min.js</a>和<a href="http://www.swiper.com.cn/download/index.html#file9" target="_blank">animate.min.css</a>。</span></p>
<div class="cnblogs_code">
<pre>&lt;!DOCTYPE html&gt;

&lt;html&gt;

&lt;head&gt;<span style="color: #000000;"> ...

</span>&lt;link rel=<span style="color: #800000;">"</span><span style="color: #800000;">stylesheet</span><span style="color: #800000;">"</span> href=<span style="color: #800000;">"</span><span style="color: #800000;">path/to/swiper.min.css</span><span style="color: #800000;">"</span>&gt;

&lt;link rel=<span style="color: #800000;">"</span><span style="color: #800000;">stylesheet</span><span style="color: #800000;">"</span> href=<span style="color: #800000;">"</span><span style="color: #800000;">path/to/animate.min.css</span><span style="color: #800000;">"</span>&gt;

&lt;/head&gt;

&lt;body&gt;<span style="color: #000000;"> ...

</span>&lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">path/to/swiper.min.js</span><span style="color: #800000;">"</span>&gt;&lt;/script&gt;

&lt;script src=<span style="color: #800000;">"</span><span style="color: #800000;">path/to/swiper.animate.min.js</span><span style="color: #800000;">"</span>&gt;

&lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;</pre>
</div>
<p>&nbsp;</p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">2. 初始化时隐藏元素并在需要的时刻开始动画。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<div class="cnblogs_code">
<pre>&lt;script&gt;

<span style="color: #0000ff;">var</span> mySwiper = <span style="color: #0000ff;">new</span> Swiper (<span style="color: #800000;">'</span><span style="color: #800000;">.swiper-container</span><span style="color: #800000;">'</span><span style="color: #000000;">,

{ onInit: function(swiper){

　　</span><span style="color: #008000;">//</span><span style="color: #008000;">Swiper2.x的初始化是onFirstInit</span>
<span style="color: #000000;">
　　 swiperAnimateCache(swiper);

　　</span><span style="color: #008000;">//</span><span style="color: #008000;">隐藏动画元素</span>
<span style="color: #000000;">
　　swiperAnimate(swiper);

　　</span><span style="color: #008000;">//</span><span style="color: #008000;">初始化完成开始动画  },</span>
<span style="color: #000000;">
　onSlideChangeEnd: function(swiper){

　　swiperAnimate(swiper); </span><span style="color: #008000;">//</span><span style="color: #008000;">每个slide切换结束时也运行当前slide动画</span>
<span style="color: #000000;">
　　　} }) </span>&lt;/script&gt;

&lt;/body&gt;</pre>
</div>
<p>&nbsp;</p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="javascript"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-string"><span class="javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">3. 在需要运动的元素上面增加类名<strong>&nbsp; ani &nbsp;&nbsp;</strong>，和其他的类似插件相同，Swiper Animate需要指定几个参数：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="javascript"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-string"><span class="javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">swiper-animate-effect：切换效果，例如&nbsp;fadeInUp&nbsp;<br />swiper-animate-duration：可选，动画持续时间（单位秒），例如 0.5s<br />swiper-animate-delay：可选，动画延迟时间（单位秒），例如 0.3s</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="javascript"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-string"><span class="javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">&lt;<span class="hljs-keyword">div <span class="hljs-type">class=<span class="hljs-string">"swiper-slide"&gt; </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="javascript"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-string"><span class="javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-type"><span class="hljs-string">　　&lt;p <span class="hljs-type">class=<span class="hljs-string">"ani" swiper-animate-effect=<span class="hljs-string">"fadeInUp" swiper-animate-duration=<span class="hljs-string">"0.5s" swiper-animate-<span class="hljs-command">delay=<span class="hljs-string">"0.3s"&gt;内容&lt;/p&gt; </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="javascript"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-string"><span class="javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-type"><span class="hljs-string"><span class="hljs-type"><span class="hljs-string"><span class="hljs-string"><span class="hljs-string"><span class="hljs-command"><span class="hljs-string">&lt;/<span class="hljs-keyword">div&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="javascript"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-string"><span class="javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-type"><span class="hljs-string"><span class="hljs-type"><span class="hljs-string"><span class="hljs-string"><span class="hljs-string"><span class="hljs-command"><span class="hljs-string"><span class="hljs-keyword">4. 可选效果参考可参考<a href="http://www.swiper.com.cn/download/index.html#file10" target="_blank">animate.css</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="background-color: #ffffff;"><span class="hljs-doctype"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-attribute"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="javascript"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-string"><span class="javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-params"><span class="hljs-comment"><span class="javascript"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-type"><span class="hljs-string"><span class="hljs-type"><span class="hljs-string"><span class="hljs-string"><span class="hljs-string"><span class="hljs-command"><span class="hljs-string"><span class="hljs-keyword">5. 如果以上这些效果不能满足你的需求，你可以仿照<a href="http://www.swiper.com.cn/download/index.html#file10" target="_blank">animate.css</a>的格式制作一些其他效果，加到你自己的css文件。其他参数：<a href="http://bbs.swiper.com.cn/forum.php?mod=viewthread&amp;tid=13&amp;page=1&amp;extra=#pid25" target="_blank">transition-timing-function</a>&nbsp;。<br /><br />6. 拓展应用：可以执行两种动画的<a href="http://bbs.swiper.com.cn/forum.php?mod=viewthread&amp;tid=328&amp;extra=page%3D1" target="_blank">升级版的Swiper Animate</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>]]></description></item><item><title>css3制作时钟</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/07/15/4644969.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Wed, 15 Jul 2015 09:56:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/07/15/4644969.html</guid><description><![CDATA[<p>制作时钟之前需要了解几点知识：</p>
<p>一、圆上点坐标的计算</p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/141133127356077.png" alt="" /></p>
<p>二、时钟上时针、分针、秒针的换算</p>
<p>我们观察一下时钟，首先想到的是与<strong>角度</strong>有关。再有是，秒针，分针，时针之间的<strong>进位</strong>关系。</p>
<p>　　比如说h时m分s秒，时针、分针、秒针此时此刻的角度：（-<span class="hljs-number">90，是因为rotateZ角度旋转规则，默认是从水平开始，逆时针为+，顺时针为-）</span></p>
<p>　　ds &nbsp;= &nbsp;s*6-90;</p>
<p>　　dm = &nbsp;m*6+(s/60*6)-90;</p>
<p>　　dh &nbsp;= &nbsp;h*30+(m/60*30)-90;&nbsp;</p>
<ol>
<li>我们都知道<code>1s = 1 / 60min</code>,<code>1min = 1 / 60h</code>;</li>
<li>观察任意一款手表或时钟，我们会发现，通常时钟的表盘会被分成<span style="background-color: #ff0000;">12</span>个大格，<code>5*12=<span style="background-color: #ff0000;">60</span></code>个小格，而整个表盘是<code>360&deg;</code>，也就是说每个小格是<span style="background-color: #ff0000;"><code>6&deg;</code></span>。换句话说，秒针和分针每动一下，都会走过1小格，走过了<code>6&deg;</code>，而时针动一下，则走过了一大格，<code>5*6&deg;=30&deg;</code>；因此，秒针和分针移动的基值是6&deg;，时针是30&deg;；</li>
<li>另外在分针走动的时候，时针也不是静止不动的，而是不甘寂寞的默默向前移动，也就是说当分针动一下，走了6&deg;时，时针实际上也挪动了<code>1 / 60 * 30&deg;</code>。所以，计算时针角度时不要忽略了分针对其的影响。（虽然秒针对分针也有着同样的影响，但几乎看不出来，所以，通常我们会将其忽略）</li>
</ol>
<p>三、js获取时间</p>
<ul>
<li>获得当前时间，<code>var date = new Date()</code>,获得当前时间，以毫秒数表示。</li>
<li><code>getFullYear()</code>,4位年份</li>
<li><code>getMonth()</code>,从0-11，分别表示1-12月</li>
<li><code>getDate()</code>,月份中的天数</li>
<li><code>getDay()</code>,从0-6，分别表示星期日-星期六</li>
<li><code>getHours()</code>,0-23</li>
<li><code>getMinutes()</code>,0-59</li>
<li><code>getSecond()</code>,0-59</li>
</ul>
<p>代码如下：</p>
<p><a href="http://t.cn/RUbL4rP" target="_blank">http://t.cn/RUbL4rP</a></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">&lt;!DOCTYPE html&gt;
&lt;html lang="zh-cn"&gt;
&lt;head&gt;
&lt;title&gt;时钟效果的制作&lt;/title&gt;
&lt;meta charset="utf-8"/&gt;
&lt;meta name="keywords" content="" /&gt;
&lt;meta name="description" content="" /&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt; 
&lt;style type="text/css"&gt;
body {
font-family: 'Microsoft Yahei';
}
ol,ul {
margin: 0;
padding: 0;
list-style: none;
}
h1 {
margin-top: 40px;
text-align: center;
color: #333;
}

/*表盘*/
.clock {
position: relative;
width: 200px;
height: 200px;
border-radius: 100%;
background-color: #000;
margin: 50px auto;
}
.pointer li.circle {
position: absolute;
top: 50%;
left: 50%;
transform-origin: left center; /*基点设置在最左边中间，保证绕着圆心旋转*/
background: #fff;
width: 10px;
height: 10px;
border-radius: 100%;
margin-top: -5px;
margin-left: -5px;
}

/*刻度*/
.line-hour li,
.line-min li {
position: absolute;
left: 50%;
top: 50%;
transform-origin: 0 0;
background-color: #fff;
}
.line-hour li {
width: 10px;
height: 2px;
}
.line-min li {
width: 5px;
height: 2px;
}

/*数字*/
.number {
position: absolute;
height: 150px;
width: 150px;
left: 50%;
top: 50%;
transform: translate(-50%, -50%); /*保证数字居中*/
font-size: 15px;
color: #fff;
}
.number li {
position: absolute;
transform: translate(-50%, -50%);
}

/*指针*/
.pointer li {
position: absolute;
top: 50%;
left: 50%;
transform-origin: left center; /*基点设置在最左边中间，保证绕着圆心旋转*/
background: #fff;
}
.pointer li.hour {
width: 45px;
height: 3px;
margin-top: -1px;
}
.pointer li.min {
width: 60px;
height: 2px;
margin-top: -1px;
}
.pointer li.sec {
width: 90px;
height: 1px;
margin-top: -1px;
background-color: red;
} 
&lt;/style&gt;
&lt;/head&gt; 
&lt;body&gt;

&lt;h1&gt;CSS 时钟效果演示&lt;/h1&gt;

&lt;div class="clock"&gt;
&lt;ul class="line-min"&gt;&lt;/ul&gt;
&lt;ul class="line-hour"&gt;&lt;/ul&gt;
&lt;ol class="number"&gt;&lt;/ol&gt;
&lt;ul class="pointer"&gt;
&lt;li class="hour"&gt;&lt;/li&gt;
&lt;li class="min"&gt;&lt;/li&gt;
&lt;li class="sec"&gt;&lt;/li&gt;
&lt;li class="circle"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
$(document).ready(function() {
function init(){
drawLines($('.line-min'), 60, 85);
drawLines($('.line-hour'), 12, 80);
drawNumbers($('.number'));
move();
}
init();


/*
* 绘制钟表刻度线
* @param wrap 刻度线的父容器
* @param total 刻度线的总个数
* @param translateX 刻度线在x轴方向的偏移量
*/

function drawLines(wrap,total,translateX){ 
var gap = 360/total;
var strHtml ='';
for (var i = 0; i &lt; total; i++) {
strHtml += '&lt;li style="transform:rotate('+ (i*gap) + 'deg) translate(' + translateX + 'px,-50%)"&gt;&lt;/li&gt;';
};
wrap.html(strHtml);
}

/* 
* 绘制时钟数字
* @param wrap 数字的父容器,仿照径向菜单原理http://www.cnblogs.com/wuxiaobin/p/4644806.html
* 由于旋转是从水平x轴开始旋转的，所以需要-90
*/
function drawNumbers(wrap){
var radius = wrap.width() / 2;

var strHtml = '';
for(var i=1; i&lt;=12; i++){
var myAngle = (i-3)/6 * Math.PI; //原公式 角度=&gt;弧度 (i*30-90)*(Math.PI/180) =&gt; (i-3)/6 * Math.PI;

var myX = radius + radius*Math.cos(myAngle), // x=r+rcos(&theta;)
myY = radius + radius*Math.sin(myAngle); // y=r+rsin(&theta;)

strHtml += '&lt;li style="left:' + myX + 'px; top:'+ myY +'px"&gt;' + i + '&lt;/li&gt;';
}
wrap.html(strHtml);
}


/*
* 钟表走动，转动秒针、分针、时针
*/
function move(){
var domHour = $(".hour"),
domMin = $(".min"),
domSec = $(".sec");

setInterval(function(){
var now = new Date(),
hour = now.getHours(),
min = now.getMinutes(),
sec = now.getSeconds();

var secAngle = sec*6 - 90, // s*6-90
minAngle = min*6 + sec*0.1 - 90, // m*6+s*0.1-90
hourAngle = hour*30 + min*0.5 - 90; // h*30+m*0.5 - 90

domSec.css('transform', 'rotate(' + secAngle + 'deg)');
domMin.css('transform', 'rotate(' + minAngle + 'deg)');
domHour.css('transform', 'rotate(' + hourAngle + 'deg)');

document.title = hour + ':' + min + ':' + sec;

},1000);

}
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
</div>
<p>&nbsp;</p>
<p>最终效果：</p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/151802179853485.png" alt="" /></p>]]></description></item><item><title>mysql 如何在访问某张数据表按照某个字段分类输出</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/07/14/4644948.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 14 Jul 2015 03:18:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/07/14/4644948.html</guid><description><![CDATA[<p>也许大家有时候会遇到需要将把数据库中的某张表的数据按照该表的某个字段分类输出，比如一张数据表area如下</p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/141116145791864.png" alt="" /></p>
<p>我们需要将里面的area按照serialize字段进行分类输出，比如这种形式：</p>
<p>&nbsp; &nbsp; &nbsp; areas &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;serialize</p>
<p>阿蓝色，艾沙云 &nbsp; &nbsp; &nbsp;A</p>
<p>重庆森林，传承家园 &nbsp;C</p>
<p>红军楼小区，海员新村 H</p>
<p>&nbsp; &nbsp; &nbsp;.........</p>
<p>要以这种形式放映出来，于是可以这样做，使用mysql中的group_concat()</p>
<p>、group by（<a href="http://t.cn/RUbL4rP" target="_blank">点击</a>）实现，</p>
<p>select serialize,group_concat(area) as areas from area group by serialize；</p>
<p>则可以得到上面数据表</p>
<p>&nbsp;</p>
<p>这里的group_concat(area)是将area按照group by serialize将同个类别（A\B\C）的数据归结在一起，以逗号隔开，如&ldquo;红军楼小区，海员新村&rdquo;...</p>
<p>&nbsp;</p>
<p>于是就可以分类输出，当然还需要对serialize进行分割(explode()）、遍历（foreach）...</p>]]></description></item><item><title>径向菜单的制作</title><link>http://www.cnblogs.com/wuxiaobin/archive/2015/07/14/4644806.html</link><dc:creator>24k-小清新</dc:creator><author>24k-小清新</author><pubDate>Tue, 14 Jul 2015 03:05:00 GMT</pubDate><guid>http://www.cnblogs.com/wuxiaobin/archive/2015/07/14/4644806.html</guid><description><![CDATA[<p>最终效果：</p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/141057229079961.png" alt="" /></p>
<p>在径向菜单的制作前，首先需要知道几点知识点：</p>
<p>Math.sin(x)&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;x 的正玄值。返回值在 -1.0 到 1.0 之间；</p>
<p>Math.cos(x)&nbsp;&nbsp;&nbsp;&nbsp;x 的余弦值。返回的是 -1.0 到 1.0 之间的数；</p>
<p>这两个函数中的X 都是指的&ldquo;弧度&rdquo;而非&ldquo;角度&rdquo;，弧度的计算公式为： 2*PI/360*角度，使用js表示是这样的：Math.PI/180*度数（1度=180/Math.PI）</p>
<p>如：30&deg; 角度 的弧度 = 2*PI/360*30</p>
<p>如何计算圆上任何点坐标（用于计算出子菜单相对于圆的位置）</p>
<p><img src="http://images0.cnblogs.com/blog2015/720690/201507/141046372519614.png" alt="" /></p>
<p>以父容器左上角为圆点，建立坐标系</p>
<p>代码如下：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">&lt;!DOCTYPE html&gt;
&lt;html lang="zh-cn"&gt;
&lt;head&gt;
&lt;title&gt;径向菜单的制作&lt;/title&gt;
&lt;meta charset="utf-8"/&gt;
&lt;meta name="keywords" content="" /&gt;
&lt;meta name="description" content="" /&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt; &lt;!--此处需引入jquery文件<a href="http://t.cn/RUbL4rP" target="_blank">点击</a>--&gt;
&lt;style type="text/css"&gt;
* {
margin: 0;
padding: 0;
}
body {
background-color: #292a38;
font-family: "Microsoft Yahei";
}
h1 {
margin-top: 20px;
text-align: center;
color: #fff;
} 
.navWrap {
position: relative;
width: 200px;
height: 200px;
margin: 50px auto;
border: 2px dotted #4e5061;
border-radius: 50%;
}
.navWrap .main-nav {
position: absolute;
left: 50%;
top: 50%;
transform: translate(-50%,-50%);/*分别向左上移动元素对象的50%，保证居中*/
width: 40px;
height: 40px;
line-height: 40px;
font-size: 12px;
text-align: center;
text-decoration: none;
color: #fff;
border-radius: 3px;
text-shadow: 1px 1px 0px #000;
background: #15a5f3;
cursor: pointer;
} 
.navWrap nav {
position: absolute;
width: 100%;
height: 100%;
transform: scale(0);
transition: all 0.5s ease-out;
opacity: 0;
} 
.navWrap.active nav {
transform: scale(1);
opacity: 1;
}
.navWrap nav &gt; a{
position: absolute;
width: 30px;
height: 30px;
background: #f44283;
text-align: center;
line-height: 30px;
text-decoration: none;
color: #fff;
border-radius: 3px;
text-shadow: 1px 1px 0px #000;
transform: translate(-50%,-50%);
} 
&lt;/style&gt;
&lt;/head&gt; 
&lt;body&gt;

&lt;h1&gt;径向动画菜单效果演示&lt;/h1&gt;

&lt;div class="navWrap"&gt;
&lt;nav&gt;
&lt;a&gt;1&lt;/a&gt;
&lt;a&gt;2&lt;/a&gt;
&lt;a&gt;3&lt;/a&gt;
&lt;a&gt;4&lt;/a&gt;
&lt;a&gt;5&lt;/a&gt;
&lt;a&gt;6&lt;/a&gt;
&lt;a&gt;7&lt;/a&gt;
&lt;a&gt;8&lt;/a&gt;
&lt;/nav&gt;
&lt;a class="main-nav"&gt;点我&lt;/a&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
$(document).ready(function() {
var isLocated = false; //防止重复初始化子菜单位置
$(".navWrap").on('click', '.main-nav', function(event) {
event.preventDefault();
var me = $(this);
var navWrap = me.closest('.navWrap');
var nav = navWrap.find('nav a');
if(!navWrap.hasClass('active')&amp;&amp;!isLocated){ 
//Y=R+Rsin&theta;
//X=R+Rcos&theta;
var r = navWrap.width()/2;
var startAngle =0, endAngle=360; //可以通过改变角度，做出各种各样的径向菜单

//子菜单的夹角
var total = nav.length;
var gap = (endAngle - startAngle)/total;

//角度-&gt;弧度
var radian = Math.PI/180;

/*
* 计算并确定各个子菜单的最终位置
*/
$.each(nav,function(index, el) {
// 当前子菜单与x轴正向的夹角 &theta; （角度-&gt;弧度）
var myAngle = (startAngle + gap*index) * radian; // &theta;
var x = r+r*Math.cos(myAngle),//myAngle为弧度
y = r+r*Math.sin(myAngle);
// 设置当前子菜单的位置 (left,top) = (x,y)
$(this).css({
left: x + 'px',
top: y + 'px'
});
});
isLocated = true;
}
navWrap.toggleClass('active');
});
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
</div>
<p>&nbsp;</p>]]></description></item></channel></rss>